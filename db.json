{
  "questions": [
    {
      "id": 111,
      "type": "ValidOrNot",
      "question": "alert: 'Hello'",
      "answer": false,
      "displayAsCode": ["question"]
    },
    {
      "id": 811,
      "type": "MultipleChoice",
      "question": "Which one of these will print to the browser console?",
      "choices": ["print('hello')","console('hello)","console.log('hello')", "log('hello')"],
      "displayAsCode": ["choices"],
      "answer": 2
    },
    {
      "id": 112,
      "type": "TrueOrFalse",
      "question": "JavaScript is a strongly-typed language",
      "answer": false,
      "displayAsCode": []
    },
    {
      "id": 113,
      "type": "TrueOrFalse",
      "question": "JavaScript is a case-sensitive language",
      "answer": true,
      "displayAsCode": []
    },
    {
      "id": 114,
      "type": "ValidOrNot",
      "question": "let message //receive from API",
      "answer": true,
      "displayAsCode": ["question"],
      "explanation": "Here the variable is declared but not given a value, making it undefined."
    },
    {
      "id": 115,
      "type": "ValidOrNot",
      "question": "let learn,to,code",
      "answer": true,
      "displayAsCode": ["question"],
      "explanation": "It looks odd, yes, but it's actually fine. Three separate varibles are declared but not given values."
    },
    {
      "id": 116,
      "type": "MultipleChoice",
      "question": "Which one of these is not a JavaScript reserved word?",
      "choices": ["const", "instance", "short", "with"],
      "answer": 1,
      "displayAsCode": ["choices"]
    },
    {
      "id": 117,
      "type": "ValidOrNot",
      "question": "const address = {<br />&nbsp;&nbsp;street: '123 Rainbow',<br />&nbsp;&nbsp;city: 'Las Vegas'<br />&nbsp;&nbsp;state: 'NV'<br />}",
      "answer": true,
      "displayAsCode": ["question"],
      "explanation": "This is just standard object literal notation."
    },
    {
      "id": 118,
      "type": "MultipleChoice",
      "given": "const name = 'Mickey'<br />name='Minnie'<br /><br />console.log(name)",
      "question": "Run the code and...",
      "choices": ["Console prints \"Mickey\"", "Console prints \"Minnie\"", "Console prints \"MickeyMinnie\"", "Console displays an error"],
      "answer": "3",
      "displayAsCode": ["given"],
      "explanation": "You're not allowed to change the value of a variabled declared with const. This statement is a little misleading, as you can change the properties of an object or the elements in an array, for example."
    },
    {
      "id": 119,
      "type": "ValidOrNot",
      "question": "let team = \"New York Yankees\"<br />let team = \"San Diego Padres\"",
      "answer": false,
      "displayAsCode": ["question"],
      "explanation": "A variable can be declared only once. Here, it's been declared twice, producing an error."
    },
    {
      "id": 1120,
      "type": "ValidOrNot",
      "question": "let $ = 'Mickey'",
      "answer": true
    },
    {
      "id": 1121,
      "type": "TrueOrFalse",
      "given": "const myName = \"Mickey\"<br />const MyName = \"Mickey\"<br />myName === Myname",
      "question": "This code returns true",
      "answer": true,
      "displayAsCode": ["given"],
      "explanation": "Even though JavaScript is case-sensitive, and the two variables are separate variables, their values are the same &mdash; and so the code returns true."
    },
    {
      "id": 1122,
      "type": "FillBlank",
      "q1": "Code written to provide an explanation or instruction, but which is not evaluated or displayed is called a ",
      "q2": "",
      "size": 8,
      "answers": ["comment"],
      "explanation": "A comment. There are both single- and multi-line versions of comments.",
      "displayAsCode": [],
      "moreInfo": "https://javascript.info/comments"
    },
    {
      "id": 1123,
      "type": "FillBlank",
      "given": "/*<br />Make sure the turbo-blaster is loaded<br />before engaging the laser macrifier.<br />*/",
      "q1": "The above code is a ",
      "q2": " comment",
      "answers": ["multi-line", "multiple-line", "multi line", "multiple line"],
      "explanation": "Any of these would be correct: 'multi line, multi-line, multiple line, multiple-line'",
      "displayAsCode": ["given"],
      "size": 12,
      "moreInfo": "https://javascript.info/comments"
    },
    {
      "id": 1124,
      "type": "FillBlank",
      "given": "Multiply 5 times 7",
      "q1": 5,
      "q2": 7,
      "answers": ["*"],
      "explanation": "",
      "moreInfo": "https://javascript.info/operators",
      "size": 1,
      "displayAsCode": ["q1", "q2", "answer"]
    },
    {
      "id": 1125,
      "type": "MultipleChoice",
      "question": "What operator will give you the <i>remainder</i> left from dividing one number by another?",
      "choices": ["%", "~", "^", "#"],
      "answer": "0",
      "explanation": "",
      "moreInfo": "https://javascript.info/operators",
      "displayAsCode": ["choices"]
    },
    {
      "id": 1126,
      "type": "FillBlank",
      "given": "Raise 4 to the 3d power",
      "q1": 4,
      "q2": 3,
      "answers": ["**"],
      "explanation": "",
      "moreInfo": "https://javascript.info/operators",
      "size": 1,
      "displayAsCode": ["q1", "q2", "answer"]
    },
    {
      "id": 1127,
      "type": "FillBlank",
      "given": "Join two strings together to form a longer string",
      "q1": "\"Time flies like an arrow",
      "q2": ";fruit flies like a banana\"",
      "answers": ["+"],
      "explanation": "The + operator is used both for addition and for joining strings &mdash; a process known as <em>concatenation</em>",
      "moreInfo": "https://javascript.info/operators",
      "size": 1,
      "displayAsCode": ["answer"]
    },
    {
      "id": 1128,
      "type": "FillBlank",
      "given": "Provide the operator that will <em>increment</em> a variable by 1 <em>after</em> that variable has been evaluated.",
      "q1": "let x = 99; x",
      "q2": "",
      "answers": ["++"],
      "explanation": "++ (when used in this position) adds 1 to a number after it's been evaluated. This is referred to as a <em>postfix</em> operator.",
      "moreInfo": "https://javascript.info/operators",
      "size": 2,
      "displayAsCode": ["q1","answer"]
    },
    {
      "id": 1129,
      "type": "FillBlank",
      "given": "Provide the operator that will <em>increment</em> a variable by 1 <em>before</em> that variable has been evaluated.",
      "q1": "let x = 99;",
      "q2": "x",
      "answers": ["++"],
      "explanation": "++ (when used in this position) adds 1 to a number before it's been evaluated. This is referred to as a <em>prefix</em> operator.",
      "moreInfo": "https://javascript.info/operators",
      "size": 2,
      "displayAsCode": ["q1","q2","answer"]
    },
    {
      "id": 1130,
      "type": "FillBlank",
      "given": "Provide the operator that will <em>decrement</em> a variable by 1 <em>after</em> that variable has been evaluated.",
      "q1": "let x = 99; x",
      "q2": "",
      "answers": ["--"],
      "explanation": "-- (when used in this position) subtracts 1 from a number after it's been evaluated. This is referred to as a <em>postfix</em> operator.",
      "moreInfo": "https://javascript.info/operators",
      "size": 2,
      "displayAsCode": ["q1","answer"]
    },
    {
      "id": 1131,
      "type": "FillBlank",
      "given": "Provide the operator that will <em>decrement</em> a variable by 1 <em>before</em> that variable has been evaluated.",
      "q1": "let x = 99;",
      "q2": "x",
      "answers": ["--"],
      "explanation": "-- (when used in this position) adds 1 to a number before it's been evaluated. This is referred to as a <em>prefix</em> operator.",
      "moreInfo": "https://javascript.info/operators",
      "size": 2,
      "displayAsCode": ["q1","q2","answer"]
    },
    {
      "id": 1132,
      "type": "FillBlank",
      "given": "Provide the <em>shortcut</em> operator that will add 7 to x",
      "q1": "let x = 99; x",
      "q2": "x",
      "answers": ["+="],
      "explanation": "I refer to it as a <em>shortcut</em> operator because it's a shorter version of </pre>x = x + 7</pre>",
      "moreInfo": "https://javascript.info/operators",
      "size": 2,
      "displayAsCode": ["q1","q2","answer"]
    },
    {
      "id": 1133,
      "type": "FillBlank",
      "given": "Assume <pre>addCustomer</pre> returns either <pre>true</pre> or <pre>false</pre>. Use an operator that converts Boolean (true|false) values into numbers: 0 if false, 1 if true.",
      "q1": "let customerAdded = addCustomer()<br />custmomers += ",
      "q2": "customerAdded",
      "answers": ["+"],
      "explanation": "Another use for the plus operator: when used in this way, it automatically converts Boolean values into corresponding numeric ones.",
      "moreInfo": "https://javascript.info/operators",
      "size": 1,
      "displayAsCode": ["q1","q2","answer"]
    },
    {
      "id": 1134,
      "type": "ValidOrNot",
      "question": "let a = b = c = 2 + 2",
      "answer": true,
      "displayAsCode": ["question"],
      "moreInfo":"https://javascript.info/operators",
      "explanation": "Evaluation begins at the farthest <b>right</b> and works backwards, so the first operation adds 2 plus 2 to arrive at 4. That value is then assigned to the variable, c. Moving backwards one operation, the value of c (which is 4) is assigned to b. Then once again, back up and assign the value of b (4) to the variable, a."
    },
    {
      "id": 1135,
      "type": "FillBlank",
      "given": "Assume <pre>addCustomer</pre> returns either <pre>true</pre> or <pre>false</pre>. Use an operator that converts Boolean (true|false) values into numbers: 0 if false, 1 if true.",
      "q1": "let customerAdded = addCustomer()<br />custmomers += ",
      "q2": "customerAdded",
      "answers": ["+"],
      "explanation": "Another use for the plus operator: when used in this way, it automatically converts Boolean values into corresponding numeric ones.",
      "moreInfo": "https://javascript.info/operators",
      "size": 1,
      "displayAsCode": ["q1","q2","answer"]
    },
    {
      "id": 1136,
      "type": "TrueOrFalse",
      "question": "Just as there is a <pre>+=</pre> operator, there are also <pre>*=, -=</pre>, and <pre>/=</pre> operators.",
      "answer": true,
      "displayAsCode": []
    },
    {
      "id": 1137 ,
      "type": "TrueOrFalse",
      "question": "To test for strict equality (both value <em>and</em> type), use the <pre>~=</pre> operator.",
      "answer": false,
      "explanation": "For strict equality, use the 'triple-equals' operator: ==="
    },
    {
      "id": 1138,
      "type": "MultipleChoice",
      "question": "Which one of these operators perform a <em>not-equality</em> check?",
      "choices": ["~=", "-=", "!==", "^="],
      "displayAsCode": ["choices"],
      "answer": 2,
      "explanation": "For non-equality, use the '!==' operator. The ! is pronounced 'bang'."
    },
    {
      "id": 1139 ,
      "type": "TrueOrFalse",
      "question": "You should <em>always</em> end a statement with a semi-colon.",
      "answer": false,
      "explanation": "Most of the time, JavaScript can imply the semi-colon at a line break. There are rare exceptions to this, however -- especially in the case of functions that <pre>return</pre> a value.",
      "moreInfo": "https://javascript.info/structure"
    },
    {
      "id": 1140 ,
      "type": "TrueOrFalse",
      "question": "Statements are syntax constructs and commands that perform actions.",
      "answer": true,
      "explanation": "",
      "moreInfo": "https://javascript.info/structure"
    },
    {
      "id": 1141 ,
      "type": "TrueOrFalse",
      "question": "Multiple statements can be placed on the same line if separated with a semi-colon",
      "answer": true,
      "explanation": "",
      "moreInfo": "https://javascript.info/structure"
    },
    {
      "id": 1142,
      "type": "ValidOrNot",
      "question": "let customersAdded = 0 // total for this salesperson",
      "answer": true,
      "displayAsCode": ["question"],
      "moreInfo": "https://javascript.info/structure"
    },
    {
      "id": 1143,
      "type": "TrueOrFalse",
      "given": "let a = 5<br />let b = 10/5<br />console.assert(a === b)",
      "question": "You can use <pre>console.assert</pre> to test the truth of assertions.",
      "answer": true,
      "explanation": "This is a little-used function of the console object. You can think of it as a poor-man's test. However, be aware that assertions that are true will print nothing to the console; only false assertions will be displayed."
    },
    {
      "id": 1144,
      "type": "MultipleChoice",
      "question": "<pre>console.table</pre>...",
      "choices": ["is invalid JavaScript", "counts the number of cells in an HTML table", "stashes code into localStorage", "displays data in a tabular format"],
      "displayAsCode": [],
      "answer": 3
    },
    {
      "id": 1145,
      "type": "TrueOrFalse",
      "question": "In almost all cases, the use of <pre>let</pre> or <pre>const</pre> is preferable to <pre>var</pre> when declaring variables.",
      "answer": true,
      "explanation": "Unless you have a very specific need for the behavior <pre>var</pre> produces (and you'll know if you do), you're better off with either <pre>let</pre> or <pre>const</pre>."
    },
    {
      "id": 1146,
      "type": "TrueOrFalse",
      "given": "let beginning = 42<br />let ending = \"24\"<br />console.log(beginning + ending)",
      "question": "Prints 66 to the console",
      "answer": false,
      "explanation": "Since \"ending\" is a string, the plus operator will be used in concatenation mode: the console will print out \"4224\"",
      "displayAsCode": ["given"]
    },
    {
      "id": 1147,
      "type": "ValidOrNot",
      "question": "const 2dNotice = false",
      "answer": false,
      "explanation": "JavaScript variables can't begin with a number",
      "displayAsCode": ["question"]
    },
    {
      "id": 1148,
      "type": "ValidOrNot",
      "question": "const second notice = false",
      "answer": false,
      "explanation": "JavaScript variables can't have a space in them",
      "displayAsCode": ["question"]
    },
    {
      "id": 211,
      "type": "TrueOrNot",
      "question": "The <pre>null</pre> value means \"nothing\" or \"value unknown\"",
      "answer": true,
      "explanation": "If you use <pre>null</pre>, make sure you don't surround it in quotes. Doing so would turn the value into a string.",
      "displayAsCode": []
    },
    {
      "id": 212,
      "type": "TrueOrNot",
      "question": "The <pre>undefined</pre> value means \"value has not been assigned\"",
      "answer": true,
      "explanation": "If you use <pre>undefined</pre>, make sure you don't surround it in quotes. Doing so would turn the value into a string.",
      "displayAsCode": []
    },
    {
      "id": 213,
      "type": "FillBlank",
      "given": "",
      "question": "",
      "q1": "<pre>typeof 1500n</pre> returns",
      "q2": "",
      "choices": [],
      "answer": "",
      "answers": ["BigInt", "bigint", "Bigint"],
      "explanation": "The presence of <pre>n</pre> on the end makes it a <pre>bigint</pre>, not the actual number size itself.",
      "displayAsCode": ["answer"],
      "moreInfo": "https://javascript.info/types",
      "size": 6
    },
    {
      "id": 214,
      "type": "FillBlank",
      "given": "",
      "question": "",
      "q1": "<pre>typeof 20000000</pre> returns",
      "q2": "",
      "choices": [],
      "answer": "",
      "answers": ["number", "Number"],
      "explanation": "Even though the number is large, it's not a <pre>bigint</pre> since there is no <pre>n</pre> on the end of the number",
      "displayAsCode": ["answer"],
      "moreInfo": "",
      "size": 6
    },
    {
      "id": 215,
      "type": "FillBlank",
      "given": "",
      "question": "",
      "q1": "<pre>typeof \"seven\"</pre> returns",
      "q2": "",
      "choices": [],
      "answer": "",
      "answers": ["string", "String"],
      "explanation": "Anything wrapped in quotes is a string.",
      "displayAsCode": ["answer"],
      "moreInfo": "",
      "size": 6
    },
    {
      "id": 216,
      "type": "FillBlank",
      "given": "",
      "question": "",
      "q1": "<pre>typeof \`seven\`</pre> returns",
      "q2": "",
      "choices": [],
      "answer": "",
      "answers": ["string", "String"],
      "explanation": "Anything wrapped in quotes (or tick marks) is a string.",
      "displayAsCode": ["answer"],
      "moreInfo": "",
      "size": 6
    },
    {
      "id": 217,
      "type": "FillBlank",
      "given": "",
      "question": "",
      "q1": "<pre>typeof alert</pre> returns",
      "q2": "",
      "choices": [],
      "answer": "",
      "answers": ["function"],
      "explanation": "",
      "displayAsCode": ["answer"],
      "moreInfo": "https://javascript.info/types",
      "size": 8
    },
    {
      "id": 218,
      "type": "FillBlank",
      "given": "",
      "question": "",
      "q1": "<pre>typeof null</pre> returns",
      "q2": "",
      "choices": [],
      "answer": "",
      "answers": ["object"],
      "explanation": "This is somewhat curious, as <pre>typeof undefined</pre> returns <pre>undefined</pre>. In the link provided, the author identifies this as a mistake, held over from the early days of JavaScript. But there's much weirder stuff than this in JavaScript!",
      "displayAsCode": ["answer"],
      "moreInfo": "https://javascript.info/types",
      "size": 6
    },
    {
      "id": 219,
      "type": "FillBlank",
      "given": "",
      "question": "",
      "q1": "<pre>typeof undefined</pre> returns",
      "q2": "",
      "choices": [],
      "answer": "",
      "answers": ["undefined"],
      "explanation": "This is somewhat curious, as <pre>typeof null</pre> returns <pre>object</pre>. But there's much weirder stuff than this in JavaScript!",
      "displayAsCode": ["answer"],
      "moreInfo": "https://javascript.info/types",
      "size": 9
    },
    {
      "id": 2110,
      "type": "FillBlank",
      "given": "",
      "question": "",
      "q1": "<pre>typeof true</pre> returns",
      "q2": "",
      "choices": [],
      "answer": "",
      "answers": ["boolean"],
      "explanation": "",
      "displayAsCode": ["answer"],
      "moreInfo": "https://javascript.info/types",
      "size": 7
    },
    {
      "id": 2111,
      "type": "FillBlank",
      "given": "",
      "question": "",
      "q1": "<pre>typeof false</pre> returns",
      "q2": "",
      "choices": [],
      "answer": "",
      "answers": ["boolean"],
      "explanation": "",
      "displayAsCode": ["answer"],
      "moreInfo": "https://javascript.info/types",
      "size": 7
    },
    {
      "id": 2112,
      "type": "FillBlank",
      "given": "",
      "question": "",
      "q1": "<pre>typeof Math</pre> returns",
      "q2": "",
      "choices": [],
      "answer": "",
      "answers": ["object"],
      "explanation": "",
      "displayAsCode": ["answer"],
      "moreInfo": "https://javascript.info/types",
      "size": 6
    },
    {
      "id": 2113,
      "type": "FillBlank",
      "given": "",
      "question": "",
      "q1": "<pre>typeof []</pre> returns",
      "q2": "",
      "choices": [],
      "answer": "",
      "answers": ["object"],
      "explanation": "Although we always refer to this as an <em>array</em>, from JavaScript's POV, it's just an object.",
      "displayAsCode": ["answer"],
      "moreInfo": "https://javascript.info/types",
      "size": 6
    },
    {
      "id": 2114,
      "type": "FillBlank",
      "given": "",
      "question": "",
      "q1": "<pre>typeof {}</pre> returns",
      "q2": "",
      "choices": [],
      "answer": "",
      "answers": ["object"],
      "explanation": "",
      "displayAsCode": ["answer"],
      "moreInfo": "https://javascript.info/types",
      "size": 6
    },
    {
      "id": 2115,
      "type": "FillBlank",
      "given": "const add = (a,b) => {return a + b}",
      "question": "",
      "q1": "<pre>typeof add</pre> returns",
      "q2": "",
      "choices": [],
      "answer": "",
      "answers": ["function"],
      "explanation": "",
      "displayAsCode": ["answer", "given"],
      "moreInfo": "https://javascript.info/types",
      "size": 8
    },
    {
      "id": 2116,
      "type": "FillBlank",
      "given": "const array = [true, 5, \"tree\", [], {}]",
      "question": "",
      "q1": "<pre>typeof array</pre> returns",
      "q2": "",
      "choices": [],
      "answer": "",
      "answers": ["object"],
      "explanation": "As you can see, arrays (even though <pre>typeof</pre> correctly identifies it as an <pre>object</pre>) can hold values of different types.",
      "displayAsCode": ["answer", "given"],
      "moreInfo": "https://javascript.info/types",
      "size": 7
    },
    {
      "id": 121,
      "type": "ValidOrNot",
      "question": "let name = \"Mickey\"<br />let greeting = `Hello, ${name}`",
      "answer": true,
      "explanation": "Tick marks indicate a <em>template string</em>, in which JavaScript expressions can be interpreted when placed inside <pre>${</pre> and <pre>}</pre>",
      "displayAsCode": ["question"]
    },
    {
      "id": 2117,
      "type": "TrueOrFalse",
      "question": "Because JavaScript is not a strongly-typed language, it has no concept of <em>data types</em>",
      "answer": false,
      "explanation": "Even though JavaScript is a weakly-typed language, it still has data types.",
      "displayAsCode": []
    },
    {
      "id": 212,
      "type": "MultipleChoice",
      "question": "Which one of these is <em>not</am> a JavaScript data type?",
      "choices": ["string", "uri", "function", "map"],
      "displayAsCode": [],
      "answer": 1,
      "explanation": "string, function, and map are all JavaScript data types. uri, on the other hand, is not."
    },
    {
      "id": 2118,
      "type": "MultipleChoice",
      "question": "Which one of these is <em>not</em> a JavaScript data type?",
      "choices": ["set", "object", "number", "conditional"],
      "displayAsCode": [],
      "answer": 3,
      "explanation": "set, object, and number are all JavaScript data types. conditional, on the other hand, is not."
    },
    {
      "id": 2119,
      "type": "FillBlank",
      "q1": "A data type that is a set of statements that performs a task or calculates a value is called a ",
      "answers": ["function"],
      "explanation": "",
      "displayAsCode": ["answer"],
      "size": 8
    },
    {
      "id": 2120,
      "type": "MultipleChoice",
      "given": "const catYears = 54/0",
      "question": "This code will return what data type?",
      "choices": ["NaN", "string", "Error", "number"],
      "answer": "3",
      "explanation": "This is an odd one. Dividing by 0 returns <pre>Infinity</pre>, which is actually a number.",
      "displayAsCode": ["choices", "given"]
    },
    {
      "id": 2121,
      "type": "ValidOrNot",
      "given": "",
      "question": "const x = NaN",
      "answer": true,
      "explanation": "<pre>NaN</pre>, short for <em>Not a Number</em>, is usually encountered as the result of a mathematical operation that goes awry, but we can, in fact, set a variable to <pre>NaN</pre>. Why someone would <em>want</em> to do this is a mystery.",
      "displayAsCode": ["question"],
      "moreInfo": ""
    },
    {
      "id": 2122,
      "type": "FillBlank",
      "given": "The largest value of a number data type is (2<sup>53</sup> - 1) which is 9007199254740991. To use an even larger value, append the value with...",
      "q1": "let incrediblyBigNumber = 5487895612354778954562541",
      "answers": ["n"],
      "size": 1,
      "explanation": "This is a new data type in JavaScript: <b>BigInt</b>. To use it, append <pre>n</pre> to the value.",
      "displayAsCode": ["q1"],
      "moreInfo": "https://javascript.info/bigint"
    },
    {
      "id": 2123,
      "type": "FillBlank",
      "given": "'Mickey' / 7",
      "q1": "Running this code will return",
      "answers": ["NaN"],
      "size": 3,
      "explanation": "You might think it would produce an error, but instead, we get <pre>NaN</pre> &mdash; short for <em>Not a Number</em>",
      "displayAsCode": ["given"],
      "moreInfo": "https://javascript.info/types"
    },
    {
      "id": 2124,
      "type": "FillBlank",
      "given": "You want to find the data type of a variable, <pre>x</pre>...",
      "q1": "console.log(",
      "q2": "x)",
      "size": 6,
      "answers": ["typeof"],
      "explanation": "<pre>typeof</pre> is followed by its <em>operand</em>. This operator is unusual in that the operand can be wrapped in parentheses &mdash; or not.",
      "displayAsCode": ["q1","answer","q2"],
      "moreInfo": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof"
    },
    {
      "id": 2125,
      "type": "TrueOrNot",
      "given": "",
      "question": "A <em>template literal</em> (also called a <em>template string</em> allows interpolation of JavaScript within a string.",
      "answer": true,
      "explanation": "Template literals are surrounded by tick marks &mdash; <pre>``</pre>",
      "displayAsCode": [],
      "moreInfo": "https://javascript.info/types"
    },
    {
      "id": 2126,
      "type": "ValidOrNot",
      "given": "",
      "question": "let msg = `Today is ${new Date()}`",
      "answer": true,
      "explanation": "Template strings allow JavaScript interpolation within the string.",
      "displayAsCode": ["question"],
      "moreInfo": "https://javascript.info/types"
    },
    {
      "id": 2127,
      "type": "ValidOrNot",
      "question": "`let guestList = 'Guests:'<br>* John<br>* Wolfgang<br>* Esmerelda<br>`",
      "given": "",
      "answer": true,
      "explanation": "Not only is this valid, but template literals have the advantage that they respect white space (such as line breaks).",
      "displayAsCode": ["question"],
      "moreInfo": "https://javascript.info/string"
    },
    {
      "id": 2128,
      "type": "ValidOrNot",
      "question": "\"let guestList = 'Guests:'<br>* John<br>* Wolfgang<br>* Esmerelda<br>\"",
      "given": "",
      "answer": false,
      "explanation": "You can only split lines, as we're doing here, with string literals, not normal strings.",
      "displayAsCode": ["question"],
      "moreInfo": "https://javascript.info/string"
    },
    {
      "id": 2129,
      "type": "FillBlank",
      "given": "You want to split a string across multiple lines with a normal string (not a string literal)...",
      "q1": "Four score and seven years ago",
      "q2": "our fathers brought forth on this continent a new nation.",
      "answers": ["\\n"],
      "explanation": "Use the back slash (<pre>\\</pre>) when you want to use one of several <em>special</em> characters. This is known as <em>escaping</em> a character. In this case, the right answer is \\n",
      "displayAsCode": [],
      "moreInfo": "https://javascript.info/string",
      "size": 2
    },
    {
      "id": 2130,
      "type": "TrueOrFalse",
      "given": "You want to use double quotes within a string that has been created with double quotes &mdash; like this: \"<pre>Amadeus was referred to by his friends as \\\"Wolfie\\\"</pre>",
      "answer": true,
      "explanation": "Use the back slash (<pre>\\</pre>) when you want to use one of several <em>special</em> characters. This is known as <em>escaping</em> a character. In this case, the right answer is \\\"",
      "displayAsCode": [],
      "moreInfo": "https://javascript.info/string",
      "size": 0
    },
    {
      "id": 2131,
      "type": "TrueOrFalse",
      "question": "If you want to insert a tab character in a normal string (not a string template), you should use the escape code<pre>\\t</pre>",
      "answer": true,
      "explanation": "Use the back slash (<pre>\\</pre>) when you want to use one of several <em>special</em> characters. This is known as <em>escaping</em> a character. In this case, the right answer is \\t",
      "displayAsCode": [],
      "moreInfo": "https://javascript.info/string",
      "size": 0
    },
    {
      "id": 2132,
      "type": "MultipleChoice",
      "given": "",
      "question": "Which one of these is <em>not</em> a JavaScript data type?",
      "choices": ["char", "object", "boolean", "symbol"],
      "answer": 0,
      "explanation": "Many languages have a <pre>char</pre> data type. JavaScript does not.",
      "displayAsCode": [],
      "moreInfo": "https://javascript.info/types"
    },
    {
      "id": 2133,
      "type": "FillBlank",
      "given": "",
      "q1": "A data type that specifies whether something is <pre>true</pre> or <pre>false</pre> is a",
      "answers": ["Boolean", "boolean"],
      "explanation": "Note that <pre>boolean</pre> data type values can <em>only</em> be <pre>true</pre> or <pre>false</pre>. Also note the lack of quotes &mdash; these are <em>not</em> strings.",
      "displayAsCode": ["answer"],
      "moreInfo": "https://javascript.info/types",
      "size": 7
    },
    {
      "id": 2134,
      "type": "TrueOrNot",
      "given": "let invited = \"false\"",
      "question": "<pre>invited</pre> has a value of type, <pre>boolean</pre>",
      "answer": false,
      "explanation": "Putting <pre>false</pre> in quotes makes this a <pre>string</pre> data type. Boolean values do not allow quotes.",
      "displayAsCode": ["given"],
      "moreInfo": "https://javascript.info/types"
    },
    {
      "id": 2135,
      "type": "FillBlank",
      "given": "You want to \"flip\" the value of a boolean value &mdash; changing <pre>true</pre> to <pre>false</pre> or <i>vice versa</i>",
      "q1": "let isInvited = ",
      "q2": "isInvited = ",
      "answers": ["!"],
      "explanation": "Using the <i>bang</i> operator (<pre>!</pre>)in this way is a common idiom.",
      "displayAsCode": ["q1", "q2", "answer"],
      "moreInfo": "https://javascript.info/types",
      "size": 1
    },
    {
      "id": 2136,
      "type": "FillBlank",
      "given": "Comparisons of values always return a boolean value. Here, use an operator to see if <pre>x</pre> is greater than <pre>y</pre>.",
      "q1": "x",
      "q2": "y ",
      "answers": [">"],
      "explanation": "",
      "displayAsCode": ["q1", "q2", "answer"],
      "moreInfo": "https://javascript.info/logical-operators",
      "size": 1
    },
    {
      "id": 2137,
      "type": "MultipleChoice",
      "given": "",
      "question": "Which of these is not a <em>primitive</em> data type?",
      "q1": "",
      "q2": "",
      "choices": ["number", "object", "string", "boolean"],
      "answer": 1,
      "answers": [""],
      "explanation": "",
      "displayAsCode": [],
      "moreInfo": "https://javascript.info/types",
      "size": 0
    },
    {
      "id": 311,
      "type": "FillBlank",
      "given": "Determine if 42 is greater than 200/4.378",
      "question": "",
      "q1": "console.log(",
      "q2": ")",
      "choices": [],
      "answer": "",
      "answers": ["42 > 200 / 4.378"],
      "explanation": "The <pre>></pre> operator is used to determine if one value is greater than another.",
      "displayAsCode": ["q1", "answer"],
      "moreInfo": "https://javascript.info/comparison",
      "size": 16
    },
    {
      "id": 312,
      "type": "FillBlank",
      "given": "Determine if 95 is less than than 64",
      "question": "",
      "q1": "console.log(",
      "q2": ")",
      "choices": [],
      "answer": "",
      "answers": ["95 < 64"],
      "explanation": "The <pre><</pre> operator is used to determine if one value is less than another.",
      "displayAsCode": ["q1", "q2", "answer"],
      "moreInfo": "https://javascript.info/comparison",
      "size": 16
    },
    {
      "id": 313,
      "type": "FillBlank",
      "given": "const secretCode = \"adi!227\"<br>\/\/Determine if <pre>secretCode</pre> is equal to \"adi!227\" using regular (non-strict) equality ",
      "question": "",
      "q1": "console.log(",
      "q2": ")",
      "choices": [],
      "answer": "",
      "answers": ["secretCode == \"adi!227\"", "\"adi!227\" == secretCode"],
      "explanation": "Regular (non-strict) equality uses double equal (<pre>==</pre>) and does not check to see if the values are of the same <em>type</em>. In general, it's safer to use strict equality triple equal (<pre>===</pre>), which checks both type <em>and</em> value.",
      "displayAsCode": ["q1", "q2","answer", "given"],
      "moreInfo": "https://javascript.info/comparison",
      "size": 24
    },
    {
      "id": 314,
      "type": "FillBlank",
      "given": "const x = 57<br>const y = 114 / 2<br>\/\/Determine if <pre>x</pre> is greater than or equal to <pre>y</pre>",
      "question": "",
      "q1": "console.log(",
      "q2": ")",
      "choices": [],
      "answer": "",
      "answers": ["x >= y"],
      "explanation": "",
      "displayAsCode": ["q1", "q2","answer", "given"],
      "moreInfo": "https://javascript.info/comparison",
      "size": 8
    },
    {
      "id": 315,
      "type": "FillBlank",
      "given": "const x = 46<br>const y = 23 +19<br>\/\/Determine if <pre>x</pre> is less than or equal to <pre>y</pre>",
      "question": "",
      "q1": "console.log(",
      "q2": ")",
      "choices": [],
      "answer": "",
      "answers": ["x <= y"],
      "explanation": "",
      "displayAsCode": ["q1", "q2","answer", "given"],
      "moreInfo": "https://javascript.info/comparison",
      "size": 8
    },
    {
      "id": 316,
      "type": "FillBlank",
      "given": "const x = true<br>const y = 1<br>\/\/Determine if <pre>x</pre> is equal to <pre>y</pre> (regular, not strict equality)",
      "question": "",
      "q1": "console.log(",
      "q2": ")",
      "choices": [],
      "answer": "",
      "answers": ["x == y"],
      "explanation": "If you actually execute this code, you'll see that the expression returns <pre>true</pre>. This is because the double equal does a <em>type conversion</em> such that <pre>true</pre> is converted to <pre>1</pre>. This is why you almost always want to use strict equality.",
      "displayAsCode": ["q1", "q2","answer", "given"],
      "moreInfo": "",
      "size": 8
    },
    {
      "id": 317,
      "type": "FillBlank",
      "given": "const x = true<br>const y = 1<br>\/\/Determine if <pre>x</pre> is equal to <pre>y</pre> (strict equality)",
      "question": "",
      "q1": "console.log(",
      "q2": ")",
      "choices": [],
      "answer": "",
      "answers": ["x === y"],
      "explanation": "If you actually execute this code, you'll see that the expression returns <pre>false</pre>. This is because the triple equal does <em>not</em> do a <em>type conversion</em>. This is why you almost always want to use strict equality.",
      "displayAsCode": ["q1", "q2","answer", "given"],
      "moreInfo": "",
      "size": 8
    },
    {
      "id": 318,
      "type": "FillBlank",
      "given": "const x = null<br>const y = undefined<br>\/\/Determine if <pre>x</pre> is equal to <pre>y</pre> (regular, non-strict equality)",
      "question": "",
      "q1": "console.log(",
      "q2": ")",
      "choices": [],
      "answer": "",
      "answers": ["x == y"],
      "explanation": "If you actually execute this code, you'll see that the expression returns <pre>true</pre>. This is because the double equal does some weird type-casting. I'm not sure the people who wrote this into the language originally knew how weird things would get. This is why you almost always want to use strict equality.",
      "displayAsCode": ["q1", "q2","answer", "given"],
      "moreInfo": "",
      "size": 8
    },
    {
      "id": 319,
      "type": "FillBlank",
      "given": "const x = null<br>const y = undefined<br>\/\/Determine if <pre>x</pre> is equal to <pre>y</pre> (strict equality)",
      "question": "",
      "q1": "console.log(",
      "q2": ")",
      "choices": [],
      "answer": "",
      "answers": ["x === y"],
      "explanation": "If you actually execute this code, you'll see that the expression returns <pre>false</pre>. Unlike with double equal, triple equal does not do some weird type-casting. This is why you almost always want to use strict equality.",
      "displayAsCode": ["q1", "q2","answer", "given"],
      "moreInfo": "",
      "size": 8
    },
    {
      "id": 3110,
      "type": "FillBlank",
      "given": "const x = null<br>const y = 0<br>\/\/Determine if <pre>x</pre> is greater than or equal to <pre>y</pre>.",
      "question": "",
      "q1": "console.log(",
      "q2": ")",
      "choices": [],
      "answer": "",
      "answers": ["x >= y"],
      "explanation": "If you actually execute this code, you'll see that the expression returns <pre>true</pre>. This is because <pre>>=</pre> does some voodoo type-casting.",
      "displayAsCode": ["q1", "q2","answer", "given"],
      "moreInfo": "",
      "size": 8
    },
    {
      "id": 3111,
      "type": "",
      "given": "let customerStatus = \"gold\"<br>let percentOff = customerStatus === \"gold\" ? 10 : 0",
      "question": "",
      "q1": "The <pre>percentOff</pre> number will be ",
      "q2": "",
      "choices": [],
      "answer": "",
      "answers": ["10", "10%"],
      "explanation": "This <em>conditional operator</em> evaluates the first statement: <pre>customerStatus === \"gold\"</pre>. If this evaluates to <pre>true</pre> the value immediately after the <pre>?</pre> is returned. If it evaluates to <pre>false</pre>, the value after the <pre>:</pre> is returned.",
      "displayAsCode": ["answer", "given"],
      "moreInfo": "https://javascript.info/ifelse",
      "size": 5
    },
    {
      "id": 3112,
      "type": "ValidOrNot",
      "given": "",
      "question": "if 6 > 5 return true",
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": false,
      "answers": [""],
      "explanation": "The conditional portion (<pre>6 > 5</pre>) must be wrapped in parentheses.",
      "displayAsCode": ["question", "answer"],
      "moreInfo": "https://javascript.info/ifelse",
      "size": 0
    },
    {
      "id": 3113,
      "type": "ValidOrNot",
      "given": "",
      "question": "if (6 > 5) return true",
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [""],
      "explanation": "If you can fit the results of the if condition on the same line, you don't need to use <pre>{}</pre> to wrap the <pre>return true</pre>. That said, this is a bad idea, likely to cause trouble down the line: use curly braces with your if conditions.",
      "displayAsCode": ["question", "answer"],
      "moreInfo": "https://javascript.info/ifelse",
      "size": 0
    },
    {
      "id": 3114,
      "type": "ValidOrNot",
      "given": "",
      "question": "let registered = false<br>if (registered) {\/\/ do something }",
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [""],
      "explanation": "This is a common shorthand for <pre>if (registered === true)</pre>",
      "displayAsCode": ["question"],
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 3115,
      "type": "ValidOrNot",
      "given": "",
      "question": "let registered = true<br>registered = !registered",
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [""],
      "explanation": "Appending a bang (<pre>!</pre>) to a boolean value flips the value to the opposite.",
      "displayAsCode": ["question"],
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 3116,
      "type": "FillBlank",
      "given": "let registered = true<br>let x = Math.random()<br>\/\/ if x greater than 0.5, flip the value of registered",
      "question": "",
      "q1": "if (x > 0.5){<br>",
      "q2": "<br>}",
      "choices": [],
      "answer": "",
      "answers": ["registered = !registered"],
      "explanation": "Appending a bang (<pre>!</pre>) to a boolean value flips it to its opposite.",
      "displayAsCode": ["given", "q1", "q2", "answer"],
      "moreInfo": "",
      "size": 25
    },
    {
      "id": 3117,
      "type": "ValidOrNot",
      "given": "",
      "question": "let confused = !!!true",
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [""],
      "explanation": "Appending multiple <pre>!</pre> to a boolean value flips the value multiple times. In this case, confused ends up as <pre>false</pre>.",
      "displayAsCode": ["question"],
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 3118,
      "type": "ValidOrNot",
      "given": "",
      "question": "if (Math.random() > 0.5) then {<br>&nbsp;&nbsp;\/\/ do something<br>}",
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": false,
      "answers": [""],
      "explanation": "You don't use <pre>then</pre> with conditional statements.",
      "displayAsCode": ["question"],
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 3119,
      "type": "ValidOrNot",
      "given": "",
      "question": "if (Math.random() > 0.5) {<br>&nbsp;&nbsp;\/\/ do something<br>} else {<br>&nbsp;&nbsp;\/\/ do something else<br>}",
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [""],
      "explanation": "Use <pre>else</pre> to direct the action if the initial <pre>if</pre> condition is <pre>false</pre>.",
      "displayAsCode": ["question"],
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 3120,
      "type": "AllMixedUp",
      "given": "Arrange to test to see if registered is greater than unregistered",
      "question": "",
      "q1": "",
      "q2": "",
      "mixed": ["unregistered",">", ")", "registered","if", "("],
      "ordered": ["if", "(","registered", ">", "unregistered", ")"],
      "choices": [],
      "answer": "",
      "answers": [""],
      "explanation": "",
      "displayAsCode": [],
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 3121,
      "type": "FillBlank",
      "given": "<pre>let a = 1, b = 2, winner</pre><br>If a is greater than b, assign \"a wins\" to <pre>winner</pre>, otherwise assign \"b wins\" to <pre>winner</pre> using the ternary conditional expression.",
      "question": "",
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": "",
      "answers": ["winner = a > b ? \"a wins\" : \"b wins\"", "winner = a > b ? 'a wins' : 'b wins'"],
      "explanation": "",
      "displayAsCode": ["answer"],
      "moreInfo": "",
      "size": 40
    },
    {
      "id": 3122,
      "type": "TrueOrNot",
      "given": "if (1) { console.log('I guess it is true')}",
      "question": "Does this print \"I guess it is true\" to the console?",
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [""],
      "explanation": "The shorthand, <pre>if (1)</pre>, uses non-strict evaluation, converting any non-zero number to <pre>true</pre>. ",
      "displayAsCode": ["given"],
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 331,
      "type": "FillBlank",
      "given": "<pre>let x = Math.random()</pre><br>If x is less than 0.33, log 'small'. <br>If x is greater than or equal to 0.33 but less than 0.66, log 'medium'. <br>If neither of these conditions are true, log 'large'. <br>Use curly braces <pre>{}</pre> within if conditions.",
      "question": "",
      "q1": "let x = Math.random()<br>if (x < 0.33) { console.log('small')}<br>",
      "q2": "<br>else {console.log('large')}",
      "choices": [],
      "answer": "",
      "answers": ["else if (x >=0.33 && x < 0.66) {console.log('medium')}","else if (x >=0.33 && x < 0.66) {console.log(\"medium\")}"],
      "explanation": "<pre>else if</pre> is your friend here.",
      "displayAsCode": [ "answer", "q1", "q2"],
      "moreInfo": "",
      "size": 60
    },
    {
      "id": 3123,
      "type": "TrueOrNot",
      "given": "let x = a > b ? 'a' : 'b'",
      "question": "The ternary operator uses non-strict evaluation (sometimes called 'truthy')",
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [""],
      "explanation": "",
      "displayAsCode": ["given"],
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 3124,
      "type": "MultipleChoice",
      "given": "",
      "question": "How many <pre>else if</pre> statements are allowed in an expression?",
      "q1": "",
      "q2": "",
      "choices": ["1", "3", "7", "unlimited"],
      "answer": 3,
      "answers": [""],
      "explanation": "",
      "displayAsCode": ["choices"],
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 3125,
      "type": "TrueOrFalse",
      "given": "",
      "question": "<pre>if</pre> conditions that use an <pre>else if</pre> <em>must</em> have a closing <pre>else</pre>",
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": false,
      "answers": [""],
      "explanation": "",
      "displayAsCode": [],
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 332,
      "type": "ValidOrNot",
      "given": "",
      "question": "let age = prompt('age?', 18)<br>&nbsp;&nbsp;let message = (age < 3) <br>&nbsp;&nbsp;? 'Hi, baby!' <br>&nbsp;&nbsp;:  (age < 18)  <br>&nbsp;&nbsp;&nbsp;&nbsp;? 'Hello!' <br>&nbsp;&nbsp;&nbsp;&nbsp;:   (age < 100) <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;? 'Greetings! What an unusual age!' <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: 'Stumped'",
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [""],
      "explanation": "I know it looks weird, but it's valid. What's happening? In the <em>else</em> portion (<pre>:</pre>), another ternary expression is used in place of a simple value. For more check out the link below.",
      "displayAsCode": ["question"],
      "moreInfo": "https://javascript.info/ifelse",
      "size": 0
    },
    {
      "id": 811,
      "type": "FillBlank",
      "given": "The <pre>if</pre> check should see if <pre>status</pre> is <pre>'silver'</pre> or <pre>'gold'</pre>",
      "question": "",
      "q1": "if (status === 'silver'",
      "q2": "status ==='gold')",
      "choices": [],
      "answer": "",
      "answers": ["||"],
      "explanation": "",
      "displayAsCode": ["q1","q2", "answer"],
      "moreInfo": "",
      "size": 1
    },
    {
      "id": 821,
      "type": "MultipleChoice",
      "given": "let x = (true || false)",
      "question": "What will <pre>x</pre> equal?",
      "q1": "",
      "q2": "",
      "choices": ["true", "false", "Can't be determined", "Creates an error"],
      "answer": 0,
      "answers": [""],
      "explanation": "<pre>||</pre> is a <em>short-circuit</em> logical operator. It looks to see if one of the values is <em>truthy</em>. If it finds a <em>truthy</em> value, it stops looking, since it already knows that the entire expression is true.",
      "displayAsCode": ["given"],
      "moreInfo": "https://javascript.info/logical-operators",
      "size": 0
    },
    {
      "id": 822,
      "type": "MultipleChoice",
      "given": "let x = (1 || 0)",
      "question": "What will <pre>x</pre> equal?",
      "q1": "",
      "q2": "",
      "choices": ["1", "0", "Can't be determined", "Creates an error"],
      "answer": 0,
      "answers": [""],
      "explanation": "<pre>||</pre> is a <em>short-circuit</em> logical operator. It looks to see if one of the values is <em>truthy</em>. <pre>1</pre> evaluates to <pre>true</pre> due to non-strict (truthy) evaluation. If it finds a <em>truthy</em> value, it stops looking, since it already knows that the entire expression is true.",
      "displayAsCode": ["given"],
      "moreInfo": "https://javascript.info/logical-operators",
      "size": 0
    },
    {
      "id": 812,
      "type": "ValidOrNot",
      "given": "",
      "question": "let x = a || b || c",
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [""],
      "explanation": "You can more than one <em>or</em> clause in an expression.",
      "displayAsCode": ["question"],
      "moreInfo": "https://javascript.info/logical-operators",
      "size": 0
    },
    {
      "id": 823,
      "type": "MultipleChoice",
      "given": "let x = '0' === true || !true || false" ,
      "question": "What value will <pre>x</pre> have?",
      "q1": "",
      "q2": "",
      "choices": ["0", "true", "false", "Can't be determined"],
      "answer": 2,
      "answers": [""],
      "explanation": "The key is in the first <em>or</em> condition. Using strict evaluation, <pre>'0'</pre> is <em>not</em> equal to true. Having failed the truthy test of the first part, it goes onto the second part where it encounters <pre>!true</pre>. The <pre>!</pre> negates the <pre>true</pre> value. Then the third or condition is <pre>false</pre>. Since no <pre>true</pre> conditions were found, the value of <pre>false</pre> is assigned to <pre>x</pre>",
      "displayAsCode": ["given"],
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 831,
      "type": "MultipleChoice",
      "given": "let x = 100<br>true || console.log(++x)<br>false || console.log(x)",
      "question": "What will be printed to the console?",
      "q1": "",
      "q2": "",
      "choices": ["100", "101", "nothing", "Error"],
      "answer": 0,
      "answers": [""],
      "explanation": "This might strike you as odd. What's happening? We start setting <pre>x = 100</pre>. In the next line, a truthy value is found <em>and so no further action is taken</em> &mdash; namely incrementing <pre>x</pre> and logging it. On the third line, a falsy value is encountered, causing the JavaScript interpreter to move onto the next part of the or clause. This prints the original value of <pre>x</pre> to the console.",
      "displayAsCode": ["given"],
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 832,
      "type": "MultipleChoice",
      "given": "let x = 100<br>false && console.log(++x)<br>!true && console.log(x)",
      "question": "What will be printed to the console?",
      "q1": "",
      "q2": "",
      "choices": ["100", "101", "nothing", "Error"],
      "answer": 2,
      "answers": [""],
      "explanation": "<pre>&&</pre> is a short-circuit operator. Since <em>both</em> statements must be true, it stops evaluating the minute it encounters a falsy value. In this case, having found falsy values for both if checks, evaluation ceases and nothing is printed to the console.",
      "displayAsCode": ["given"],
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 833,
      "type": "MultipleChoice",
      "given": "let a = 0<br>let b = 1<br>let c ='0'<br>let result = null<br>if ((a && b) || c) {<br>&nbsp;&nbsp;d = 'gold'<br>}&nbsp;&nbsp;else {<br>&nbsp;&nbsp;d = 'silver'<br>}",
      "question": "What will be printed to the console?",
      "q1": "",
      "q2": "",
      "choices": ["null", "gold", "silver", "cannot be determined"],
      "answer": 1,
      "answers": [""],
      "explanation": "Work through the more complex if checks to see why it arrives at gold.",
      "displayAsCode": ["given"],
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 813,
      "type": "FillBlank",
      "given": "The <pre>if</pre> check should use one <pre>if</pre> statement to see if  <pre>status</pre> is <pre>'gold' </pre> and <pre>active</pre> is true.",
      "question": "",
      "q1": "if (status === 'gold'",
      "q2": "active')",
      "choices": [],
      "answer": "",
      "answers": ["&&"],
      "explanation": "",
      "displayAsCode": ["q1","q2", "answer"],
      "moreInfo": "",
      "size": 2
    },
    {
      "id": 834,
      "type": "MultipleChoice",
      "given": "let a = null<br>let b = 1<br>let c = a ?? b",
      "question": "What is the value of <pre>c</pre>",
      "q1": "",
      "q2": "",
      "choices": ["null", "undefined", "1", "Error thrown"],
      "answer": 2,
      "answers": [""],
      "explanation": "The <pre>??</pre> is known as the <em>nullish coalescing operator</em>. If <pre>a</pre> is neither <pre>null</pre> nor <pre>undefined</pre>, then the value of <pre>a</pre> is returned. Otherwise, it returns the value of the second argument. In this case, <pre>c</pre> would evaluate to <pre>1</pre>",
      "displayAsCode": ["given"],
      "moreInfo": "https://javascript.info/nullish-coalescing-operator",
      "size": 0
    },
    {
      "id": 814,
      "type": "AllMixedUp",
      "given": "",
      "question": "Create a <em>while loop</em> that checks if <pre>classFull</pre> is true. If not, <pre>students</pre> should be incremented.",
      "q1": "",
      "q2": "",
      "choices": [],
      "mixed": ["(","students++","}","classFull", "{", "while", "!",")"],
      "ordered": ["while","(", "!","classFull",")","{", "students++", "}"],
      "answer": "",
      "answers": [""],
      "explanation": "",
      "displayAsCode": [],
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 815,
      "type": "FillBlank",
      "given": "A while loop should print the value of <pre>i</pre> to the console while i is less than 10.",
      "question": "",
      "q1": "let i = 1<br>while (",
      "q2": "){<br>&nbsp;&nbsp;console.log(i++)<br>}",
      "choices": [],
      "answer": "",
      "answers": ["i < 10"],
      "explanation": "",
      "displayAsCode": ["q1","q2","answer"],
      "moreInfo": "",
      "size": 6
    },
    {
      "id": 816,
      "type": "FillBlank",
      "given": "A while loop should print the value of <pre>i</pre> to the console while i is not equal to zero.",
      "question": "",
      "q1": "let i = 10<br>while (",
      "q2": "){<br>&nbsp;&nbsp;console.log(i--)<br>}",
      "choices": [],
      "answer": "",
      "answers": ["i != 0", "i > 0"],
      "explanation": "",
      "displayAsCode": ["q1","q2","answer"],
      "moreInfo": "",
      "size": 6
    },
    {
      "id": 817,
      "type": "FillBlank",
      "given": "A while loop should increment the value of students until the number of students equals the limit prescribed.",
      "question": "",
      "q1": "let students = 0<br>let limit = 10<br>while (",
      "q2": ") {<br>&nbsp;&nbsp;students++<br>}",
      "choices": [],
      "answer": "",
      "answers": ["students < limit"],
      "explanation": "",
      "displayAsCode": ["q1","q2","answer"],
      "moreInfo": "",
      "size": 15
    },
    {
      "id": 818,
      "type": "FillBlank",
      "given": "A while loop should both increment the value of students and decrement the value of limit until limit is zero.",
      "question": "",
      "q1": "let students = 0<br>let limit = 10<br>while (",
      "q2": ") {<br>&nbsp;&nbsp;students++<br>&nbsp;&nbsp;limit--<br>}",
      "choices": [],
      "answer": "",
      "answers": ["limit != 0"],
      "explanation": "",
      "displayAsCode": ["q1","q2","answer"],
      "moreInfo": "",
      "size": 10
    },
    {
      "id": 819,
      "type": "FillBlank",
      "given": "A while loop should both increment the value of students and once the number of students is ten, should stop the loop by setting registrationFull to true.",
      "question": "",
      "q1": "let registrationFull = false<br>let students = 0<br>while (",
      "q2": ") {<br>&nbsp;&nbsp;students++<br>&nbsp;&nbsp;if (students === 10) {<br>&nbsp;&nbsp;&nbsp;&nbsp;registrationFull = true<br>&nbsp;&nbsp;}<br>}",
      "choices": [],
      "answer": "",
      "answers": ["!registrationFull"],
      "explanation": "",
      "displayAsCode": ["q1","q2","answer"],
      "moreInfo": "",
      "size": 17
    },
    {
      "id": 8120,
      "type": "MultipleChoice",
      "given": "",
      "question": "Which kind of loop will always execute its body at least once before checking if a given condition is true?",
      "q1": "",
      "q2": "",
      "choices": ["while loop", "do-while loop", "for loop", "do-for loop"],
      "answer": 1,
      "answers": [""],
      "explanation": "BTW, there is no <em>do-for loop</em>",
      "displayAsCode": [],
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 824,
      "type": "ValidOrNot",
      "given": "A do-while loop should both increment the value of students and once the number of students is ten, should stop the loop by setting registrationFull to true.",
      "question": "let registrationFull = false<br>let students = 0<br>do while (!registrationFull){<br>&nbsp;&nbsp;students++<br>&nbsp;&nbsp;if (students === 10) {<br>&nbsp;&nbsp;&nbsp;&nbsp;registrationFull = true<br>&nbsp;&nbsp;}<br>}",
      "q1": "",
      "q2": ") ",
      "choices": [],
      "answer": false,
      "answers": [""],
      "explanation": "",
      "displayAsCode": ["given"],
      "moreInfo": "https://javascript.info/while-for",
      "size": 0
    },
    {
      "id": 825,
      "type": "MultipleChoice",
      "given": "let log = false<br>do {<br>&nbsp;&nbsp;console.log('hello')<br>} while (log === true)",
      "question": "How many times will 'Hello' be logged?",
      "q1": "",
      "q2": "",
      "choices": ["0", "1", "infinitely", "Error thrown"],
      "answer": 1,
      "answers": [""],
      "explanation": "A do-while loop executes <em>before</em> condition evaluation takes place.",
      "displayAsCode": ["given"],
      "moreInfo": "https://javascript.info/while-for",
      "size": 0
    },
    {
      "id": 826,
      "type": "FillBlank",
      "given": "Complete the code to form a do-while loop.",
      "question": "",
      "q1": "let log = false<br>do {<br>&nbsp;&nbsp;console.log('hello')<br>}&nbsp;",
      "q2": "(log === true)",
      "choices": [],
      "answer": "",
      "answers": ["while"],
      "explanation": "",
      "displayAsCode": ["q1", "q2", "answer"],
      "moreInfo": "",
      "size": 6
    },
    {
      "id": 8121,
      "type": "ValidOrNot",
      "given": "",
      "question": "for (let i=0; i<100; i+=2) {<br>&nbsp;&nbsp;console.log(i)<br>}",
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [""],
      "explanation": "The third part of a <em>for loop</em> should change <pre>i</pre>. There's no requirement that this change should be by 1.",
      "displayAsCode": ["question"],
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 8122,
      "type": "FillBlank",
      "given": "The body of the for loop should log 'The value of i is ?' &mdash; where <em>?</em> is replaced by the actual value of i. Note the use of a template string!" ,
      "question": "",
      "q1": "for (let i=0; i<100; i+=2) {<br>console.log(`The value of i is ",
      "q2": "`)<br>}",
      "choices": [],
      "answer": "",
      "answers": ["${i}"],
      "explanation": "",
      "displayAsCode": ["q2","q1","answer"],
      "moreInfo": "",
      "size": 4
    },
    {
      "id": 8123,
      "type": "ValidOrNot",
      "given": "",
      "question": "let i = 0<br>for (; i<100; i++) {<br>&nbsp;&nbsp;console.log(`The value of i is ${i}`)<br>}",
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [""],
      "explanation": "This is a far less common way of creating a for loop. You should prefer the more common method of declaring <pre>i</pre> inline.",
      "displayAsCode": ["question"],
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 8124,
      "type": "AllMixedUp",
      "given": "",
      "question": "Create a for loop from jumble",
      "q1": "",
      "q2": "",
      "mixed": [";",")","//loop body","i<100","}",";","let i=10","(", "{", "for", "i+=10",],
      "ordered": ["for","(","let i=10",";","i<100",";","i+=10", ")","{","//loop body", "}"],
      "choices": [],
      "answer": "",
      "answers": [""],
      "explanation": "",
      "displayAsCode": [],
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 8125,
      "type": "ValidOrNot",
      "given": "",
      "question": "let i = 0<br>for (; i<10;) {<br>&nbsp;&nbsp;console.log(i++)<br>}",
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [""],
      "explanation": "Although this is not common, it's valid JavaScript code",
      "displayAsCode": ["question"],
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 8126,
      "type": "ValidOrNot",
      "given": "",
      "question": "for(;;){<br>&nbsp;&nbsp;console.log('hey there')<br>}",
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [""],
      "explanation": "It's valid, but don't run this code: it will repeat infinitely",
      "displayAsCode": ["question"],
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 827,
      "type": "FillBlank",
      "given": "Exit the loop if the condition specified is true",
      "question": "",
      "q1": "let i = 9<br>let j = 232<br>for (;;) {<br>&nbsp;&nbsp;console.log(j % i)<br>&nbsp;&nbsp;if (j % i == 0) {<br>&nbsp;&nbsp;&nbsp;&nbsp;console.log(i, j) {",
      "q2": "}<br>&nbsp;&nbsp;}<br>&nbsp;&nbsp;i++<br>}",
      "choices": [],
      "answer": "",
      "answers": ["break","break;"],
      "explanation": "This illustrates breaking out of an otherwise-infinite loop using <pre>break</pre>",
      "displayAsCode": ["q1", "q2", "answer"],
      "moreInfo": "",
      "size": 6
    },
    {
      "id": 828,
      "type": "TrueOrFalse",
      "given": "for (let i=1; i<100; i++) {<br>&nbsp;&nbsp;let msg = i<br>&nbsp;&nbsp;if (i % 3 == 0) {<br>&nbsp;&nbsp;&nbsp;&nbsp;msg = 'fizz'<br>&nbsp;&nbsp;}<br>&nbsp;&nbsp;if (i % 5 == 0) {<br>&nbsp;&nbsp;&nbsp;&nbsp;msg = 'buzz'<br>&nbsp;&nbsp;}<br>&nbsp;&nbsp;if (i % 15 == 0) {<br>&nbsp;&nbsp;&nbsp;&nbsp;msg = 'fizzbuzz'<br>&nbsp;&nbsp;}<br>&nbsp;&nbsp;console.log(msg)<br>}",
      "question": "Will this ever print 'fizzbuzz'?",
      "choices": [],
      "answer": true,
      "answers": [],
      "explanation": "This is a well-known programming challenge -- and yes it will print 'fizzbuzz' on multiples of 15",
      "displayAsCode": ["q1", "q2", "answer"],
      "moreInfo": "",
      "size": 6
    },
    {
      "id": 835,
      "type": "FillBlank",
      "given": "The loop should only log values of <pre>i</pre> that are odd.",
      "question": "",
      "q1": "for (let i=0; i<20; i++) {<br>&nbsp;&nbsp;if (",
      "q2": ") {<br>&nbsp;&nbsp;&nbsp;&nbsp;continue;<br>&nbsp;&nbsp;}<br>&nbsp;&nbsp;console.log(i)<br>}",
      "choices": [],
      "answer": "",
      "answers": ["i % 2 === 0", "i%2==0"],
      "explanation": "This uses the <em>modulo</em> operator to log only values of <pre>i</pre> that are odd.",
      "displayAsCode": ["q1", "q2", "answer"],
      "moreInfo": "",
      "size": 11
    },
    {
      "id": 829,
      "type": "FillBlank",
      "given": "The loop should only log values of <pre>i</pre> that are even.",
      "question": "",
      "q1": "for (let i=0; i<20; i++) {<br>&nbsp;&nbsp;if (i % 2 ) {<br>&nbsp;&nbsp;&nbsp;&nbsp;",
      "q2": "<br>&nbsp;&nbsp;}<br>&nbsp;&nbsp;console.log(i)<br>}",
      "choices": [],
      "answer": "",
      "answers": ["continue"],
      "explanation": "This uses the <em>modulo</em> operator to log only values of <pre>i</pre> that are even.",
      "displayAsCode": ["q1", "q2", "answer"],
      "moreInfo": "",
      "size": 11
    },
    {
      "id": 8210,
      "type": "ValidOrNot",
      "given": "",
      "question": "(i > 5) ? alert(i) : continue;",
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": false,
      "answers": [""],
      "explanation": "<pre>continue</pre> can't be used with the ternary conditional operator",
      "displayAsCode": ["question"],
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 8211,
      "type": "ValidOrNot",
      "given": "",
      "question": "for (let i=0; i<20; i++) {<br>&nbsp;&nbsp;for (let j=10; j>0; j--) {<br>&nbsp;&nbsp;&nbsp;&nbsp;console.log(i*j)<br>&nbsp;&nbsp;}<br>}",
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [""],
      "explanation": "This is an example of a <em>nested</em> loop",
      "displayAsCode": ["question"],
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 8212,
      "type": "TrueOrFalse",
      "given": "for (let i=0; i<20; i++) {<br>&nbsp;&nbsp;for (let j=10; j>0; j--) {<br>&nbsp;&nbsp;&nbsp;&nbsp;console.log(i*j)<br>&nbsp;&nbsp;&nbsp;&nbsp;if (i*j == 42) {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;}<br>}",
      "question": "The console will stop logging after <pre>i*j == 42</pre>",
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": false,
      "answers": [""],
      "explanation": "The <pre>break</pre> will only exit from the inner loop. We need to exit from <em>both</em> loops. For this we need to use <em>labeled</em> loops.",
      "displayAsCode": ["given"],
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 837,
      "type": "FillBlank",
      "given": "This code should exit from <em>both</em> loops when <pre>i*j == 42</pre>",
      "question": "",
      "q1": "outer: for (let i=0; i<20; i++) {<br>&nbsp;&nbsp;for (let j=10; j>0; j--) {<br>&nbsp;&nbsp;&nbsp;&nbsp;console.log(i*j)<br>&nbsp;&nbsp;&nbsp;&nbsp;if (i*j == 42) {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break ",
      "q2": "<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;}<br>}",
      "choices": [],
      "answer": "",
      "answers": ["outer", "outer;"],
      "explanation": "",
      "displayAsCode": ["answer","q1","q2"],
      "moreInfo": "",
      "size": 6
    },
    {
      "id": 8127,
      "type": "MultipleChoice",
      "given": "let level = 'gold'<br>let discount = 0<br>switch(level) {<br>&nbsp;&nbsp;case 'bronze':<br>&nbsp;&nbsp;&nbsp;&nbsp;discount = .05<br>&nbsp;&nbsp;&nbsp;&nbsp;break<br>&nbsp;&nbsp;case 'silver':<br>&nbsp;&nbsp;&nbsp;&nbsp;discount = .10<br>&nbsp;&nbsp;&nbsp;&nbsp;break<br>&nbsp;&nbsp;case 'gold':<br>&nbsp;&nbsp;&nbsp;&nbsp;discount = .15<br>}",
      "question": "What will the value of <pre>discount</pre> be?",
      "q1": "",
      "q2": "",
      "choices": ["0", ".05", ".10", ".15"],
      "answer": 3,
      "answers": [],
      "explanation": "",
      "displayAsCode": ["given"],
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 8128,
      "type": "MultipleChoice",
      "given": "let level = 'gold'<br>let discount = 0<br>switch(level) {<br>&nbsp;&nbsp;case 'gold':<br>&nbsp;&nbsp;&nbsp;&nbsp;discount = .15<br>&nbsp;&nbsp;case 'silver':<br>&nbsp;&nbsp;&nbsp;&nbsp;discount = .10<br>case 'bronze':<br>&nbsp;&nbsp;&nbsp;&nbsp;discount = .05<br>}",
      "question": "What will the value of <pre>discount</pre> be?",
      "q1": "",
      "q2": "",
      "choices": ["0", ".05", ".10", ".15"],
      "answer": 1,
      "answers": [],
      "explanation": "Without the <pre>break</pre> statements, execution of the code <em>begins</em> at the correct <pre>case</pre> but then \"falls through\" the remaining code until it finds a <pre>break</pre> or reaches the end",
      "displayAsCode": ["given"],
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 8129,
      "type": "ValidOrNot",
      "given": "",
      "question": "let a = 6<br>let b = 5<br>let results = null<br>switch(a) {<br>&nbsp;&nbsp;case b+1:<br>&nbsp;&nbsp;&nbsp;&nbsp;results = 'Buenas dias'<br>&nbsp;&nbsp;&nbsp;&nbsp;break<br>&nbsp;&nbsp;case b+2:<br>&nbsp;&nbsp;&nbsp;&nbsp;results = 'Guten Tag'<br>&nbsp;&nbsp;&nbsp;&nbsp;break<br>&nbsp;&nbsp;case b+3:<br>&nbsp;&nbsp;&nbsp;&nbsp;results = 'Good day'<br>&nbsp;&nbsp;&nbsp;&nbsp;break<br>}",
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [],
      "explanation": "This example is meant to illustrate that you can use <pre>case</pre> with any JavaScript expression. In fact, it will always evaluate to 'Buenas dias'",
      "displayAsCode": ["question"],
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 838,
      "type": "MultipleChoice",
      "given": "let a = 4.71<br>let results = null<br>switch(true) {<br>&nbsp;&nbsp;case a > 0 && a < 3:<br>&nbsp;&nbsp;&nbsp;&nbsp;results = 'small'<br>&nbsp;&nbsp;break<br>&nbsp;&nbsp;case a >2 && a < 5:<br>&nbsp;&nbsp;&nbsp;&nbsp;results = 'medium'<br>&nbsp;&nbsp;&nbsp;&nbsp;break<br>&nbsp;&nbsp;case a > 4:<br>&nbsp;&nbsp;&nbsp;&nbsp;results = 'large'<br>&nbsp;&nbsp;&nbsp;&nbsp;break<br>}",
      "question": "What will the value of <pre>results</pre> be?",
      "q1": "",
      "q2": "",
      "choices": ["small", "medium", "large", "error"],
      "answer": 1,
      "answers": [],
      "explanation": "Looks weird, but this is a way to do ranges with a <pre>switch</pre> statement",
      "displayAsCode": ["given"],
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 8130,
      "type": "MultipleChoice",
      "given": "let status = 'tin'<br>discount = null<br>switch(status) {<br>&nbsp;&nbsp;case 'bronze':<br>&nbsp;&nbsp;&nbsp;&nbsp;discount = 0.05<br>&nbsp;&nbsp;&nbsp;&nbsp;break<br>&nbsp;&nbsp;case 'silver':<br>&nbsp;&nbsp;&nbsp;&nbsp;discount = 0.10<br>&nbsp;&nbsp;&nbsp;&nbsp;break<br>&nbsp;&nbsp;case 'gold':<br>&nbsp;&nbsp;&nbsp;&nbsp;discount = 0.10<br>&nbsp;&nbsp;&nbsp;&nbsp;break<br>&nbsp;&nbsp;???:<br>&nbsp;&nbsp&nbsp;&nbspdiscount = 0<br>}",
      "question": "In order to catch any unaccounted-for cases, what should we replace <pre>???</pre> with?",
      "q1": "",
      "q2": "",
      "choices": ["finally", "else", "then", "default"],
      "answer": 3,
      "answers": [],
      "explanation": "",
      "displayAsCode": ["given"],
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 8131,
      "type": "ValidOrNot",
      "given": "",
      "question": "let status = 'tin'<br>discount = null<br>switch(status) {<br>&nbsp;&nbsp;case 'tin':<br>&nbsp;&nbsp;case 'bronze':<br>&nbsp;&nbsp;&nbsp;&nbsp;discount = 0.5<br>&nbsp;&nbsp;&nbsp;&nbsp;break<br>&nbsp;&nbsp;case 'silver':<br>&nbsp;&nbsp;&nbsp;&nbsp;discount = 0.10<br>&nbsp;&nbsp;&nbsp;&nbsp;break<br>&nbsp;&nbsp;case 'gold':<br>&nbsp;&nbsp;&nbsp;&nbsp;discount = 0.15<br>&nbsp;&nbsp;&nbsp;&nbsp;break<br>&nbsp;&nbsp;default:<br>&nbsp;&nbsp;&nbsp;&nbsp;discount = 0<br>}",
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [],
      "explanation": "This is an example of <em>grouping</em>. It works because <pre>case 'tin'</pre> 'falls through to the next case.'",
      "displayAsCode": ["question"],
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 8132,
      "type": "MultipleChoice",
      "given": "let status = 'tin'<br>discount = null<br>switch(status) {<br>&nbsp;&nbsp;case 'tin':<br>&nbsp;&nbsp;case 'bronze':<br>&nbsp;&nbsp;&nbsp;&nbsp;discount = 0.05<br>&nbsp;&nbsp;&nbsp;&nbsp;break<br>&nbsp;&nbsp;case 'silver':<br>&nbsp;&nbsp;&nbsp;&nbsp;discount = 0.10<br>&nbsp;&nbsp;&nbsp;&nbsp;break<br>&nbsp;&nbsp;case 'gold':<br>&nbsp;&nbsp;&nbsp;&nbsp;discount = 0.15<br>&nbsp;&nbsp;&nbsp;&nbsp;break<br>&nbsp;&nbsp;default:<br>&nbsp;&nbsp;&nbsp;&nbsp;discount = 0<br>}",
      "question": "What will the value of <pre>discount</pre> be?",
      "q1": "",
      "q2": "",
      "choices": [0, 0.05, 0.10, 0.15],
      "answer": 1,
      "answers": [],
      "explanation": "This is an example of <em>grouping</em>. It works because <pre>case 'tin'</pre> 'falls through to the next case.'",
      "displayAsCode": ["given"],
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 8133,
      "type": "TrueOrFalse",
      "given": "",
      "question": "The equality checking in a <pre>switch</pre> statement is always strict.",
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [],
      "explanation": "",
      "displayAsCode": [],
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 8134,
      "type": "MultipleChoice",
      "given": "let discount = '.1'<br>let price = 100<br>switch(discount) {<br>&nbsp;&nbsp;case .1:<br>&nbsp;&nbsp;&nbsp;&nbsp;price = price * .9<br>&nbsp;&nbsp;&nbsp;&nbsp;break<br>&nbsp;&nbsp;case .05:<br>&nbsp;&nbsp;&nbsp;&nbsp;price = price * .95<br>&nbsp;&nbsp;&nbsp;&nbsp;break<br>}",
      "question": "What will the value of <pre>price</pre> be?",
      "q1": "",
      "q2": "",
      "choices": [90, 95, 100, 'error'],
      "answer": 2,
      "answers": [],
      "explanation": "Equality checking in <pre>switch</pre> statements is strict. In this example, <pre>discount</pre> is a string while the cases are all numbers.",
      "displayAsCode": ["given"],
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 611,
      "type": "MultipleChoice",
      "given": "",
      "question": "The best definition of a <em>function</em> is...",
      "q1": "",
      "q2": "",
      "choices": ["any block of code appended with <pre>function:</pre>", "a set of statements that performs a task or calculates a value", "a set of statements that returns a value","any valid JavaScript expression or statement"],
      "answer": 1,
      "answers": [],
      "explanation": "",
      "displayAsCode": [],
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 612,
      "type": "TrueOrFalse",
      "given": "function currentDateTime() {<br>&nbsp;&nbsp;return new Date()<br>}",
      "question": "This is a valid function",
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [],
      "explanation": "",
      "displayAsCode": ["given"],
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 613,
      "type": "MultipleChoice",
      "given": "function randRange(min, max) {<br>&nbsp;&nbsp;return Math.floor(Math.random() * (max - min) + min)<br>}",
      "question": "This example accepts two <em>parameters</em>: <pre>min</pre> and <pre>max</pre>. What is the maximum number of parameters that a function can accept?",
      "q1": "",
      "q2": "",
      "choices": [2,3,10, "no fixed limit"],
      "answer": 3,
      "answers": [],
      "explanation": "",
      "displayAsCode": ["given"],
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 614,
      "type": "FillBlank",
      "given": "Make <pre>result</pre> local to the function.",
      "question": "",
      "q1": "function multiply(x,y) {<br>&nbsp;&nbsp;",
      "q2": "result = x*y<br>&nbsp;&nbsp;return result<br>}",
      "choices": [],
      "answer": "",
      "answers": ["let", "const"],
      "explanation": "Either <pre>let</pre> or <pre>const</pre> will work here. What you don't want is <pre>var</pre>.",
      "displayAsCode": ["q2","q1","answer"],
      "moreInfo": "",
      "size": 6
    },
    {
      "id": 615,
      "type": "ValidOrNot",
      "given": "",
      "question": "let result = null;<br>function multiply(x,y) {<br>&nbsp;&nbsp;result = x*Y<br>}",
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [],
      "explanation": "Functions can access global variables. That said, in general, functions should not know about variables outside themselves. It's preferable if they simply return a value.",
      "displayAsCode": ["question"],
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 616,
      "type": "MultipleChoice",
      "given": "let result = true;<br>function myFnc() {<br>&nbsp;&nbsp;let result = false<br>&nbsp;&nbsp;console.log(result)<br>}",
      "question": "What value will be printed to the console if this function is invoked?",
      "q1": "",
      "q2": "",
      "choices": ["true", "false", "Duplicate assignment error"],
      "answer": 1,
      "answers": [],
      "explanation": "Outer variables are used only if function-local variables are not available.",
      "displayAsCode": ["given"],
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 617,
      "type": "MultipleChoice",
      "given": "function add(x,y) {<br>&nbsp;&nbsp;return x + y<br>}<br>console.log(add(2,4,6))}",
      "question": "What will be printed to the console?",
      "q1": "",
      "q2": "",
      "choices": ["6","10","12","Invalid parameters error"],
      "answer": "0",
      "answers": [],
      "explanation": "Arguments passed into a function beyond those specified as parameters are ignored. (There is an exception to this in the uncommon case where the function refers to the arguments passed in as a collection, <pre>arguments</pre>).",
      "displayAsCode": ["given"],
      "moreInfo": "",
      "size": 0
    },
    {
      "id": ,
      "type": "",
      "given": "",
      "question": "",
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": "",
      "answers": [],
      "explanation": "",
      "displayAsCode": [],
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 618,
      "type": "FillBlank",
      "given": "",
      "question": "Provide a second parameter, <pre>discount</pre> with a default value of <pre>.02</pre>",
      "q1": "function calculatePrice(price,",
      "q2": ") {<br>&nbsp;&nbsp;return price * (1-discount)<br>}",
      "choices": [],
      "answer": "",
      "answers": ["discount = .02", "discount=0.02"],
      "explanation": "",
      "displayAsCode": ["answer","q1","q2"],
      "moreInfo": "",
      "size": 15
    },
    {
      "id": 619,
      "type": "TrueOrFalse",
      "given": "",
      "question": "A parameter is the variable listed inside the parentheses in the function declaration (it’s a declaration time term). An argument is the value that is passed to the function when it is called (it’s a call time term).",
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [],
      "explanation": "",
      "displayAsCode": [],
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 6120,
      "type": "ValidOrNot",
      "given": "",
      "question": "function defaultTaxRate() {<br>&nbsp;&nbsp;return 0.10<br>}<br><br>function taxedPrice(price, taxRate = defaultTaxRate()) {<br>&nbsp;&nbsp;return price * (1 + taxRate)<br>}",
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [],
      "explanation": "A parameter's default value can be a function as well as a simple value.",
      "displayAsCode": ["question"],
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 6121,
      "type": "ValidOrNot",
      "given": "",
      "question": "function greeting(name) {<br>&nbsp;&nbsp;name = name || 'friend'<br>&nbsp;&nbsp;return `Hello, ${name}`<br>}",
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [],
      "explanation": "This is another way of dealing with parameters for which no arguments are given.",
      "displayAsCode": ["question"],
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 6122,
      "type": "MultipleChoice",
      "given": "function policy() {<br>&nbsp;&nbsp;let type = 'sales item'<br>&nbsp;&nbsp;return<br>&nbsp;&nbsp;`This is a ${type} and is final.`<br>}",
      "question": "What will this function return?",
      "q1": "",
      "q2": "",
      "choices": ["This is a ${type} and is final.", "This is a sales item and is final.", "nothing", "Undefined type error"],
      "answer": 2,
      "answers": [],
      "explanation": "This is the biggest case where not using semicolons can bite you: when JavaScript sees a naked <pre>return</pre>, it immediately returns with no value. You can wrap what you want in parens to solve this problem.<br><pre>return(<br>`This is a ${type} and is final.`)",
      "displayAsCode": ["given"],
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 6123,
      "type": "ValidOrNot",
      "given": "",
      "question": "let policy = function() {<br>&nbsp;&nbsp;let type = 'sales item'<br>&nbsp;&nbsp;return (<br>&nbsp;&nbsp;&nbsp;&nbsp;`This is a ${type} and is final.`<br>&nbsp;&nbsp;)<br>}",
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [],
      "explanation": "",
      "displayAsCode": ["question"],
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 6124,
      "type": "ValidOrNot",
      "given": "",
      "question": "let students = []<br>let addStudent = function(student) {<br>&nbsp;&nbsp;students.push(student)<br>}<br><br>addStudent('Anna')",
      "displayAsCode": ["question"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [],
      "explanation": "",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 6125,
      "type": "MultipleChoice",
      "given": "let students = []<br>let addStudent = function(student) {<br>&nbsp;&nbsp;students.push(student)<br>}<br><br>let studentAdded = addStudent('Anna')<br>console.log(studentAdded)",
      "question": "What will be logged to the console?",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": ["Anna", "the students array", "No return error", "undefined"],
      "answer": 3,
      "answers": [],
      "explanation": "Functions with no <pre>return</pre> clause automatically return <pre>undefined</pre>",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 621,
      "type": "ValidOrNot",
      "given": "",
      "question": "let sayHello = (function sayHello(name) {<br>&nbsp;&nbsp;console.log(`Hello ${name}`)<br>})('Anna')",
      "displayAsCode": ["question"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [],
      "explanation": "This pattern is known as an <em>immediately-invoked function expression</em> or <em>IIFE</em>. With modern JavaScript (and avoiding the user of <pre>var</pre>, we no longer need to use IIFEs.",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 622,
      "type": "MultipleChoice",
      "given": "let sayHello = (function sayHello(name) {<br>&nbsp;&nbsp;console.log(`Hello ${name}`)<br>})('Anna')",
      "question": "What will be logged to the console?",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": ["Hello Anna", "Hello", "nothing", "error"],
      "answer": 0,
      "answers": [],
      "explanation": "This pattern is known as an <em>immediately-invoked function expression</em> or <em>IIFE</em>. With modern JavaScript (and avoiding the use of <pre>var</pre>, we don't need to use IIFEs any longer.",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 6126,
      "type": "TrueOrFalse",
      "given": "",
      "question": "A function can, itelf, call a function.",
      "displayAsCode": [],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [],
      "explanation": "",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 6127,
      "type": "MultipleChoice",
      "given": "let price = 100<br>let adjustPrice = function (price = 200)<br>{<br>&nbsp;&nbsp;return price * 1.3<br>}<br><br>console.log(adjustPrice())",
      "question": "What will be logged to the console?",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": [130, 260, 0, "nothing"],
      "answer": 1,
      "answers": [],
      "explanation": "",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 6128,
      "type": "FillBlank",
      "given": "function sayHi() {<br>&nbsp;&nbsp;alert('Hello')<br>}",
      "question": "",
      "displayAsCode": ["given"],
      "q1": "This syntax is known as a function ",
      "q2": "",
      "choices": [],
      "answer": "",
      "answers": ['declaration', 'Declaration'],
      "explanation": "",
      "moreInfo": "",
      "size": 10
    },
    {
      "id": 6129,
      "type": "FillBlank",
      "given": "let sayHi = function() {<br>&nbsp;&nbsp;alert('Hello')<br>}",
      "question": "",
      "displayAsCode": ["given"],
      "q1": "This syntax is known as a function ",
      "q2": "",
      "choices": [],
      "answer": "",
      "answers": ["expression", "Expression"],
      "explanation": "",
      "moreInfo": "",
      "size": 10
    },
    {
      "id": 623,
      "type": "MultipleChoice",
      "given": "let defaultDiscount = function() {<br>&nbsp;&nbsp;return .06<br>}<br><br>function adjustPrice(price, discount = defaultDiscount()) {<br>&nbsp;&nbsp;return price - price * discount<br>}<br>console.log(adjustPrice(100))",
      "question": "What is logged to the console?",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": [100, .06, 94, 'nothing'],
      "answer": 2,
      "answers": [],
      "explanation": "A function can be used as a default value of an argument passed to a function.",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 624,
      "type": "ValidOrNot",
      "given": "",
      "question": "function adjustPrice(price, discount = (function(){return .06})()) {<br>&nbsp;&nbsp;return price - price * discount<br>}<br><br>console.log(adjustPrice(100))",
      "displayAsCode": ["question"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [],
      "explanation": "Here an <em>immediately invoked function expression (IIFE)</em> provided as a default to an argument passed to the function. With modern JavaScript, avoiding the use of <pre>var</pre>, we no longer need to use IIFEs.",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 6130,
      "type": "FillBlank",
      "given": "let fnc = (arg) => {<br>&nbsp;&nbsp;console.log(arg)<br>}",
      "question": "",
      "displayAsCode": ["given"],
      "q1": "This type of function is known as an ",
      "q2": " function.",
      "choices": [],
      "answer": "",
      "answers": ["arrow", "Arrow"],
      "explanation": "",
      "moreInfo": "",
      "size": 6
    },
    {
      "id": 6131,
      "type": "",
      "given": "",
      "question": "",
      "displayAsCode": [],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": "",
      "answers": [],
      "explanation": "",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 6132,
      "type": "ValidOrNot",
      "given": "",
      "question": "let fnc = arg => `You sent me ${arg}`",
      "displayAsCode": ["question"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [],
      "explanation": "This is one version of an <em>arrow function</em>",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 631,
      "type": "MultipleChoice",
      "given": "function pow(x, n) {<br>&nbsp;&nbsp;if (n == 1) {<br>&nbsp;&nbsp;&nbsp;&nbsp;return x;<br>&nbsp;&nbsp;}<br>else {<br>&nbsp;&nbsp;&nbsp;&nbsp;return x * pow(x, n - 1)<br>&nbsp;&nbsp;}<br>}",
      "question": "This is an example of what kind of function?",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": ["genetic", "recursive", "arrow", "IIFE"],
      "answer": 1,
      "answers": [],
      "explanation": "",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 625,
      "type": "TrueOrFalse",
      "given": "function sumAll(...args) {<br>&nbsp;&nbsp;let sum = 0<br>&nbsp;&nbsp;for (let arg of args) { sum += arg}<br>&nbsp;&nbsp;return sum<br>}<br><br>console.log(sumAll(1,2,3,4,5,6))",
      "question": "<pre>...args</pre> is an example of the use of the <em>spread</em> syntax.",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [],
      "explanation": "",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 626,
      "type": "TrueOrFalse",
      "given": "function fnc( firstPlace, secondPlace, thirdPlace, ...rest) {<br>&nbsp;&nbsp;console.log(rest)<br>}<br><br>fnc('Ana', 'Kay', 'Darien', 'Mickey', 'Sandra', 'Octavia'",
      "question": "<pre>...rest</pre> is an array that consists of <pre>['Mickey', 'Sandra', 'Octavia']</pre>",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [],
      "explanation": "",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 627,
      "type": "FillBlank",
      "given": "",
      "question": "",
      "displayAsCode": ["question","q1","q2"],
      "q1": "function fnc( firstPlace, secondPlace, thirdPlace ) {<br>&nbsp;&nbsp;for (argument of ",
      "q2": ") {<br>&nbsp;&nbsp;&nbsp;&nbsp;console.log(argument)<br>&nbsp;&nbsp;}<br>}",
      "choices": [],
      "answer": "",
      "answers": ["arguments"],
      "explanation": "<pre>arguments</pre> is an array-like variable that's available within a function and contains all arguments passed to the function.",
      "moreInfo": "",
      "size": 10
    },
    {
      "id": 628,
      "type": "MultipleChoice",
      "given": "function topScore(arr) {<br>&nbsp;&nbsp;console.log(Math.max(...arr))<br>}<br><br>topScore([84,89,96,78,100,99,94,91])",
      "question": "What does <pre>...arr</pre> do?",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": ["spreads an array into individual values", "loops over an array", "converts an array into an object", "does nothing"],
      "answer": 0,
      "answers": [],
      "explanation": "",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 6133,
      "type": "TrueOrFalse",
      "given": "let result = false<br><br>function fnc() {<br>&nbsp;&nbsp;let result = true<br>}",
      "question": "This code will produce a duplicate declaration error",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": false,
      "answers": [],
      "explanation": "Variables declared inside a function are confined to that function. Within the function <pre>result </pre> has a value of <pre>true</pre>. Outside the function, <pre>result</pre> has a value of <pre>false</pre>.",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 6134,
      "type": "FillBlank",
      "given": "function outer() {<br>&nbsp;&nbsp;let result = true<br>&nbsp;&nbsp;function inner() {<br>&nbsp;&nbsp;&nbsp;&nbsp;let result = false<br>&nbsp;&nbsp;&nbsp;&nbsp;return result<br>&nbsp;&nbsp;}<br>&nbsp;&nbsp;return inner()<br>}",
      "question": "",
      "displayAsCode": ["given", "answer", "q1", "q2"],
      "q1": "<pre>console.log(outer()) </pre> will display ",
      "q2": "",
      "choices": [],
      "answer": "",
      "answers": ["false"],
      "explanation": "A nested function also has a private scope",
      "moreInfo": "",
      "size": 6
    },
    {
      "id": 632,
      "type": "FillBlank",
      "given": "function outer() {<br>&nbsp;&nbsp;let name = 'Hal'<br>&nbsp;&nbsp;return function() {<br>&nbsp;&nbsp;&nbsp;&nbsp;return `Hello, ${name}`<br>&nbsp;&nbsp;}<br>}<br><br>let fnc = outer();<br>console.log(fnc())",
      "question": "",
      "displayAsCode": ["given"],
      "q1": "The mechanism by which the returned function from <pre>outer</pre> still has access to <pre>outer</pre>'s variables is called a ",
      "q2": "",
      "choices": [],
      "answer": "",
      "answers": ["closure"],
      "explanation": "",
      "moreInfo": "",
      "size": 7
    },
    {
      "id": 1149,
      "type": "TrueOrFalse",
      "given": "",
      "question": "<pre>var</pre> is rarely used in modern JavaScript",
      "displayAsCode": [],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [],
      "explanation": "",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 1150,
      "type": "TrueOrFalse",
      "given": "",
      "question": "When used within a function a variable declared with <pre>var</pre> is scoped to that function and unavailable outside the function.",
      "displayAsCode": [],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": false,
      "answers": [],
      "explanation": "This is one of the main reasons why you should almost always prefer <pre>let</pre> or <pre>const</pre> over <pre>var</pre>",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 1151,
      "type": "TrueOrFalse",
      "given": "var myName = 'Hal'<br>var myName = 'Amadeus'",
      "question": "This code will throw a Duplicate Declaration error",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": false,
      "answers": [],
      "explanation": "Yet another reason to eschew the use of <pre>var</pre>",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 1152,
      "type": "MultipleChoice",
      "given": "function greeting() {<br>&nbsp;&nbsp;console.log(`Hi, ${name}`)<br>}<br>var name = 'Hal'<br>greeting()",
      "question": "What will be logged to the console?",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": ["Hi, Hal", "Hi, undefined", "Hi,", "Undeclared variable error"],
      "answer": 0,
      "answers": [],
      "explanation": "More weirdness (and more reasons) to avoid the use of <pre>var</pre>",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 1153,
      "type": "MultipleChoice",
      "given": "",
      "question": "A variable's <em>scope</em> refers to...",
      "displayAsCode": [],
      "q1": "",
      "q2": "",
      "choices": ["what data type a variable can hold", "how long a variable is kept alive before being garbage-collected", "where a variable is accessible from", "whether the variable has been declared <pre>private</pre>"],
      "answer": 2,
      "answers": [],
      "explanation": "",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 1154,
      "type": "TrueOrFalse",
      "given": "globalThis.console.log(`Hi, ${name}`)<br>console.log(`Hi, ${name}`)",
      "question": "In both cases, <pre>console</pre> is globally-scoped.",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [],
      "explanation": "",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 8135,
      "type": "FillBlank",
      "given": "To display the name of a function...",
      "question": "",
      "displayAsCode": ["answer", "q1", "q2"],
      "q1": "function greeting() {}<br>console.log(greeting.",
      "q2": ")",
      "choices": [],
      "answer": "",
      "answers": ["name"],
      "explanation": "",
      "moreInfo": "",
      "size": 4
    },
    {
      "id": 8136,
      "type": "MultipleChoice",
      "given": "let sayHi = function(who) {<br>&nbsp;&nbsp;alert(`Hello, ${who}`)<br>}",
      "question": "This is an example of...",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": ["Arrow function", "Headless function", "Non-Returning function", "Named Function Expression"],
      "answer": 3,
      "answers": [],
      "explanation": "",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 8213,
      "type": "MultipleChoice",
      "given": "let sayHi = function(who) {<br>&nbsp;&nbsp;if (who) {<br>&nbsp;&nbsp;&nbsp;&nbsp;console.log(`Hi, ${who}`)<br>&nbsp;&nbsp;} else {<br>&nbsp;&nbsp;&nbsp;&nbsp;sayHi('Guest')<br>&nbsp;&nbsp;}<br>}<br><br>let greet = sayHi<br>sayHi = null<br>greet()",
      "question": "What will be logged to the console?",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": ["Hi, Guest", "Hi,", "nothing", "TypeError"],
      "answer": 3,
      "answers": [],
      "explanation": "Inside the function, we call <pre>sayHi</pre> &mdash; but <pre>sayHi</pre> has been set to <pre>null</pre>, so <pre>sayHi</pre> is no longer a function. To get around this possible problem, you might want to give the function a name &mdash; and then use that name within the function rather than <pre>sayHi</pre>",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 629,
      "type": "FillBlank",
      "given": "Provide missing code so that the <pre>else</pre> clause recursively calls its own function.",
      "question": "",
      "displayAsCode": ["answer", "q1", "q2"],
      "q1": "let sayHi = function func(who) {<br>&nbsp;&nbsp;if (who) {<br>&nbsp;&nbsp;&nbsp;&nbsp;console.log(`Hi, ${who}`)<br>&nbsp;&nbsp;} else {<br>&nbsp;&nbsp;&nbsp;&nbsp;",
      "q2": "('Guest')<br>&nbsp;&nbsp;}<br>}",
      "choices": [],
      "answer": "",
      "answers": ["func"],
      "explanation": "",
      "moreInfo": "",
      "size": 5
    },
    {
      "id": 6210,
      "type": "FillBlank",
      "given": "Provide missing code so that the <pre>else</pre> clause recursively calls its own function.",
      "question": "",
      "displayAsCode": ["answer", "q1", "q2"],
      "q1": "function greet(who) {<br>&nbsp;&nbsp;if (who) {<br>&nbsp;&nbsp;&nbsp;&nbsp;console.log(`Hi, ${who}`)<br>&nbsp;&nbsp;} else {<br>&nbsp;&nbsp;&nbsp;&nbsp;",
      "q2": "('Guest')<br>&nbsp;&nbsp;}<br>}",
      "choices": [],
      "answer": "",
      "answers": ["greet"],
      "explanation": "",
      "moreInfo": "",
      "size": 5
    },
    {
      "id": 6211,
      "type": "ValidOrNot",
      "given": "",
      "question": "let greet = new Function('who', 'return `Hello,` + who ')",
      "displayAsCode": ["question"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [],
      "explanation": "Although not commonly used, this pattern can be used to create a function. The first arguments sent to <pre>new Function</pre> are parameters for the function; the final argument is the function body.",
      "moreInfo": "https://javascript.info/new-function",
      "size": 0
    },
    {
      "id": 6212,
      "type": "MultipleChoice",
      "given": "function getFunc() {<br>&nbsp;&nbsp;let value = 'test';<br>&nbsp;&nbsp;return new Function('alert(value)')<br>}<br><br>getFunc()()",
      "question": "What will happen when this code is run?",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": ["an alert popup will appear with the word <em>test</em> in it", "an alert popup will appear <em>without</em> the word <em>test</em> in it", "an alert popup will appear, asking the user for the value of <pre>value</pre>", "an error will be thrown indicating that <pre>value</pre> is not defined."],
      "answer": 3,
      "answers": [],
      "explanation": "When a function is created with the <pre>new Function</pre> pattern, it does not have access to the ouoter variables &mdash; in other words, it is not a <em>closure</em>",
      "moreInfo": "https://javascript.info/new-function",
      "size": 0
    },
    {
      "id": 8137,
      "type": "MultipleChoice",
      "given": "function greet() {console.log('Hi there')}<br>setTimeout(greet, 1000)",
      "question": "What will happen when this code is run?",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": ["After a delay of 1 second, <em>Hi there</em> will be logged to the console", "Nothing &mdash; as <pre>greet</pre> is declared but never invoked", "After a delay of 1 second, <em>Hi there</em> will be logged to the console continuously", "An error will be thrown"],
      "answer": 0,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/settimeout-setinterval",
      "size": 0
    },
    {
      "id": 8138,
      "type": "FillBlank",
      "given": "Supply the code to cancel <pre>myTimer</pre>",
      "question": "",
      "displayAsCode": ["q1", "q2","answer"],
      "q1": "let myTimer = setTimeout(() => console.log('Hi there'), 5000)<br>setTimeout(() => ",
      "q2": "(myTimer), 2000)",
      "choices": [],
      "answer": "",
      "answers": ["clearTimeout"],
      "explanation": "",
      "moreInfo": "https://javascript.info/settimeout-setinterval",
      "size": 12
    },
    {
      "id": 8139,
      "type": "ValidOrNot",
      "given": "",
      "question": "let myTimer = setTimeout(() => console.log('Hi there'), 5000)<br>setTimeout(() => clearTimeout(myTimer), 2000)",
      "displayAsCode": ["question"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/settimeout-setinterval",
      "size": 0
    },
    {
      "id": 8140,
      "type": "AllMixedUp",
      "given": "",
      "question": "Rearrange the code to create a <pre>setTimeout</pre> function",
      "displayAsCode": [],
      "mixed": [")","setTimeout","let","(",",","5000","myFunc","=","myTimer"],
      "ordered": ["let", "myTimer", "=", "setTimeout", "(", "myFunc", ",", "5000", ")"],
      "choices": [],
      "answer": "",
      "answers": [],
      "explanation": "",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 8141,
      "type": "FillBlank",
      "given": "Fill in the blank to create a recurring call to the anonymous arrow function.",
      "question": "",
      "displayAsCode": ["answer", "q1", "q2"],
      "q1": "let counter = 0<br>let myInterval = ",
      "q2": "(() => {<br>&nbsp;&nbsp;console.log(++counter)<br>}, 1500)",
      "choices": [],
      "answer": "",
      "answers": ["setInterval"],
      "explanation": "",
      "moreInfo": "",
      "size": 11
    },
    {
      "id": 8142,
      "type": "FillBlank",
      "given": "Fill the blank to stop the recurring action of this code",
      "question": "",
      "displayAsCode": ["q1", "q2", "answer"],
      "q1": "let counter = 0<br>let myInterval = setInterval(() => {<br>&nbsp;&nbsp;console.log(++counter)<br>&nbsp;&nbsp;if (counter == 7) {<br>&nbsp;&nbsp;&nbsp;&nbsp;",
      "q2": "<br>&nbsp;&nbsp;}<br>}, 2000)",
      "choices": [],
      "answer": "",
      "answers": ["clearInterval(myInterval)"],
      "explanation": "",
      "moreInfo": "",
      "size": 26
    },
    {
      "id": 839,
      "type": "TrueOrFalse",
      "given": "let delay = 2000<br>function callAPI() {<br>&nbsp;&nbsp;let rnd = Math.random()<br>&nbsp;&nbsp;switch(true) {<br>&nbsp;&nbsp;&nbsp;&nbsp;case rnd < 0.33:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;delay += 200<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log('Too fast, increasing delay to ' + delay)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break<br>&nbsp;&nbsp;&nbsp;&nbsp;case rnd >= 0.33 && rnd <.66:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log('Just right, leaving delay as is at ' + delay)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break<br>&nbsp;&nbsp;&nbsp;&nbsp;default:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;delay -= 200<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log('Too slow, decreasing delay to ' + delay)<br>}<br>setInterval(callAPI, delay)",
      "question": "This code will adjust the length of time between <pre>callAPI</pre>",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": false,
      "answers": [],
      "explanation": "The value of <pre>delay</pre> is set when <pre>setInterval</pre> is called and is not re-evaluated on each subsequent call.",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 840,
      "type": "TrueOrFalse",
      "given": "let delay = 2000<br>function callAPI() {<br>&nbsp;&nbsp;let timeNow = new Date()<br>&nbsp;&nbsp;console.log('Currently: ' + timeNow)<br>&nbsp;&nbsp;let rnd = Math.random()<br>&nbsp;&nbsp;switch(true) {<br>&nbsp;&nbsp;&nbsp;&nbsp;case rnd < 0.33:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;delay += 1000<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log('Too fast, increasing delay to ' + delay)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break<br>&nbsp;&nbsp;&nbsp;&nbsp;case rnd >= 0.33 && rnd <.66:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log('Just right, leaving delay as is at ' + delay)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break<br>&nbsp;&nbsp;&nbsp;&nbsp;default:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;delay -= 500<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log('Too slow, decreasing delay to ' + delay)<br>&nbsp;&nbsp;}<br>&nbsp;&nbsp;myTimeout = setTimeout(callAPI, delay)<br>}<br><br>let myTimeout = setTimeout(callAPI, delay)",
      "question": "This code will adjust the length of time between <pre>callAPI</pre>",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [],
      "explanation": "Since we're using <pre>setTimeout</pre> instead of <pre>setInterval</pre>, the value of <pre>delay</pre> <em>will</em> be evaluated on each iteration.",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 633,
      "type": "MultipleChoice",
      "given": "function cacheMachine(func) {<br>&nbsp;&nbsp;let cache = new Map()<br>&nbsp;&nbsp;return function(val) {<br>&nbsp;&nbsp;&nbsp;&nbsp;if (cache.has(val)) {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return cache.get(val)<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;let result = func(val)<br>&nbsp;&nbsp;&nbsp;&nbsp;cache.set(val, result)<br>&nbsp;&nbsp;&nbsp;&nbsp;return result<br>&nbsp;&nbsp;}<br>}",
      "question": "This code provides an example of a...",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": ["Derivative function", "Genetic algorithm", "Closure", "Remote assignment"],
      "answer": 2,
      "answers": [],
      "explanation": "",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 6213,
      "type": "MultipleChoice",
      "given": "let user = {<br>&nbsp;&nbsp;firstName: 'John',<br>&nbsp;&nbsp;sayHi() {<br>&nbsp;&nbsp;&nbsp;&nbsp;console.log(`Hello, ${this.firstName}!`)<br>&nbsp;&nbsp;<br>}<br>}<br><br>setTimeout(user.sayHi, 1000);",
      "question": "What will be logged to the console?",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": ["Hello, undefined!", "Hello!", "Hello, John!", "error"],
      "answer": 0,
      "answers": [],
      "explanation": "Once a method is passed somewhere separately from the object, <pre>this</pre> is lost.",
      "moreInfo": "https://javascript.info/bind",
      "size": 0
    },
    {
      "id": 634,
      "type": "MultipleChoice",
      "given": "let user = {<br>&nbsp;&nbsp;firstName: 'John'<br>}<br><br>function func() {<br>&nbsp;&nbsp;return(`Hello, ${this.firstName}!`)<br>}<br><br>console.log(func.bind(user)())",
      "question": "What will be logged to the console?",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": ["Hello, John!", "Hello, undefined!", "Hello!", "error"],
      "answer": 0,
      "answers": [],
      "explanation": "Using <pre>.bind</pre> avoids the problem of <pre>this</pre> getting 'lost' by telling the bound function (<pre>func</pre> in this case) to use <pre>user</pre> as <pre>this</pre>.",
      "moreInfo": "https://javascript.info/bind",
      "size": 0
    },
    {
      "id": 635,
      "type": "FillBlank",
      "given": "",
      "question": "Fill in the blank to bind the <pre>user</pre> object to the function, <pre>func</pre>.",
      "displayAsCode": ["answer","q1", "q2"],
      "q1": "let user = {<br>&nbsp;&nbsp;firstName: 'John'<br>}<br><br>function func() {<br>&nbsp;&nbsp;return(`Hello, ${this.firstName}!`)<br>}<br><br>console.log(",
      "q2": ")",
      "choices": [""],
      "answer": 0,
      "answers": ["func.bind(user)()"],
      "explanation": "Using <pre>.bind</pre> avoids the problem of <pre>this</pre> getting 'lost' by telling the bound function (<pre>func</pre> in this case) to use <pre>user</pre> as <pre>this</pre>.",
      "moreInfo": "https://javascript.info/bind",
      "size": 18
    },
    {
      "id": 6214,
      "type": "ValidOrNot",
      "given": "",
      "question": "let user = {<br>&nbsp;&nbsp;firstName: 'John'<br>}<br><br>function func(greeting) {<br>&nbsp;&nbsp;return(`Hello, ${greeting}, ${this.firstName}!`)<br>}<br><br>console.log(func.bind(user)('Hi'))",
      "displayAsCode": ["question"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [],
      "explanation": "",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 6215,
      "type": "MultipleChoice",
      "given": "let user = {<br>&nbsp;&nbsp;firstName: 'John'<br>}<br><br>function func(greeting) {<br>&nbsp;&nbsp;return(`Hello, ${greeting}, ${this.firstName}!`)<br>}<br><br>console.log(func.bind(user)('Hi'))",
      "question": "What will be logged to the console?",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": ["undefined, John", "Hello, undefined", "undefined, undefined", "Hello, John"],
      "answer": 3,
      "answers": [],
      "explanation": "",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 636,
      "type": "TrueOrFalse",
      "given": "let userUtils = {<br>&nbsp;&nbsp;addAddress: function(street, city, state) {<br>&nbsp;&nbsp;&nbsp;&nbsp;this.street = street<br>&nbsp;&nbsp;&nbsp;&nbsp;this.city = city<br>&nbsp;&nbsp;&nbsp;&nbsp;this.state = state<br>&nbsp;&nbsp;}<br>}<br><br>let user = {<br>&nbsp;&nbsp;firstName: 'Ignaz',<br>&nbsp;&nbsp;lastName: 'Semmelweiß'<br>}<br><br>userUtils.addAddress.bind(user)('123 Rainbow', 'Las Vegas', 'NV')",
      "question": "Ignaz Semmelweiß lives in Las Vegas",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [],
      "explanation": "The <pre>func.bind</pre> syntax returns a function where <pre>this</pre> is set to whatever <pre>func</pre> has been bound to.",
      "moreInfo": "https://javascript.info/bind",
      "size": 0
    },
    {
      "id": 637,
      "type": "TrueOrFalse",
      "given": "let userUtils = {<br>&nbsp;&nbsp;addAddress: function(street, city, state) {<br>&nbsp;&nbsp;&nbsp;&nbsp;this.street = street<br>&nbsp;&nbsp;&nbsp;&nbsp;this.city = city<br>&nbsp;&nbsp;&nbsp;&nbsp;this.state = state<br>&nbsp;&nbsp;}<br>}<br><br>let user = {<br>&nbsp;&nbsp;firstName: 'Ignaz',<br>&nbsp;&nbsp;lastName: 'Semmelweiß'<br>}<br><br>userUtils.addAddress.bind(user)('123 Rainbow', 'Las Vegas', 'NV')",
      "question": "Ignaz Semmelweiß has no address",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": false,
      "answers": [],
      "explanation": "You can add parameters when binding a function",
      "moreInfo": "https://javascript.info/bind",
      "size": 0
    },
    {
      "id": 6216,
      "type": "ValidOrNot",
      "given": "",
      "question": "function multiplyBy(a,b) {<br>&nbsp;&nbsp;return a * b<br>}<br><br>let double = multiplyBy.bind(null, 2)",
      "displayAsCode": ["question"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [],
      "explanation": "This is sometimes called a <em>partial function</em>",
      "moreInfo": "https://javascript.info/bind",
      "size": 0
    },
    {
      "id": 6216,
      "type": "FillBlank",
      "given": "function multiplyBy(a,b) {<br>&nbsp;&nbsp;return a * b<br>}<br><br>let double = multiplyBy.bind(null, 2)<br><br>console.log(double(8)",
      "question": "",
      "displayAsCode": ["given"],
      "q1": "The value printed to the console is ",
      "q2": "",
      "choices": [],
      "answer": "",
      "answers": ["16"],
      "explanation": "This is sometimes called a <em>partial function</em>",
      "moreInfo": "https://javascript.info/bind",
      "size": 3
    },
    {
      "id": 6135,
      "type": "TrueOrFalse",
      "given": "let sayHi = () => 'Hello'<br>console.log(sayHi())",
      "question": "This code will throw a run-time exception.",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": false,
      "answers": [],
      "explanation": "",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 6218,
      "type": "FillBlank",
      "given": "name = 'Ana'<br>let sayHi = (name) => {<br>&nbsp;&nbsp;return `Hello, ${this.name}`<br>}<br><br>console.log(sayHi('Hal'))",
      "question": "",
      "displayAsCode": ["given"],
      "q1": "the value of <pre>this.name</pre> is ",
      "q2": "",
      "choices": [],
      "answer": "",
      "answers": ["Ana", "'Ana'"],
      "explanation": "Arrow functions have no <pre>this</pre> context. They search 'upwards' for a context and find one in the <em>global</em> object.",
      "moreInfo": "",
      "size": 4
    },
    {
      "id": ,
      "type": "",
      "given": "",
      "question": "",
      "displayAsCode": [],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": "",
      "answers": [],
      "explanation": "",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 421,
      "type": "FillBlank",
      "given": "let composer = {<br>&nbsp;&nbsp;name: 'Ludwig van Beethoven',<br>&nbsp;&nbsp;symphonies: 9,<br>&nbsp;&nbsp;born: 1770,<br>&nbsp;&nbsp;died: 1827<br>}<br><br>Object.defineProperty(composer, 'died', {<br>&nbsp;&nbsp;writable: false<br>})<br><br>composer.died = 1837",
      "question": "",
      "displayAsCode": ["given"],
      "q1": "The value of <pre>composer.died</pre> is ",
      "q2": "",
      "choices": [],
      "answer": "",
      "answers": ["1827"],
      "explanation": "",
      "moreInfo": "https://javascript.info/property-descriptors",
      "size": 5
    },
    {
      "id": 431,
      "type": "MultipleChoice",
      "given": "let composer = {<br>&nbsp;&nbsp;name: 'Hector Berlioz',<br>&nbsp;&nbsp;symphonies: 4,<br>&nbsp;&nbsp;born: 1803,<br>&nbsp;&nbsp;died: 1869<br>}",
      "question": "If you want to prevent any additions, deletions, or changes to this object's properties, which of these will do the job?",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": ["Object.seal", "Object.freeze", "Object.static", "Object.immutable"],
      "answer": 1,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/property-descriptors",
      "size": 0
    },
    {
      "id": 411,
      "type": "FillBlank",
      "given": "Fill in the blank to provide a 'getter' for <pre>fullName</pre>",
      "question": "",
      "displayAsCode": ["q1","q2","answer"],
      "q1": "let person = {<br>&nbsp;&nbsp;firstName: 'Hal',<br>&nbsp;&nbsp;lastName: 'Helms',<br>&nbsp;&nbsp;",
      "q2": "() {<br>&nbsp;&nbsp;&nbsp;&nbsp;return `${this.firstName} ${this.lastName}`<br>&nbsp;&nbsp;}<br>}",
      "choices": [],
      "answer": "",
      "answers": ["get fullName"],
      "explanation": "",
      "moreInfo": "https://javascript.info/property-accessors",
      "size": 13
    },
    {
      "id": 412,
      "type": "FillBlank",
      "given": "let report = {<br>&nbsp;&nbsp;bhf: 0,<br>&nbsp;&nbsp;set age(age) {<br>&nbsp;&nbsp;&nbsp;&nbsp;if ( age > 0 && age < 120 ) {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.bhf = age<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;}<br>}<br><br>report.age = 200",
      "question": "",
      "displayAsCode": ["given", "answer","q1","q2"],
      "q1": "The value of <pre>report.bhf</pre> is ",
      "q2": "",
      "choices": [],
      "answer": "",
      "answers": ["0"],
      "explanation": "",
      "moreInfo": "https://javascript.info/property-accessors",
      "size": 4
    },
    {
      "id": 422,
      "type": "MultipleChoice",
      "given": "let report = {<br>&nbsp;&nbsp;age: 0,<br>&nbsp;&nbsp;set age(age) {<br>&nbsp;&nbsp;&nbsp;&nbsp;if ( age > 0 && age < 120 ) {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.age = age<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;}<br>}<br><br>report.age = 42",
      "question": "What does this code do?",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": ["Sets <pre>report.age</pre> to 42", "Throws a run-time exception", "Does nothing as it violates the age check"],
      "answer": 1,
      "answers": [],
      "explanation": "You cannot have the property name the same as your <pre>get</pre> property.",
      "moreInfo": "https://javascript.info/property-accessors",
      "size": 0
    },
    {
      "id": 432,
      "type": "FillBlank",
      "given": "let electricVehicle = {<br>&nbsp;&nbsp;motor: 'electric',<br>&nbsp;&nbsp;emissions: 'none'<br>}<br><br>let tesla = {<br>&nbsp;&nbsp;mark: 'Tesla',<br>&nbsp;&nbsp;range: '340 miles'<br>}<br>tesla.__proto__ = electricVehicle<br><br>console.log(tesla.motor)",
      "question": "",
      "displayAsCode": ["given"],
      "q1": "The value of <pre>tesla.motor</pre> is ",
      "q2": "",
      "choices": [],
      "answer": "",
      "answers": ["electric"],
      "explanation": "This works, but <pre>Object.setPrototypeOf</pre> is preferred.",
      "moreInfo": "https://javascript.info/prototype-inheritance",
      "size": 9
    },
    {
      "id": 433,
      "type": "FillBlank",
      "given": "let electricVehicle = {<br>&nbsp;&nbsp;motor: 'electric',<br>&nbsp;&nbsp;emissions: 'none'<br>}<br><br>let tesla = {<br>&nbsp;&nbsp;mark: 'Tesla',<br>&nbsp;&nbsp;range: '340 miles'<br>}<br>Object.setPrototypeOf(tesla, electricVehicle)<br><br>console.log(tesla.motor)",
      "question": "",
      "displayAsCode": ["given"],
      "q1": "The value of <pre>tesla.motor</pre> is ",
      "q2": "",
      "choices": [],
      "answer": "",
      "answers": ["electric"],
      "explanation": "<pre>Object.setPrototypeOf</pre> is preferred over the older <pre>__proto__</pre>.",
      "moreInfo": "https://javascript.info/prototype-inheritance",
      "size": 9
    },
    {
      "id": 423,
      "type": "FillBlank",
      "given": "let electricVehicle = {<br>&nbsp;&nbsp;motor: 'electric',<br>&nbsp;&nbsp;emissions: 'none',<br>&nbsp;&nbsp;outlook() {return 'Electric vehicles are poised to continue gaining in popularity.'}<br>}<br><br>let tesla = {<br>&nbsp;&nbsp;mark: 'Tesla',<br>&nbsp;&nbsp;range: '340 miles'<br>}<br><br>Object.setPrototypeOf(tesla, electricVehicle)<br><br>for (property in tesla) {<br>&nbsp;&nbsp;console.log(property)<br>}",
      "question": "",
      "displayAsCode": ["given"],
      "q1": "The number of properties logged to the console is ",
      "q2": "",
      "choices": [],
      "answer": "",
      "answers": ["5"],
      "explanation": "",
      "moreInfo": "https://javascript.info/prototype-inheritance",
      "size": 2
    },
    {
      "id": 424,
      "type": "FillBlank",
      "given": "let electricVehicle = {<br>&nbsp;&nbsp;motor: 'electric',<br>&nbsp;&nbsp;emissions: 'none',<br>&nbsp;&nbsp;outlook() { return 'Electric vehicles are poised to continue gaining in popularity.' }<br>}<br><br>let tesla = {<br>&nbsp;&nbsp;mark: 'Tesla',<br>&nbsp;&nbsp;range: '340 miles'<br>}<br><br>Object.setPrototypeOf(tesla, electricVehicle)<br>for (property in tesla) {<br>&nbsp;&nbsp;if (tesla.hasOwnProperty(property)) {<br>&nbsp;&nbsp;&nbsp;&nbsp;console.log(property)<br>&nbsp;&nbsp;}<br>}",
      "question": "",
      "displayAsCode": ["given"],
      "q1": "The number of properties logged to the console is ",
      "q2": "",
      "choices": [],
      "answer": "",
      "answers": ["2"],
      "explanation": "",
      "moreInfo": "https://javascript.info/prototype-inheritance",
      "size": 2
    },
    {
      "id": 425,
      "type": "MultipleChoice",
      "given": "let vehicle = {<br>&nbsp;&nbsp;toString() {<br>&nbsp;&nbsp;&nbsp;&nbsp;return `${this.year} ${this.mark} ${this.make}`<br>&nbsp;&nbsp;}<br>}<br><br>let car = {<br>&nbsp;&nbsp;make: 'Tesla',<br>&nbsp;&nbsp;mark: 'Model S Plaid',<br>&nbsp;&nbsp;year: 2021<br>}",
      "question": "In <pre>vehicle</pre>'s <pre>toString</pre> method, what does <pre>this</pre> refer to?",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": ["<pre>vehicle</pre>", "<pre>car</pre>", "<pre>global</pre>", "nothing &mdash; in this context, <pre>this</pre> is undefined"],
      "answer": 1,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/native-prototypes",
      "size": 0
    },
    {
      "id": 426,
      "type": "TrueOrFalse",
      "given": "function myFunc() {}<br><br>console.log(myFunc.__proto__ === Function.prototype)",
      "question": "The console prints out <em>false</em>",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": false,
      "answers": [],
      "explanation": "Functions inherit from <pre>Function.prototype</pre>",
      "moreInfo": "https://javascript.info/native-prototypes",
      "size": 0
    },
    {
      "id": 427,
      "type": "TrueOrFalse",
      "given": "function myFunc() {}<br><br>console.log(myFunc.__proto__.__proto__ === Object.prototype)",
      "question": "The console prints out <em>true</em>",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/native-prototypes",
      "size": 0
    },
    {
      "id": 428,
      "type": "TrueOrFalse",
      "given": "Object.prototype.log = function() {<br>&nbsp;&nbsp;console.log(this)<br>}<br><br>let arr = [0,1,2,3,5,8]<br><br>arr.log()",
      "question": "This will print the array to the console",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [],
      "explanation": "",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 429,
      "type": "TrueOrFalse",
      "given": "Object.prototype.log = function() {<br>&nbsp;&nbsp;console.log(this)<br>}<br><br>'Hello'.log()",
      "question": "This code throws a run-time exception",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": false,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/native-prototypes",
      "size": 0
    },
    {
      "id": 4210,
      "type": "TrueOrFalse",
      "given": "Object.prototype.log = function() {<br>&nbsp;&nbsp;console.log(this)<br>}<br><br>let message = {<br>&nbsp;&nbsp;0: 'Fourscore',<br>&nbsp;&nbsp;1: 'and',<br>&nbsp;&nbsp;2: 'seven',<br>&nbsp;&nbsp;3: 'years',<br>&nbsp;&nbsp;4: 'ago',<br>&nbsp;&nbsp;length: 5<br>}<br><br>message.join = Array.prototype.join<br><br>message.join(' ').log()",
      "question": "This code will print the joined message to the console",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/native-prototypes",
      "size": 0
    },
    {
      "id": 2138,
      "type": "MultipleChoice",
      "given": "console.log(typeof +'1')",
      "question": "What will be logged to the console?",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": ["number", "object", "primitive", "string"],
      "answer": 0,
      "answers": [],
      "explanation": "",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 2139,
      "type": "MultipleChoice",
      "given": "console.log(typeof +true)",
      "question": "What will be logged to the console?",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": ["number", "object", "boolean", "string"],
      "answer": 0,
      "answers": [],
      "explanation": "",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 413,
      "type": "FillBlank",
      "given": "Fill the blank to log the person's first name to the console",
      "question": "",
      "displayAsCode": ["q1","q2","answer"],
      "q1": "let person = {<br>&nbsp;&nbsp;firstName: 'Hal',<br>&nbsp;&nbsp;lastName: 'Helms'<br>}<br>",
      "q2": "",
      "choices": [],
      "answer": "",
      "answers": ["console.log(person.firstName)", "console.log(person.firstName);"],
      "explanation": "",
      "moreInfo": "",
      "size": 30
    },
    {
      "id": 414,
      "type": "TrueOrFalse",
      "given": "let person = {<br>&nbsp;&nbsp;firstName: 'Hal',<br>&nbsp;&nbsp;lastName: 'Helms',<br>&nbsp;&nbsp;greet: function () {<br>&nbsp;&nbsp;&nbsp;&nbsp;return `Hi, I am ${this.firstName} ${this.lastName}`<br>&nbsp;&nbsp;}<br>}<br><br>console.log(person.greet())",
      "question": "This code will print <em>Hi, I am Hal Helms</em> to the console",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [],
      "explanation": "",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 6219,
      "type": "TrueOrFalse",
      "given": "let person = {<br>&nbsp;&nbsp;firstName: 'Hal',<br>&nbsp;&nbsp;lastName: 'Helms',<br>&nbsp;&nbsp;greet: function () {<br>&nbsp;&nbsp;&nbsp;&nbsp;return `Hi, I am ${this.firstName} ${this.lastName}`<br>&nbsp;&nbsp;},<br>&nbsp;&nbsp;get sayHi() {<br>&nbsp;&nbsp;&nbsp;&nbsp;return this.greet()<br>&nbsp;&nbsp;}<br>}<br><br>console.log(person.sayHi)",
      "question": "This code will print <em>Hi, I am Hal Helms</em> to the console",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [],
      "explanation": "",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 321,
      "type": "FillBlank",
      "given": "console.log(false || 'Hello')",
      "question": "",
      "displayAsCode": ["given"],
      "q1": "This code will print ",
      "q2": " to the console",
      "choices": [],
      "answer": "",
      "answers": ["Hello", "'Hello'", "\"Hello\""],
      "explanation": "",
      "moreInfo": "",
      "size": 7
    },
    {
      "id": 4211,
      "type": "TrueOrFalse",
      "given": "let vehicle = {<br>&nbsp;&nbsp;start() {<br>&nbsp;&nbsp;&nbsp;&nbsp;console.log('vroom')<br>&nbsp;&nbsp;}<br>}<br><br>let tesla = Object.create(vehicle)",
      "question": "This code produces a new object whose prototype is <pre>vehicle</pre>",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/prototype-methods",
      "size": 0
    },
    {
      "id": 415,
      "type": "ValidOrNot",
      "given": "",
      "question": "let obj = new Object()",
      "displayAsCode": ["question"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [],
      "explanation": "",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 416,
      "type": "TrueOrFalse",
      "given": "let obj = {}",
      "question": "You may only use <em>object literal</em> notation if you also have stated: <pre>use strict</pre>",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": false,
      "answers": [],
      "explanation": "",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 417,
      "type": "ValidOrNot",
      "given": "",
      "question": "let obj = {<br>&nbsp;&nbsp;addProperties = true<br>&nbsp;&nbsp;if (this.addProperties) {<br>&nbsp;&nbsp;&nbsp;&nbsp;date = new Date()<br>&nbsp;&nbsp;}<br>}",
      "displayAsCode": ["question"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": false,
      "answers": [],
      "explanation": "",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 418,
      "type": "FillBlank",
      "given": "Add a property called <pre>name</pre> with a given value of <pre>null</pre>",
      "question": "",
      "displayAsCode": ["answer", "q1", "q2"],
      "q1": "let person = {<br>&nbsp;&nbsp;age: null,<br>&nbsp;&nbsp;",
      "q2": "<br>}",
      "choices": [],
      "answer": "",
      "answers": ["name: null", "name: null"],
      "explanation": "",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 419,
      "type": "FillBlank",
      "given": "Remove the property <pre>age</pre>",
      "question": "",
      "displayAsCode": ["answer", "q1", "q2"],
      "q1": "let person = {<br>&nbsp;&nbsp;age: null,<br>&nbsp;&nbsp;name: null<br>}<br><br>",
      "q2": "",
      "choices": [],
      "answer": "",
      "answers": ["delete person.age", "delete person['age']"],
      "explanation": "",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 4110,
      "type": "MultipleChoice",
      "given": "let person = {<br>&nbsp;&nbsp;age: null,<br>&nbsp;&nbsp;name: null<br>}<br><br>person.address = {}",
      "question": "What will this code do?",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": ["Throw an error", "Nothing &mdash; properties must be defined when the object is defined", "Add an <pre>address</pre> property to <pre>person</pre>", "Create a variable in the global or window scope"],
      "answer": 2,
      "answers": [],
      "explanation": "",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 4111,
      "type": "ValidOrNot",
      "given": "",
      "question": "let person = {<br>&nbsp;&nbsp;age: null,<br>&nbsp;&nbsp;name: null,<br>&nbsp;&nbsp;\"is married\": false<br>}",
      "displayAsCode": ["question"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [],
      "explanation": "Property names consisting of more than one word can be used if written in quotes",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 4112,
      "type": "ValidOrNot",
      "given": "",
      "question": "let person = {<br>&nbsp;&nbsp;age: null,<br>&nbsp;&nbsp;name: null,<br>}<br><br>console.log(person['age'])",
      "displayAsCode": ["question"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [],
      "explanation": "The <em>bracket notation</em> can be used for any property name",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 4112,
      "type": "FillBlank",
      "given": "function makeBox(height, width, depth) {<br>&nbsp;&nbsp;return { height, width, depth }<br>}<br><br>let box = makeBox(510, 250, 120)<br><br>console.log(box.depth)",
      "question": "",
      "displayAsCode": ["given"],
      "q1": "The number logged to the console will be ",
      "q2": "",
      "choices": [],
      "answer": "",
      "answers": ["120", `"120"`,"'120'"],
      "explanation": "",
      "moreInfo": "https://javascript.info/object#property-value-shorthand",
      "size": 5
    },
    {
      "id": 4113,
      "type": "ValidOrNot",
      "given": "",
      "question": "let obj = {<br>&nbsp;&nbsp;Math: 'My own deviously wrong mathematical functions'<br>}",
      "displayAsCode": ["question"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [],
      "explanation": "Yes, this seems <em>very</em> wrong. See link for explanation.",
      "moreInfo": "https://javascript.info/object#property-names-limitations",
      "size": 0
    },
    {
      "id": 434,
      "type": "ValidOrNot",
      "given": "",
      "question": "let explanations = {<br>&nbsp;&nbsp;[Math.pi]: 'The value of π',<br>&nbsp;&nbsp;[Math.ceil]: 'A decimal value rounded up to the next integer'<br>}<br><br>console.log(explanations[Math.ceil])",
      "displayAsCode": ["question"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/object#computed-properties",
      "size": 0
    },
    {
      "id": 8143,
      "type": "MultipleChoice",
      "given": "let msg = \"We're from the government and we're here to help.\"<br>let prevarication = msg<br>msg = \"We're just kidding. We're here to tax you.\"<br>console.log(prevarication)",
      "question": "What will log to the console?",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": ["We're from the government and we're here to help", "We're just kiddinig. We're here to tax you.", "Nothing will be displayed", "Error: Duplicate variable assignment"],
      "answer": 0,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/object-copy",
      "size": 0
    },
    {
      "id": 8144,
      "type": "FillBlank",
      "given": "let myCat = {<br>&nbsp;&nbsp;name: 'Amadeus',<br>&nbsp;&nbsp;color: 'black'<br>}<br><br>let yourCat = myCat<br><br>yourCat.color = 'orange'",
      "question": "",
      "displayAsCode": ["given"],
      "q1": "The value of <pre>myCat</pre> is ",
      "q2": "",
      "choices": [],
      "answer": "",
      "answers": ['orange'],
      "explanation": "",
      "moreInfo": "https://javascript.info/object-copy",
      "size": 6
    },
    {
      "id": 8145,
      "type": "FillBlank",
      "given": "let myCat = {<br>&nbsp;&nbsp;name: 'Amadeus',<br>&nbsp;&nbsp;color: 'black'<br>}<br><br>let yourCat = myCat<br><br>console.log(myCat === yourCat)",
      "question": "",
      "displayAsCode": ["given", "answer"],
      "q1": "The value logged to the console is ",
      "q2": "",
      "choices": [],
      "answer": "",
      "answers": ['true'],
      "explanation": "",
      "moreInfo": "https://javascript.info/object-copy",
      "size": 5
    },
    {
      "id": 4212,
      "type": "TrueOrFalse",
      "given": "let myCat = {<br>&nbsp;&nbsp;name: 'Amadeus',<br>&nbsp;&nbsp;color: 'black'<br>}<br><br>let yourCat = {}<br><br>for (let key in myCat) {<br>&nbsp;&nbsp;yourCat[key] = myCat[key]<br>}<br>yourCat.color = 'orange'",
      "question": "The color of <pre>myCat</pre> is orange",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": false,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/object-copy#cloning-and-merging-object-assign",
      "size": 0
    },
    {
      "id": 4213,
      "type": "TrueOrFalse",
      "given": "let myCat = {<br>&nbsp;&nbsp;name: 'Amadeus',<br>&nbsp;&nbsp;color: 'black'<br>}<br><br>let yourCat = {}<br><br>Object.assign(yourCat, myCat)<br><br>yourCat.color = 'orange'",
      "question": "The color of <pre>myCat</pre> is black",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/object-copy#cloning-and-merging-object-assign",
      "size": 0
    },
    {
      "id": 4214,
      "type": "TrueOrFalse",
      "given": "let amadeus = {<br>&nbsp;&nbsp;name: 'Amadeus',<br>&nbsp;&nbsp;color: 'black'<br>}<br><br>let namelessCat1 = {<br>&nbsp;&nbsp;eats: 'fish'<br>}<br><br>let namelessCat2 = {<br>&nbsp;&nbsp;tail: 'long'<br>}<br><br>let superCat = {}<br><br>Object.assign(superCat, amadeus, namelessCat1, namelessCat2)",
      "question": "<pre>amadeus</pre> has no tail",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": false,
      "answers": [],
      "explanation": "https://javascript.info/object-copy#cloning-and-merging-object-assign",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 4215,
      "type": "TrueOrFalse",
      "given": "let amadeus = {<br>&nbsp;&nbsp;name: 'Amadeus',<br>&nbsp;&nbsp;color: 'black',<br>&nbsp;&nbsp;tail: 'short<br>}<br><br>let namelessCat1 = {<br>&nbsp;&nbsp;eats: 'fish'<br>}<br><br>let namelessCat2 = {<br>&nbsp;&nbsp;tail: 'long'<br>}<br><br>let superCat = {}<br><br>Object.assign(superCat, amadeus, namelessCat1, namelessCat2)",
      "question": "<pre>amadeus</pre> has a short tail",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": false,
      "answers": [],
      "explanation": "https://javascript.info/object-copy#cloning-and-merging-object-assign",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 4114,
      "type": "TrueOrFalse",
      "given": "const amadeus = {<br>&nbsp;&nbsp;name: 'Amadeus',<br>&nbsp;&nbsp;color: 'black',<br>&nbsp;&nbsp;tail: 'short'<br>}<br><br>amadeus.tail = 'long'",
      "question": "This causes an error, as <pre>amadeus</pre> has been declared a <pre>const</pre>.",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": false,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/object-copy#nested-cloning",
      "size": 0
    },
    {
      "id": 8214,
      "type": "TrueOrFalse",
      "given": "",
      "question": "To force the garbage collector to sweep for unreferenced variables, use <pre>system.gc()</pre>",
      "displayAsCode": [],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": false,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/garbage-collection#internal-algorithms",
      "size": 0
    },
    {
      "id": 4216,
      "type": "MultipleChoice",
      "given": "const amadeus = {<br>&bnsp;&bnsp;name: 'Amadeus',<br>&bnsp;&bnsp;color: 'black',<br>&bnsp;&bnsp;tail: 'short',<br>}<br><br>let sayHi = function() {<br>&bnsp;&bnsp;return `Hi, I'm ${this.name} and I'm a ${this.color} cat`<br>}<br><br>amadeus.sayHi = sayHi<br><br>console.log(amadeus.sayHi())",
      "question": "What will running this code produce?",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": ["Hi, I'm Amadeus and I'm a black cat", "Hi, I'm undefined and I'm a undefined cat", "Error, as <pre>amadeus</pre> is declared as a <pre>const</pre>","Nothing &mdash; you can't assign a function to an object after it's been declared. It will be ignored."],
      "answer": 0,
      "answers": [],
      "explanation": "",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": ,
      "type": "",
      "given": "",
      "question": "",
      "displayAsCode": [],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": "",
      "answers": [],
      "explanation": "",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": ,
      "type": "",
      "given": "",
      "question": "",
      "displayAsCode": [],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": "",
      "answers": [],
      "explanation": "",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": ,
      "type": "",
      "given": "",
      "question": "",
      "displayAsCode": [],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": "",
      "answers": [],
      "explanation": "",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": ,
      "type": "",
      "given": "",
      "question": "",
      "displayAsCode": [],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": "",
      "answers": [],
      "explanation": "",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": ,
      "type": "",
      "given": "",
      "question": "",
      "displayAsCode": [],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": "",
      "answers": [],
      "explanation": "",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": ,
      "type": "",
      "given": "",
      "question": "",
      "displayAsCode": [],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": "",
      "answers": [],
      "explanation": "",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": ,
      "type": "",
      "given": "",
      "question": "",
      "displayAsCode": [],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": "",
      "answers": [],
      "explanation": "",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": ,
      "type": "",
      "given": "",
      "question": "",
      "displayAsCode": [],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": "",
      "answers": [],
      "explanation": "",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": ,
      "type": "",
      "given": "",
      "question": "",
      "displayAsCode": [],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": "",
      "answers": [],
      "explanation": "",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": ,
      "type": "",
      "given": "",
      "question": "",
      "displayAsCode": [],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": "",
      "answers": [],
      "explanation": "",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": ,
      "type": "",
      "given": "",
      "question": "",
      "displayAsCode": [],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": "",
      "answers": [],
      "explanation": "",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": ,
      "type": "",
      "given": "",
      "question": "",
      "displayAsCode": [],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": "",
      "answers": [],
      "explanation": "",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": ,
      "type": "",
      "given": "",
      "question": "",
      "displayAsCode": [],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": "",
      "answers": [],
      "explanation": "",
      "moreInfo": "",
      "size": 0
    },
  ]
}