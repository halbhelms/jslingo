{
  "questions": [
    {
      "id": 111,
      "type": "ValidOrNot",
      "question": "alert: 'Hello'",
      "answer": false,
      "displayAsCode": ["question"]
    },
    {
      "id": 811,
      "type": "MultipleChoice",
      "question": "Which one of these will print to the browser console?",
      "choices": ["print('hello')","console('hello)","console.log('hello')", "log('hello')"],
      "displayAsCode": ["choices"],
      "answer": 2
    },
    {
      "id": 112,
      "type": "TrueOrFalse",
      "question": "JavaScript is a strongly-typed language",
      "answer": false,
      "displayAsCode": []
    },
    {
      "id": 113,
      "type": "TrueOrFalse",
      "question": "JavaScript is a case-sensitive language",
      "answer": true,
      "displayAsCode": []
    },
    {
      "id": 114,
      "type": "ValidOrNot",
      "question": "let message //receive from API",
      "answer": true,
      "displayAsCode": ["question"],
      "explanation": "Here the variable is declared but not given a value, making it undefined."
    },
    {
      "id": 115,
      "type": "ValidOrNot",
      "question": "let learn,to,code",
      "answer": true,
      "displayAsCode": ["question"],
      "explanation": "It looks odd, yes, but it's actually fine. Three separate varibles are declared but not given values."
    },
    {
      "id": 116,
      "type": "MultipleChoice",
      "question": "Which one of these is not a JavaScript reserved word?",
      "choices": ["const", "instance", "short", "with"],
      "answer": 1,
      "displayAsCode": ["choices"]
    },
    {
      "id": 117,
      "type": "ValidOrNot",
      "question": "const address = {<br />&nbsp;&nbsp;street: '123 Rainbow',<br />&nbsp;&nbsp;city: 'Las Vegas'<br />&nbsp;&nbsp;state: 'NV'<br />}",
      "answer": true,
      "displayAsCode": ["question"],
      "explanation": "This is just standard object literal notation."
    },
    {
      "id": 118,
      "type": "MultipleChoice",
      "given": "const name = 'Mickey'<br />name='Minnie'<br /><br />console.log(name)",
      "question": "Run the code and...",
      "choices": ["Console prints \"Mickey\"", "Console prints \"Minnie\"", "Console prints \"MickeyMinnie\"", "Console displays an error"],
      "answer": "3",
      "displayAsCode": ["given"],
      "explanation": "You're not allowed to change the value of a variabled declared with const. This statement is a little misleading, as you can change the properties of an object or the elements in an array, for example."
    },
    {
      "id": 119,
      "type": "ValidOrNot",
      "question": "let team = \"New York Yankees\"<br />let team = \"San Diego Padres\"",
      "answer": false,
      "displayAsCode": ["question"],
      "explanation": "A variable can be declared only once. Here, it's been declared twice, producing an error."
    },
    {
      "id": 1120,
      "type": "ValidOrNot",
      "question": "let $ = 'Mickey'",
      "answer": true
    },
    {
      "id": 1121,
      "type": "TrueOrFalse",
      "given": "const myName = \"Mickey\"<br />const MyName = \"Mickey\"<br />myName === Myname",
      "question": "This code returns true",
      "answer": true,
      "displayAsCode": ["given"],
      "explanation": "Even though JavaScript is case-sensitive, and the two variables are separate variables, their values are the same &mdash; and so the code returns true."
    },
    {
      "id": 1122,
      "type": "FillBlank",
      "q1": "Code written to provide an explanation or instruction, but which is not evaluated or displayed is called a ",
      "q2": "",
      "size": 8,
      "answers": ["comment"],
      "explanation": "A comment. There are both single- and multi-line versions of comments.",
      "displayAsCode": [],
      "moreInfo": "https://javascript.info/comments"
    },
    {
      "id": 1123,
      "type": "FillBlank",
      "given": "/*<br />Make sure the turbo-blaster is loaded<br />before engaging the laser macrifier.<br />*/",
      "q1": "The above code is a ",
      "q2": " comment",
      "answers": ["multi-line", "multiple-line", "multi line", "multiple line"],
      "explanation": "Any of these would be correct: 'multi line, multi-line, multiple line, multiple-line'",
      "displayAsCode": ["given"],
      "size": 12,
      "moreInfo": "https://javascript.info/comments"
    },
    {
      "id": 1124,
      "type": "FillBlank",
      "given": "Multiply 5 times 7",
      "q1": 5,
      "q2": 7,
      "answers": ["*"],
      "explanation": "",
      "moreInfo": "https://javascript.info/operators",
      "size": 1,
      "displayAsCode": ["q1", "q2", "answer"]
    },
    {
      "id": 1125,
      "type": "MultipleChoice",
      "question": "What operator will give you the <i>remainder</i> left from dividing one number by another?",
      "choices": ["%", "~", "^", "#"],
      "answer": "0",
      "explanation": "",
      "moreInfo": "https://javascript.info/operators",
      "displayAsCode": ["choices"]
    },
    {
      "id": 1126,
      "type": "FillBlank",
      "given": "Raise 4 to the 3d power",
      "q1": 4,
      "q2": 3,
      "answers": ["**"],
      "explanation": "",
      "moreInfo": "https://javascript.info/operators",
      "size": 1,
      "displayAsCode": ["q1", "q2", "answer"]
    },
    {
      "id": 1127,
      "type": "FillBlank",
      "given": "Join two strings together to form a longer string",
      "q1": "\"Time flies like an arrow",
      "q2": ";fruit flies like a banana\"",
      "answers": ["+"],
      "explanation": "The + operator is used both for addition and for joining strings &mdash; a process known as <em>concatenation</em>",
      "moreInfo": "https://javascript.info/operators",
      "size": 1,
      "displayAsCode": ["answer"]
    },
    {
      "id": 1128,
      "type": "FillBlank",
      "given": "Provide the operator that will <em>increment</em> a variable by 1 <em>after</em> that variable has been evaluated.",
      "q1": "let x = 99; x",
      "q2": "",
      "answers": ["++"],
      "explanation": "++ (when used in this position) adds 1 to a number after it's been evaluated. This is referred to as a <em>postfix</em> operator.",
      "moreInfo": "https://javascript.info/operators",
      "size": 2,
      "displayAsCode": ["q1","answer"]
    },
    {
      "id": 1129,
      "type": "FillBlank",
      "given": "Provide the operator that will <em>increment</em> a variable by 1 <em>before</em> that variable has been evaluated.",
      "q1": "let x = 99;",
      "q2": "x",
      "answers": ["++"],
      "explanation": "++ (when used in this position) adds 1 to a number before it's been evaluated. This is referred to as a <em>prefix</em> operator.",
      "moreInfo": "https://javascript.info/operators",
      "size": 2,
      "displayAsCode": ["q1","q2","answer"]
    },
    {
      "id": 1130,
      "type": "FillBlank",
      "given": "Provide the operator that will <em>decrement</em> a variable by 1 <em>after</em> that variable has been evaluated.",
      "q1": "let x = 99; x",
      "q2": "",
      "answers": ["--"],
      "explanation": "-- (when used in this position) subtracts 1 from a number after it's been evaluated. This is referred to as a <em>postfix</em> operator.",
      "moreInfo": "https://javascript.info/operators",
      "size": 2,
      "displayAsCode": ["q1","answer"]
    },
    {
      "id": 1131,
      "type": "FillBlank",
      "given": "Provide the operator that will <em>decrement</em> a variable by 1 <em>before</em> that variable has been evaluated.",
      "q1": "let x = 99;",
      "q2": "x",
      "answers": ["--"],
      "explanation": "-- (when used in this position) adds 1 to a number before it's been evaluated. This is referred to as a <em>prefix</em> operator.",
      "moreInfo": "https://javascript.info/operators",
      "size": 2,
      "displayAsCode": ["q1","q2","answer"]
    },
    {
      "id": 1132,
      "type": "FillBlank",
      "given": "Provide the <em>shortcut</em> operator that will add 7 to x",
      "q1": "let x = 99; x",
      "q2": "x",
      "answers": ["+="],
      "explanation": "I refer to it as a <em>shortcut</em> operator because it's a shorter version of </pre>x = x + 7</pre>",
      "moreInfo": "https://javascript.info/operators",
      "size": 2,
      "displayAsCode": ["q1","q2","answer"]
    },
    {
      "id": 1133,
      "type": "FillBlank",
      "given": "Assume <pre>addCustomer</pre> returns either <pre>true</pre> or <pre>false</pre>. Use an operator that converts Boolean (true|false) values into numbers: 0 if false, 1 if true.",
      "q1": "let customerAdded = addCustomer()<br />custmomers += ",
      "q2": "customerAdded",
      "answers": ["+"],
      "explanation": "Another use for the plus operator: when used in this way, it automatically converts Boolean values into corresponding numeric ones.",
      "moreInfo": "https://javascript.info/operators",
      "size": 1,
      "displayAsCode": ["q1","q2","answer"]
    },
    {
      "id": 1134,
      "type": "ValidOrNot",
      "question": "let a = b = c = 2 + 2",
      "answer": true,
      "displayAsCode": ["question"],
      "moreInfo":"https://javascript.info/operators",
      "explanation": "Evaluation begins at the farthest <b>right</b> and works backwards, so the first operation adds 2 plus 2 to arrive at 4. That value is then assigned to the variable, c. Moving backwards one operation, the value of c (which is 4) is assigned to b. Then once again, back up and assign the value of b (4) to the variable, a."
    },
    {
      "id": 1135,
      "type": "FillBlank",
      "given": "Assume <pre>addCustomer</pre> returns either <pre>true</pre> or <pre>false</pre>. Use an operator that converts Boolean (true|false) values into numbers: 0 if false, 1 if true.",
      "q1": "let customerAdded = addCustomer()<br />custmomers += ",
      "q2": "customerAdded",
      "answers": ["+"],
      "explanation": "Another use for the plus operator: when used in this way, it automatically converts Boolean values into corresponding numeric ones.",
      "moreInfo": "https://javascript.info/operators",
      "size": 1,
      "displayAsCode": ["q1","q2","answer"]
    },
    {
      "id": 1136,
      "type": "TrueOrFalse",
      "question": "Just as there is a <pre>+=</pre> operator, there are also <pre>*=, -=</pre>, and <pre>/=</pre> operators.",
      "answer": true,
      "displayAsCode": []
    },
    {
      "id": 1137 ,
      "type": "TrueOrFalse",
      "question": "To test for strict equality (both value <em>and</em> type), use the <pre>~=</pre> operator.",
      "answer": false,
      "explanation": "For strict equality, use the 'triple-equals' operator: ==="
    },
    {
      "id": 1138,
      "type": "MultipleChoice",
      "question": "Which one of these operators perform a <em>not-equality</em> check?",
      "choices": ["~=", "-=", "!==", "^="],
      "displayAsCode": ["choices"],
      "answer": 2,
      "explanation": "For non-equality, use the '!==' operator. The ! is pronounced 'bang'."
    },
    {
      "id": 1139 ,
      "type": "TrueOrFalse",
      "question": "You should <em>always</em> end a statement with a semi-colon.",
      "answer": false,
      "explanation": "Most of the time, JavaScript can imply the semi-colon at a line break. There are rare exceptions to this, however -- especially in the case of functions that <pre>return</pre> a value.",
      "moreInfo": "https://javascript.info/structure"
    },
    {
      "id": 1140 ,
      "type": "TrueOrFalse",
      "question": "Statements are syntax constructs and commands that perform actions.",
      "answer": true,
      "explanation": "",
      "moreInfo": "https://javascript.info/structure"
    },
    {
      "id": 1141 ,
      "type": "TrueOrFalse",
      "question": "Multiple statements can be placed on the same line if separated with a semi-colon",
      "answer": true,
      "explanation": "",
      "moreInfo": "https://javascript.info/structure"
    },
    {
      "id": 1142,
      "type": "ValidOrNot",
      "question": "let customersAdded = 0 // total for this salesperson",
      "answer": true,
      "displayAsCode": ["question"],
      "moreInfo": "https://javascript.info/structure"
    },
    {
      "id": 1143,
      "type": "TrueOrFalse",
      "given": "let a = 5<br />let b = 10/5<br />console.assert(a === b)",
      "question": "You can use <pre>console.assert</pre> to test the truth of assertions.",
      "answer": true,
      "explanation": "This is a little-used function of the console object. You can think of it as a poor-man's test. However, be aware that assertions that are true will print nothing to the console; only false assertions will be displayed."
    },
    {
      "id": 1144,
      "type": "MultipleChoice",
      "question": "<pre>console.table</pre>...",
      "choices": ["is invalid JavaScript", "counts the number of cells in an HTML table", "stashes code into localStorage", "displays data in a tabular format"],
      "displayAsCode": [],
      "answer": 3
    },
    {
      "id": 1145,
      "type": "TrueOrFalse",
      "question": "In almost all cases, the use of <pre>let</pre> or <pre>const</pre> is preferable to <pre>var</pre> when declaring variables.",
      "answer": true,
      "explanation": "Unless you have a very specific need for the behavior <pre>var</pre> produces (and you'll know if you do), you're better off with either <pre>let</pre> or <pre>const</pre>."
    },
    {
      "id": 1146,
      "type": "TrueOrFalse",
      "given": "let beginning = 42<br />let ending = \"24\"<br />console.log(beginning + ending)",
      "question": "Prints 66 to the console",
      "answer": false,
      "explanation": "Since \"ending\" is a string, the plus operator will be used in concatenation mode: the console will print out \"4224\"",
      "displayAsCode": ["given"]
    },
    {
      "id": 1147,
      "type": "ValidOrNot",
      "question": "const 2dNotice = false",
      "answer": false,
      "explanation": "JavaScript variables can't begin with a number",
      "displayAsCode": ["question"]
    },
    {
      "id": 1148,
      "type": "ValidOrNot",
      "question": "const second notice = false",
      "answer": false,
      "explanation": "JavaScript variables can't have a space in them",
      "displayAsCode": ["question"]
    },
    {
      "id": 221,
      "type": "TrueOrNot",
      "question": "The <pre>null</pre> value means \"nothing\" or \"value unknown\"",
      "answer": true,
      "explanation": "If you use <pre>null</pre>, make sure you don't surround it in quotes. Doing so would turn the value into a string.",
      "displayAsCode": []
    },
    {
      "id": 222,
      "type": "TrueOrNot",
      "question": "The <pre>undefined</pre> value means \"value has not been assigned\"",
      "answer": true,
      "explanation": "If you use <pre>undefined</pre>, make sure you don't surround it in quotes. Doing so would turn the value into a string.",
      "displayAsCode": []
    },
    {
      "id": 223,
      "type": "FillBlank",
      "given": "",
      "question": "",
      "q1": "<pre>typeof 1500n</pre> returns",
      "q2": "",
      "choices": [],
      "answer": "",
      "answers": ["BigInt", "bigint", "Bigint"],
      "explanation": "The presence of <pre>n</pre> on the end makes it a <pre>bigint</pre>, not the actual number size itself.",
      "displayAsCode": ["answer"],
      "moreInfo": "https://javascript.info/types",
      "size": 6
    },
    {
      "id": 224,
      "type": "FillBlank",
      "given": "",
      "question": "",
      "q1": "<pre>typeof 20000000</pre> returns",
      "q2": "",
      "choices": [],
      "answer": "",
      "answers": ["number", "Number"],
      "explanation": "Even though the number is large, it's not a <pre>bigint</pre> since there is no <pre>n</pre> on the end of the number",
      "displayAsCode": ["answer"],
      "moreInfo": "",
      "size": 6
    },
    {
      "id": 225,
      "type": "FillBlank",
      "given": "",
      "question": "",
      "q1": "<pre>typeof \"seven\"</pre> returns",
      "q2": "",
      "choices": [],
      "answer": "",
      "answers": ["string", "String"],
      "explanation": "Anything wrapped in quotes is a string.",
      "displayAsCode": ["answer"],
      "moreInfo": "",
      "size": 6
    },
    {
      "id": 226,
      "type": "FillBlank",
      "given": "",
      "question": "",
      "q1": "<pre>typeof \`seven\`</pre> returns",
      "q2": "",
      "choices": [],
      "answer": "",
      "answers": ["string", "String"],
      "explanation": "Anything wrapped in quotes (or tick marks) is a string.",
      "displayAsCode": ["answer"],
      "moreInfo": "",
      "size": 6
    },
    {
      "id": 227,
      "type": "FillBlank",
      "given": "",
      "question": "",
      "q1": "<pre>typeof alert</pre> returns",
      "q2": "",
      "choices": [],
      "answer": "",
      "answers": ["function"],
      "explanation": "",
      "displayAsCode": ["answer"],
      "moreInfo": "https://javascript.info/types",
      "size": 8
    },
    {
      "id": 228,
      "type": "FillBlank",
      "given": "",
      "question": "",
      "q1": "<pre>typeof null</pre> returns",
      "q2": "",
      "choices": [],
      "answer": "",
      "answers": ["object"],
      "explanation": "This is somewhat curious, as <pre>typeof undefined</pre> returns <pre>undefined</pre>. In the link provided, the author identifies this as a mistake, held over from the early days of JavaScript. But there's much weirder stuff than this in JavaScript!",
      "displayAsCode": ["answer"],
      "moreInfo": "https://javascript.info/types",
      "size": 6
    },
    {
      "id": 229,
      "type": "FillBlank",
      "given": "",
      "question": "",
      "q1": "<pre>typeof undefined</pre> returns",
      "q2": "",
      "choices": [],
      "answer": "",
      "answers": ["undefined"],
      "explanation": "This is somewhat curious, as <pre>typeof null</pre> returns <pre>object</pre>. But there's much weirder stuff than this in JavaScript!",
      "displayAsCode": ["answer"],
      "moreInfo": "https://javascript.info/types",
      "size": 9
    },
    {
      "id": 2210,
      "type": "FillBlank",
      "given": "",
      "question": "",
      "q1": "<pre>typeof true</pre> returns",
      "q2": "",
      "choices": [],
      "answer": "",
      "answers": ["boolean"],
      "explanation": "",
      "displayAsCode": ["answer"],
      "moreInfo": "https://javascript.info/types",
      "size": 7
    },
    {
      "id": 2211,
      "type": "FillBlank",
      "given": "",
      "question": "",
      "q1": "<pre>typeof false</pre> returns",
      "q2": "",
      "choices": [],
      "answer": "",
      "answers": ["boolean"],
      "explanation": "",
      "displayAsCode": ["answer"],
      "moreInfo": "https://javascript.info/types",
      "size": 7
    },
    {
      "id": 2212,
      "type": "FillBlank",
      "given": "",
      "question": "",
      "q1": "<pre>typeof Math</pre> returns",
      "q2": "",
      "choices": [],
      "answer": "",
      "answers": ["object"],
      "explanation": "",
      "displayAsCode": ["answer"],
      "moreInfo": "https://javascript.info/types",
      "size": 6
    },
    {
      "id": 2213,
      "type": "FillBlank",
      "given": "",
      "question": "",
      "q1": "<pre>typeof []</pre> returns",
      "q2": "",
      "choices": [],
      "answer": "",
      "answers": ["object"],
      "explanation": "Although we always refer to this as an <em>array</em>, from JavaScript's POV, it's just an object.",
      "displayAsCode": ["answer"],
      "moreInfo": "https://javascript.info/types",
      "size": 6
    },
    {
      "id": 2214,
      "type": "FillBlank",
      "given": "",
      "question": "",
      "q1": "<pre>typeof {}</pre> returns",
      "q2": "",
      "choices": [],
      "answer": "",
      "answers": ["object"],
      "explanation": "",
      "displayAsCode": ["answer"],
      "moreInfo": "https://javascript.info/types",
      "size": 6
    },
    {
      "id": 2215,
      "type": "FillBlank",
      "given": "const add = (a,b) => {return a + b}",
      "question": "",
      "q1": "<pre>typeof add</pre> returns",
      "q2": "",
      "choices": [],
      "answer": "",
      "answers": ["function"],
      "explanation": "",
      "displayAsCode": ["answer", "given"],
      "moreInfo": "https://javascript.info/types",
      "size": 8
    },
    {
      "id": 2216,
      "type": "FillBlank",
      "given": "const array = [true, 5, \"tree\", [], {}]",
      "question": "",
      "q1": "<pre>typeof array</pre> returns",
      "q2": "",
      "choices": [],
      "answer": "",
      "answers": ["object"],
      "explanation": "As you can see, arrays (even though <pre>typeof</pre> correctly identifies it as an <pre>object</pre>) can hold values of different types.",
      "displayAsCode": ["answer", "given"],
      "moreInfo": "https://javascript.info/types",
      "size": 7
    },
    {
      "id": 121,
      "type": "ValidOrNot",
      "question": "let name = \"Mickey\"<br />let greeting = `Hello, ${name}`",
      "answer": true,
      "explanation": "Tick marks indicate a <em>template string</em>, in which JavaScript expressions can be interpreted when placed inside <pre>${</pre> and <pre>}</pre>",
      "displayAsCode": ["question"]
    },
    {
      "id": 211,
      "type": "TrueOrFalse",
      "question": "Because JavaScript is not a strongly-typed language, it has no concept of <em>data types</em>",
      "answer": false,
      "explanation": "Even though JavaScript is a weakly-typed language, it still has data types.",
      "displayAsCode": []
    },
    {
      "id": 212,
      "type": "MultipleChoice",
      "question": "Which one of these is <em>not</am> a JavaScript data type?",
      "choices": ["string", "uri", "function", "map"],
      "displayAsCode": [],
      "answer": 1,
      "explanation": "string, function, and map are all JavaScript data types. uri, on the other hand, is not."
    },
    {
      "id": 213,
      "type": "MultipleChoice",
      "question": "Which one of these is <em>not</em> a JavaScript data type?",
      "choices": ["set", "object", "number", "conditional"],
      "displayAsCode": [],
      "answer": 3,
      "explanation": "set, object, and number are all JavaScript data types. conditional, on the other hand, is not."
    },
    {
      "id": 214,
      "type": "FillBlank",
      "q1": "A data type that is a set of statements that performs a task or calculates a value is called a ",
      "answers": ["function"],
      "explanation": "",
      "displayAsCode": ["answer"],
      "size": 8
    },
    {
      "id": 215,
      "type": "MultipleChoice",
      "given": "const catYears = 54/0",
      "question": "This code will return what data type?",
      "choices": ["NaN", "string", "Error", "number"],
      "answer": "3",
      "explanation": "This is an odd one. Dividing by 0 returns <pre>Infinity</pre>, which is actually a number.",
      "displayAsCode": ["choices", "given"]
    },
    {
      "id": 216,
      "type": "ValidOrNot",
      "given": "",
      "question": "const x = NaN",
      "answer": true,
      "explanation": "<pre>NaN</pre>, short for <em>Not a Number</em>, is usually encountered as the result of a mathematical operation that goes awry, but we can, in fact, set a variable to <pre>NaN</pre>. Why someone would <em>want</em> to do this is a mystery.",
      "displayAsCode": ["question"],
      "moreInfo": ""
    },
    {
      "id": 217,
      "type": "FillBlank",
      "given": "The largest value of a number data type is (2<sup>53</sup> - 1) which is 9007199254740991. To use an even larger value, append the value with...",
      "q1": "let incrediblyBigNumber = 5487895612354778954562541",
      "answers": ["n"],
      "size": 1,
      "explanation": "This is a new data type in JavaScript: <b>BigInt</b>. To use it, append <pre>n</pre> to the value.",
      "displayAsCode": ["q1"],
      "moreInfo": "https://javascript.info/bigint"
    },
    {
      "id": 218,
      "type": "FillBlank",
      "given": "'Mickey' / 7",
      "q1": "Running this code will return",
      "answers": ["NaN"],
      "size": 3,
      "explanation": "You might think it would produce an error, but instead, we get <pre>NaN</pre> &mdash; short for <em>Not a Number</em>",
      "displayAsCode": ["given"],
      "moreInfo": "https://javascript.info/types"
    },
    {
      "id": 219,
      "type": "FillBlank",
      "given": "You want to find the data type of a variable, <pre>x</pre>...",
      "q1": "console.log(",
      "q2": "x)",
      "size": 6,
      "answers": ["typeof"],
      "explanation": "<pre>typeof</pre> is followed by its <em>operand</em>. This operator is unusual in that the operand can be wrapped in parentheses &mdash; or not.",
      "displayAsCode": ["q1","answer","q2"],
      "moreInfo": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof"
    },
    {
      "id": 2110,
      "type": "TrueOrNot",
      "given": "",
      "question": "A <em>template literal</em> (also called a <em>template string</em> allows interpolation of JavaScript within a string.",
      "answer": true,
      "explanation": "Template literals are surrounded by tick marks &mdash; <pre>``</pre>",
      "displayAsCode": [],
      "moreInfo": "https://javascript.info/types"
    },
    {
      "id": 2111,
      "type": "ValidOrNot",
      "given": "",
      "question": "let msg = `Today is ${new Date()}`",
      "answer": true,
      "explanation": "Template strings allow JavaScript interpolation within the string.",
      "displayAsCode": ["question"],
      "moreInfo": "https://javascript.info/types"
    },
    {
      "id": 2112,
      "type": "ValidOrNot",
      "question": "`let guestList = 'Guests:'<br>* John<br>* Wolfgang<br>* Esmerelda<br>`",
      "given": "",
      "answer": true,
      "explanation": "Not only is this valid, but template literals have the advantage that they respect white space (such as line breaks).",
      "displayAsCode": ["question"],
      "moreInfo": "https://javascript.info/string"
    },
    {
      "id": 2113,
      "type": "ValidOrNot",
      "question": "\"let guestList = 'Guests:'<br>* John<br>* Wolfgang<br>* Esmerelda<br>\"",
      "given": "",
      "answer": false,
      "explanation": "You can only split lines, as we're doing here, with string literals, not normal strings.",
      "displayAsCode": ["question"],
      "moreInfo": "https://javascript.info/string"
    },
    {
      "id": 2114,
      "type": "FillBlank",
      "given": "You want to split a string across multiple lines with a normal string (not a string literal)...",
      "q1": "Four score and seven years ago",
      "q2": "our fathers brought forth on this continent a new nation.",
      "answers": ["\\n"],
      "explanation": "Use the back slash (<pre>\\</pre>) when you want to use one of several <em>special</em> characters. This is known as <em>escaping</em> a character. In this case, the right answer is \\n",
      "displayAsCode": [],
      "moreInfo": "https://javascript.info/string",
      "size": 2
    },
    {
      "id": 2115,
      "type": "TrueOrFalse",
      "given": "You want to use double quotes within a string that has been created with double quotes &mdash; like this: \"<pre>Amadeus was referred to by his friends as \\\"Wolfie\\\"</pre>",
      "answer": true,
      "explanation": "Use the back slash (<pre>\\</pre>) when you want to use one of several <em>special</em> characters. This is known as <em>escaping</em> a character. In this case, the right answer is \\\"",
      "displayAsCode": [],
      "moreInfo": "https://javascript.info/string",
      "size": 0
    },
    {
      "id": 2116,
      "type": "TrueOrFalse",
      "question": "If you want to insert a tab character in a normal string (not a string template), you should use the escape code<pre>\\t</pre>",
      "answer": true,
      "explanation": "Use the back slash (<pre>\\</pre>) when you want to use one of several <em>special</em> characters. This is known as <em>escaping</em> a character. In this case, the right answer is \\t",
      "displayAsCode": [],
      "moreInfo": "https://javascript.info/string",
      "size": 0
    },
    {
      "id": 2117,
      "type": "MultipleChoice",
      "given": "",
      "question": "Which one of these is <em>not</em> a JavaScript data type?",
      "choices": ["char", "object", "boolean", "symbol"],
      "answer": 0,
      "explanation": "Many languages have a <pre>char</pre> data type. JavaScript does not.",
      "displayAsCode": [],
      "moreInfo": "https://javascript.info/types"
    },
    {
      "id": 2118,
      "type": "FillBlank",
      "given": "",
      "q1": "A data type that specifies whether something is <pre>true</pre> or <pre>false</pre> is a",
      "answers": ["Boolean", "boolean"],
      "explanation": "Note that <pre>boolean</pre> data type values can <em>only</em> be <pre>true</pre> or <pre>false</pre>. Also note the lack of quotes &mdash; these are <em>not</em> strings.",
      "displayAsCode": ["answer"],
      "moreInfo": "https://javascript.info/types",
      "size": 7
    },
    {
      "id": 2119,
      "type": "TrueOrNot",
      "given": "let invited = \"false\"",
      "question": "<pre>invited</pre> has a value of type, <pre>boolean</pre>",
      "answer": false,
      "explanation": "Putting <pre>false</pre> in quotes makes this a <pre>string</pre> data type. Boolean values do not allow quotes.",
      "displayAsCode": ["given"],
      "moreInfo": "https://javascript.info/types"
    },
    {
      "id": 2120,
      "type": "FillBlank",
      "given": "You want to \"flip\" the value of a boolean value &mdash; changing <pre>true</pre> to <pre>false</pre> or <i>vice versa</i>",
      "q1": "let isInvited = ",
      "q2": "isInvited = ",
      "answers": ["!"],
      "explanation": "Using the <i>bang</i> operator (<pre>!</pre>)in this way is a common idiom.",
      "displayAsCode": ["q1", "q2", "answer"],
      "moreInfo": "https://javascript.info/types",
      "size": 1
    },
    {
      "id": 2121,
      "type": "FillBlank",
      "given": "Comparisons of values always return a boolean value. Here, use an operator to see if <pre>x</pre> is greater than <pre>y</pre>.",
      "q1": "x",
      "q2": "y ",
      "answers": [">"],
      "explanation": "",
      "displayAsCode": ["q1", "q2", "answer"],
      "moreInfo": "https://javascript.info/logical-operators",
      "size": 1
    },
    {
      "id": 2122,
      "type": "MultipleChoice",
      "given": "",
      "question": "Which of these is not a <em>primitive</em> data type?",
      "q1": "",
      "q2": "",
      "choices": ["number", "object", "string", "boolean"],
      "answer": 1,
      "answers": [""],
      "explanation": "",
      "displayAsCode": [],
      "moreInfo": "https://javascript.info/types",
      "size": 0
    },
    {
      "id": 311,
      "type": "FillBlank",
      "given": "Determine if 42 is greater than 200/4.378",
      "question": "",
      "q1": "console.log(",
      "q2": ")",
      "choices": [],
      "answer": "",
      "answers": ["42 > 200 / 4.378"],
      "explanation": "The <pre>></pre> operator is used to determine if one value is greater than another.",
      "displayAsCode": ["q1", "answer"],
      "moreInfo": "https://javascript.info/comparison",
      "size": 16
    },
    {
      "id": 312,
      "type": "FillBlank",
      "given": "Determine if 95 is less than than 64",
      "question": "",
      "q1": "console.log(",
      "q2": ")",
      "choices": [],
      "answer": "",
      "answers": ["95 < 64"],
      "explanation": "The <pre><</pre> operator is used to determine if one value is less than another.",
      "displayAsCode": ["q1", "q2", "answer"],
      "moreInfo": "https://javascript.info/comparison",
      "size": 16
    },
    {
      "id": 313,
      "type": "FillBlank",
      "given": "const secretCode = \"adi!227\"<br>\/\/Determine if <pre>secretCode</pre> is equal to \"adi!227\" using regular (non-strict) equality ",
      "question": "",
      "q1": "console.log(",
      "q2": ")",
      "choices": [],
      "answer": "",
      "answers": ["secretCode == \"adi!227\"", "\"adi!227\" == secretCode"],
      "explanation": "Regular (non-strict) equality uses double equal (<pre>==</pre>) and does not check to see if the values are of the same <em>type</em>. In general, it's safer to use strict equality triple equal (<pre>===</pre>), which checks both type <em>and</em> value.",
      "displayAsCode": ["q1", "q2","answer", "given"],
      "moreInfo": "https://javascript.info/comparison",
      "size": 24
    },
    {
      "id": 314,
      "type": "FillBlank",
      "given": "const x = 57<br>const y = 114 / 2<br>\/\/Determine if <pre>x</pre> is greater than or equal to <pre>y</pre>",
      "question": "",
      "q1": "console.log(",
      "q2": ")",
      "choices": [],
      "answer": "",
      "answers": ["x >= y"],
      "explanation": "",
      "displayAsCode": ["q1", "q2","answer", "given"],
      "moreInfo": "https://javascript.info/comparison",
      "size": 8
    },
    {
      "id": 315,
      "type": "FillBlank",
      "given": "const x = 46<br>const y = 23 +19<br>\/\/Determine if <pre>x</pre> is less than or equal to <pre>y</pre>",
      "question": "",
      "q1": "console.log(",
      "q2": ")",
      "choices": [],
      "answer": "",
      "answers": ["x <= y"],
      "explanation": "",
      "displayAsCode": ["q1", "q2","answer", "given"],
      "moreInfo": "https://javascript.info/comparison",
      "size": 8
    },
    {
      "id": 316,
      "type": "FillBlank",
      "given": "const x = true<br>const y = 1<br>\/\/Determine if <pre>x</pre> is equal to <pre>y</pre> (regular, not strict equality)",
      "question": "",
      "q1": "console.log(",
      "q2": ")",
      "choices": [],
      "answer": "",
      "answers": ["x == y"],
      "explanation": "If you actually execute this code, you'll see that the expression returns <pre>true</pre>. This is because the double equal does a <em>type conversion</em> such that <pre>true</pre> is converted to <pre>1</pre>. This is why you almost always want to use strict equality.",
      "displayAsCode": ["q1", "q2","answer", "given"],
      "moreInfo": "",
      "size": 8
    },
    {
      "id": 316,
      "type": "FillBlank",
      "given": "const x = true<br>const y = 1<br>\/\/Determine if <pre>x</pre> is equal to <pre>y</pre> (strict equality)",
      "question": "",
      "q1": "console.log(",
      "q2": ")",
      "choices": [],
      "answer": "",
      "answers": ["x === y"],
      "explanation": "If you actually execute this code, you'll see that the expression returns <pre>false</pre>. This is because the triple equal does <em>not</em> do a <em>type conversion</em>. This is why you almost always want to use strict equality.",
      "displayAsCode": ["q1", "q2","answer", "given"],
      "moreInfo": "",
      "size": 8
    },
    {
      "id": 317,
      "type": "FillBlank",
      "given": "const x = null<br>const y = undefined<br>\/\/Determine if <pre>x</pre> is equal to <pre>y</pre> (regular, non-strict equality)",
      "question": "",
      "q1": "console.log(",
      "q2": ")",
      "choices": [],
      "answer": "",
      "answers": ["x == y"],
      "explanation": "If you actually execute this code, you'll see that the expression returns <pre>true</pre>. This is because the double equal does some weird type-casting. I'm not sure the people who wrote this into the language originally knew how weird things would get. This is why you almost always want to use strict equality.",
      "displayAsCode": ["q1", "q2","answer", "given"],
      "moreInfo": "",
      "size": 8
    },
    {
      "id": 317,
      "type": "FillBlank",
      "given": "const x = null<br>const y = undefined<br>\/\/Determine if <pre>x</pre> is equal to <pre>y</pre> (strict equality)",
      "question": "",
      "q1": "console.log(",
      "q2": ")",
      "choices": [],
      "answer": "",
      "answers": ["x === y"],
      "explanation": "If you actually execute this code, you'll see that the expression returns <pre>false</pre>. Unlike with double equal, triple equal does not do some weird type-casting. This is why you almost always want to use strict equality.",
      "displayAsCode": ["q1", "q2","answer", "given"],
      "moreInfo": "",
      "size": 8
    },
    {
      "id": 318,
      "type": "FillBlank",
      "given": "const x = null<br>const y = 0<br>\/\/Determine if <pre>x</pre> is greater than or equal to <pre>y</pre>.",
      "question": "",
      "q1": "console.log(",
      "q2": ")",
      "choices": [],
      "answer": "",
      "answers": ["x >= y"],
      "explanation": "If you actually execute this code, you'll see that the expression returns <pre>true</pre>. This is because <pre>>=</pre> does some voodoo type-casting.",
      "displayAsCode": ["q1", "q2","answer", "given"],
      "moreInfo": "",
      "size": 8
    },
    {
      "id": 321,
      "type": "",
      "given": "let customerStatus = \"gold\"<br>let percentOff = customerStatus === \"gold\" ? 10 : 0",
      "question": "",
      "q1": "The <pre>percentOff</pre> number will be ",
      "q2": "",
      "choices": [],
      "answer": "",
      "answers": ["10", "10%"],
      "explanation": "This <em>conditional operator</em> evaluates the first statement: <pre>customerStatus === \"gold\"</pre>. If this evaluates to <pre>true</pre> the value immediately after the <pre>?</pre> is returned. If it evaluates to <pre>false</pre>, the value after the <pre>:</pre> is returned.",
      "displayAsCode": ["answer", "given"],
      "moreInfo": "https://javascript.info/ifelse",
      "size": 5
    },
    {
      "id": 319,
      "type": "ValidOrNot",
      "given": "",
      "question": "if 6 > 5 return true",
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": false,
      "answers": [""],
      "explanation": "The conditional portion (<pre>6 > 5</pre>) must be wrapped in parentheses.",
      "displayAsCode": ["question", "answer"],
      "moreInfo": "https://javascript.info/ifelse",
      "size": 0
    },
    {
      "id": 3110,
      "type": "ValidOrNot",
      "given": "",
      "question": "if (6 > 5) return true",
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [""],
      "explanation": "If you can fit the results of the if condition on the same line, you don't need to use <pre>{}</pre> to wrap the <pre>return true</pre>. That said, this is a bad idea, likely to cause trouble down the line: use curly braces with your if conditions.",
      "displayAsCode": ["question", "answer"],
      "moreInfo": "https://javascript.info/ifelse",
      "size": 0
    },
    {
      "id": 3111,
      "type": "ValidOrNot",
      "given": "",
      "question": "let registered = false<br>if (registered) {\/\/ do something }",
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [""],
      "explanation": "This is a common shorthand for <pre>if (registered === true)</pre>",
      "displayAsCode": ["question"],
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 3112,
      "type": "ValidOrNot",
      "given": "",
      "question": "let registered = true<br>registered = !registered",
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [""],
      "explanation": "Appending a bang (<pre>!</pre>) to a boolean value flips the value to the opposite.",
      "displayAsCode": ["question"],
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 3113,
      "type": "FillBlank",
      "given": "let registered = true<br>let x = Math.random()<br>\/\/ if x greater than 0.5, flip the value of registered",
      "question": "",
      "q1": "if (x > 0.5){<br>",
      "q2": "<br>}",
      "choices": [],
      "answer": "",
      "answers": ["registered = !registered"],
      "explanation": "Appending a bang (<pre>!</pre>) to a boolean value flips it to its opposite.",
      "displayAsCode": ["given", "q1", "q2", "answer"],
      "moreInfo": "",
      "size": 25
    },
    {
      "id": 3114,
      "type": "ValidOrNot",
      "given": "",
      "question": "let confused = !!!true",
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [""],
      "explanation": "Appending multiple <pre>!</pre> to a boolean value flips the value multiple times. In this case, confused ends up as <pre>false</pre>.",
      "displayAsCode": ["question"],
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 3115,
      "type": "ValidOrNot",
      "given": "",
      "question": "if (Math.random() > 0.5) then {<br>&nbsp;&nbsp;\/\/ do something<br>}",
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": false,
      "answers": [""],
      "explanation": "You don't use <pre>then</pre> with conditional statements.",
      "displayAsCode": ["question"],
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 3116,
      "type": "ValidOrNot",
      "given": "",
      "question": "if (Math.random() > 0.5) {<br>&nbsp;&nbsp;\/\/ do something<br>} else {<br>&nbsp;&nbsp;\/\/ do something else<br>}",
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [""],
      "explanation": "Use <pre>else</pre> to direct the action if the initial <pre>if</pre> condition is <pre>false</pre>.",
      "displayAsCode": ["question"],
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 3117,
      "type": "AllMixedUp",
      "given": "Arrange to test to see if registered is greater than unregistered",
      "question": "",
      "q1": "",
      "q2": "",
      "mixed": ["unregistered",">", ")", "registered","if", "("],
      "ordered": ["if", "(","registered", ">", "unregistered", ")"],
      "choices": [],
      "answer": "",
      "answers": [""],
      "explanation": "",
      "displayAsCode": [],
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 3118,
      "type": "FillBlank",
      "given": "<pre>let a = 1, b = 2, winner</pre><br>If a is greater than b, assign \"a wins\" to <pre>winner</pre>, otherwise assign \"b wins\" to <pre>winner</pre> using the ternary conditional expression.",
      "question": "",
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": "",
      "answers": ["winner = a > b ? \"a wins\" : \"b wins\"", "winner = a > b ? 'a wins' : 'b wins'"],
      "explanation": "",
      "displayAsCode": ["answer"],
      "moreInfo": "",
      "size": 40
    },
    {
      "id": 3119,
      "type": "TrueOrNot",
      "given": "if (1) { console.log('I guess it is true')}",
      "question": "Does this print \"I guess it is true\" to the console?",
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [""],
      "explanation": "The shorthand, <pre>if (1)</pre>, uses non-strict evaluation, converting any non-zero number to <pre>true</pre>. ",
      "displayAsCode": ["given"],
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 3220,
      "type": "FillBlank",
      "given": "<pre>let x = Math.random()</pre><br>If x is less than 0.33, log 'small'. <br>If x is greater than or equal to 0.33 but less than 0.66, log 'medium'. <br>If neither of these conditions are true, log 'large'. <br>Use curly braces <pre>{}</pre> within if conditions.",
      "question": "",
      "q1": "let x = Math.random()<br>if (x < 0.33) { console.log('small')}<br>",
      "q2": "<br>else {console.log('large')}",
      "choices": [],
      "answer": "",
      "answers": ["else if (x >=0.33 && x < 0.66) {console.log('medium')}","else if (x >=0.33 && x < 0.66) {console.log(\"medium\")}"],
      "explanation": "<pre>else if</pre> is your friend here.",
      "displayAsCode": [ "answer", "q1", "q2"],
      "moreInfo": "",
      "size": 60
    },
    {
      "id": ,
      "type": "",
      "given": "",
      "question": "",
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": "",
      "answers": [""],
      "explanation": "",
      "displayAsCode": [],
      "moreInfo": "",
      "size": 0
    },
    {
      "id": ,
      "type": "",
      "given": "",
      "question": "",
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": "",
      "answers": [""],
      "explanation": "",
      "displayAsCode": [],
      "moreInfo": "",
      "size": 0
    },
    {
      "id": ,
      "type": "",
      "given": "",
      "question": "",
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": "",
      "answers": [""],
      "explanation": "",
      "displayAsCode": [],
      "moreInfo": "",
      "size": 0
    },
    {
      "id": ,
      "type": "",
      "given": "",
      "question": "",
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": "",
      "answers": [""],
      "explanation": "",
      "displayAsCode": [],
      "moreInfo": "",
      "size": 0
    },
    {
      "id": ,
      "type": "",
      "given": "",
      "question": "",
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": "",
      "answers": [""],
      "explanation": "",
      "displayAsCode": [],
      "moreInfo": "",
      "size": 0
    },
    {
      "id": ,
      "type": "",
      "given": "",
      "question": "",
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": "",
      "answers": [""],
      "explanation": "",
      "displayAsCode": [],
      "moreInfo": "",
      "size": 0
    },
    {
      "id": ,
      "type": "",
      "given": "",
      "question": "",
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": "",
      "answers": [""],
      "explanation": "",
      "displayAsCode": [],
      "moreInfo": "",
      "size": 0
    },
    {
      "id": ,
      "type": "",
      "given": "",
      "question": "",
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": "",
      "answers": [""],
      "explanation": "",
      "displayAsCode": [],
      "moreInfo": "",
      "size": 0
    },
  ]
}