{
  "questions": [
    {
      "id": 111,
      "type": "ValidOrNot",
      "question": "alert: 'Hello'",
      "answer": false,
      "displayAsCode": ["question"]
    },
    {
      "id": 811,
      "type": "MultipleChoice",
      "question": "Which one of these will print to the browser console?",
      "choices": ["print('hello')","console('hello)","console.log('hello')", "log('hello')"],
      "displayAsCode": ["choices"],
      "answer": 2
    },
    {
      "id": 112,
      "type": "TrueOrFalse",
      "question": "JavaScript is a strongly-typed language",
      "answer": false,
      "displayAsCode": []
    },
    {
      "id": 113,
      "type": "TrueOrFalse",
      "question": "JavaScript is a case-sensitive language",
      "answer": true,
      "displayAsCode": []
    },
    {
      "id": 114,
      "type": "ValidOrNot",
      "question": "let message //receive from API",
      "answer": true,
      "displayAsCode": ["question"],
      "explanation": "Here the variable is declared but not given a value, making it undefined."
    },
    {
      "id": 115,
      "type": "ValidOrNot",
      "question": "let learn,to,code",
      "answer": true,
      "displayAsCode": ["question"],
      "explanation": "It looks odd, yes, but it's actually fine. Three separate varibles are declared but not given values."
    },
    {
      "id": 116,
      "type": "MultipleChoice",
      "question": "Which one of these is not a JavaScript reserved word?",
      "choices": ["const", "instance", "short", "with"],
      "answer": 1,
      "displayAsCode": ["choices"]
    },
    {
      "id": 117,
      "type": "ValidOrNot",
      "question": "const address = {<br />&nbsp;&nbsp;street: '123 Rainbow',<br />&nbsp;&nbsp;city: 'Las Vegas'<br />&nbsp;&nbsp;state: 'NV'<br />}",
      "answer": true,
      "displayAsCode": ["question"],
      "explanation": "This is just standard object literal notation."
    },
    {
      "id": 118,
      "type": "MultipleChoice",
      "given": "const name = 'Mickey'<br />name='Minnie'<br /><br />console.log(name)",
      "question": "Run the code and...",
      "choices": ["Console prints \"Mickey\"", "Console prints \"Minnie\"", "Console prints \"MickeyMinnie\"", "Console displays an error"],
      "answer": "3",
      "displayAsCode": ["given"],
      "explanation": "You're not allowed to change the value of a variabled declared with const. This statement is a little misleading, as you can change the properties of an object or the elements in an array, for example."
    },
    {
      "id": 119,
      "type": "ValidOrNot",
      "question": "let team = \"New York Yankees\"<br />let team = \"San Diego Padres\"",
      "answer": false,
      "displayAsCode": ["question"],
      "explanation": "A variable can be declared only once. Here, it's been declared twice, producing an error."
    },
    {
      "id": 1120,
      "type": "ValidOrNot",
      "question": "let $ = 'Mickey'",
      "answer": true
    },
    {
      "id": 1121,
      "type": "TrueOrFalse",
      "given": "const myName = \"Mickey\"<br />const MyName = \"Mickey\"<br />myName === Myname",
      "question": "This code returns true",
      "answer": true,
      "displayAsCode": ["given"],
      "explanation": "Even though JavaScript is case-sensitive, and the two variables are separate variables, their values are the same &mdash; and so the code returns true."
    },
    {
      "id": 1122,
      "type": "FillBlank",
      "q1": "Code written to provide an explanation or instruction, but which is not evaluated or displayed is called a ",
      "q2": "",
      "size": 8,
      "answers": ["comment"],
      "explanation": "A comment. There are both single- and multi-line versions of comments.",
      "displayAsCode": [],
      "moreInfo": "https://javascript.info/comments"
    },
    {
      "id": 1123,
      "type": "FillBlank",
      "given": "/*<br />Make sure the turbo-blaster is loaded<br />before engaging the laser macrifier.<br />*/",
      "q1": "The above code is a ",
      "q2": " comment",
      "answers": ["multi-line", "multiple-line", "multi line", "multiple line"],
      "explanation": "Any of these would be correct: 'multi line, multi-line, multiple line, multiple-line'",
      "displayAsCode": ["given"],
      "size": 12,
      "moreInfo": "https://javascript.info/comments"
    },
    {
      "id": 1124,
      "type": "FillBlank",
      "given": "Multiply 5 times 7",
      "q1": 5,
      "q2": 7,
      "answers": ["*"],
      "explanation": "",
      "moreInfo": "https://javascript.info/operators",
      "size": 1,
      "displayAsCode": ["q1", "q2", "answer"]
    },
    {
      "id": 1125,
      "type": "MultipleChoice",
      "question": "What operator will give you the <i>remainder</i> left from dividing one number by another?",
      "choices": ["%", "~", "^", "#"],
      "answer": "0",
      "explanation": "",
      "moreInfo": "https://javascript.info/operators",
      "displayAsCode": ["choices"]
    },
    {
      "id": 1126,
      "type": "FillBlank",
      "given": "Raise 4 to the 3d power",
      "q1": 4,
      "q2": 3,
      "answers": ["**"],
      "explanation": "",
      "moreInfo": "https://javascript.info/operators",
      "size": 1,
      "displayAsCode": ["q1", "q2", "answer"]
    },
    {
      "id": 1127,
      "type": "FillBlank",
      "given": "Join two strings together to form a longer string",
      "q1": "\"Time flies like an arrow",
      "q2": ";fruit flies like a banana\"",
      "answers": ["+"],
      "explanation": "The + operator is used both for addition and for joining strings &mdash; a process known as <em>concatenation</em>",
      "moreInfo": "https://javascript.info/operators",
      "size": 1,
      "displayAsCode": ["answer"]
    },
    {
      "id": 1128,
      "type": "FillBlank",
      "given": "Provide the operator that will <em>increment</em> a variable by 1 <em>after</em> that variable has been evaluated.",
      "q1": "let x = 99; x",
      "q2": "",
      "answers": ["++"],
      "explanation": "++ (when used in this position) adds 1 to a number after it's been evaluated. This is referred to as a <em>postfix</em> operator.",
      "moreInfo": "https://javascript.info/operators",
      "size": 2,
      "displayAsCode": ["q1","answer"]
    },
    {
      "id": 1129,
      "type": "FillBlank",
      "given": "Provide the operator that will <em>increment</em> a variable by 1 <em>before</em> that variable has been evaluated.",
      "q1": "let x = 99;",
      "q2": "x",
      "answers": ["++"],
      "explanation": "++ (when used in this position) adds 1 to a number before it's been evaluated. This is referred to as a <em>prefix</em> operator.",
      "moreInfo": "https://javascript.info/operators",
      "size": 2,
      "displayAsCode": ["q1","q2","answer"]
    },
    {
      "id": 1130,
      "type": "FillBlank",
      "given": "Provide the operator that will <em>decrement</em> a variable by 1 <em>after</em> that variable has been evaluated.",
      "q1": "let x = 99; x",
      "q2": "",
      "answers": ["--"],
      "explanation": "-- (when used in this position) subtracts 1 from a number after it's been evaluated. This is referred to as a <em>postfix</em> operator.",
      "moreInfo": "https://javascript.info/operators",
      "size": 2,
      "displayAsCode": ["q1","answer"]
    },
    {
      "id": 1131,
      "type": "FillBlank",
      "given": "Provide the operator that will <em>decrement</em> a variable by 1 <em>before</em> that variable has been evaluated.",
      "q1": "let x = 99;",
      "q2": "x",
      "answers": ["--"],
      "explanation": "-- (when used in this position) adds 1 to a number before it's been evaluated. This is referred to as a <em>prefix</em> operator.",
      "moreInfo": "https://javascript.info/operators",
      "size": 2,
      "displayAsCode": ["q1","q2","answer"]
    },
    {
      "id": 1132,
      "type": "FillBlank",
      "given": "Provide the <em>shortcut</em> operator that will add 7 to x",
      "q1": "let x = 99; x",
      "q2": "x",
      "answers": ["+="],
      "explanation": "I refer to it as a <em>shortcut</em> operator because it's a shorter version of </pre>x = x + 7</pre>",
      "moreInfo": "https://javascript.info/operators",
      "size": 2,
      "displayAsCode": ["q1","q2","answer"]
    },
    {
      "id": 1133,
      "type": "FillBlank",
      "given": "Assume <pre>addCustomer</pre> returns either <pre>true</pre> or <pre>false</pre>. Use an operator that converts Boolean (true|false) values into numbers: 0 if false, 1 if true.",
      "q1": "let customerAdded = addCustomer()<br />custmomers += ",
      "q2": "customerAdded",
      "answers": ["+"],
      "explanation": "Another use for the plus operator: when used in this way, it automatically converts Boolean values into corresponding numeric ones.",
      "moreInfo": "https://javascript.info/operators",
      "size": 1,
      "displayAsCode": ["q1","q2","answer"]
    },
    {
      "id": 1134,
      "type": "ValidOrNot",
      "question": "let a = b = c = 2 + 2",
      "answer": true,
      "displayAsCode": ["question"],
      "moreInfo":"https://javascript.info/operators",
      "explanation": "Evaluation begins at the farthest <b>right</b> and works backwards, so the first operation adds 2 plus 2 to arrive at 4. That value is then assigned to the variable, c. Moving backwards one operation, the value of c (which is 4) is assigned to b. Then once again, back up and assign the value of b (4) to the variable, a."
    },
    {
      "id": 1135,
      "type": "FillBlank",
      "given": "Assume <pre>addCustomer</pre> returns either <pre>true</pre> or <pre>false</pre>. Use an operator that converts Boolean (true|false) values into numbers: 0 if false, 1 if true.",
      "q1": "let customerAdded = addCustomer()<br />custmomers += ",
      "q2": "customerAdded",
      "answers": ["+"],
      "explanation": "Another use for the plus operator: when used in this way, it automatically converts Boolean values into corresponding numeric ones.",
      "moreInfo": "https://javascript.info/operators",
      "size": 1,
      "displayAsCode": ["q1","q2","answer"]
    },
    {
      "id": 1136,
      "type": "TrueOrFalse",
      "question": "Just as there is a <pre>+=</pre> operator, there are also <pre>*=, -=</pre>, and <pre>/=</pre> operators.",
      "answer": true,
      "displayAsCode": []
    },
    {
      "id": 1137 ,
      "type": "TrueOrFalse",
      "question": "To test for strict equality (both value <em>and</em> type), use the <pre>~=</pre> operator.",
      "answer": false,
      "explanation": "For strict equality, use the 'triple-equals' operator: ==="
    },
    {
      "id": 1138,
      "type": "MultipleChoice",
      "question": "Which one of these operators perform a <em>not-equality</em> check?",
      "choices": ["~=", "-=", "!==", "^="],
      "displayAsCode": ["choices"],
      "answer": 2,
      "explanation": "For non-equality, use the '!==' operator. The ! is pronounced 'bang'."
    },
    {
      "id": 1139 ,
      "type": "TrueOrFalse",
      "question": "You should <em>always</em> end a statement with a semi-colon.",
      "answer": false,
      "explanation": "Most of the time, JavaScript can imply the semi-colon at a line break. There are rare exceptions to this, however -- especially in the case of functions that <pre>return</pre> a value.",
      "moreInfo": "https://javascript.info/structure"
    },
    {
      "id": 1140 ,
      "type": "TrueOrFalse",
      "question": "Statements are syntax constructs and commands that perform actions.",
      "answer": true,
      "explanation": "",
      "moreInfo": "https://javascript.info/structure"
    },
    {
      "id": 1141 ,
      "type": "TrueOrFalse",
      "question": "Multiple statements can be placed on the same line if separated with a semi-colon",
      "answer": true,
      "explanation": "",
      "moreInfo": "https://javascript.info/structure"
    },
    {
      "id": 1142,
      "type": "ValidOrNot",
      "question": "let customersAdded = 0 // total for this salesperson",
      "answer": true,
      "displayAsCode": ["question"],
      "moreInfo": "https://javascript.info/structure"
    },
    {
      "id": 1143,
      "type": "TrueOrFalse",
      "given": "let a = 5<br />let b = 10/5<br />console.assert(a === b)",
      "question": "You can use <pre>console.assert</pre> to test the truth of assertions.",
      "answer": true,
      "explanation": "This is a little-used function of the console object. You can think of it as a poor-man's test. However, be aware that assertions that are true will print nothing to the console; only false assertions will be displayed."
    },
    {
      "id": 1144,
      "type": "MultipleChoice",
      "question": "<pre>console.table</pre>...",
      "choices": ["is invalid JavaScript", "counts the number of cells in an HTML table", "stashes code into localStorage", "displays data in a tabular format"],
      "displayAsCode": [],
      "answer": 3
    },
    {
      "id": 1145,
      "type": "TrueOrFalse",
      "question": "In almost all cases, the use of <pre>let</pre> or <pre>const</pre> is preferable to <pre>var</pre> when declaring variables.",
      "answer": true,
      "explanation": "Unless you have a very specific need for the behavior <pre>var</pre> produces (and you'll know if you do), you're better off with either <pre>let</pre> or <pre>const</pre>."
    },
    {
      "id": 1146,
      "type": "TrueOrFalse",
      "given": "let beginning = 42<br />let ending = \"24\"<br />console.log(beginning + ending)",
      "question": "Prints 66 to the console",
      "answer": false,
      "explanation": "Since \"ending\" is a string, the plus operator will be used in concatenation mode: the console will print out \"4224\"",
      "displayAsCode": ["given"]
    },
    {
      "id": 1147,
      "type": "ValidOrNot",
      "question": "const 2dNotice = false",
      "answer": false,
      "explanation": "JavaScript variables can't begin with a number",
      "displayAsCode": ["question"]
    },
    {
      "id": 1148,
      "type": "ValidOrNot",
      "question": "const second notice = false",
      "answer": false,
      "explanation": "JavaScript variables can't have a space in them",
      "displayAsCode": ["question"]
    },
    {
      "id": 211,
      "type": "TrueOrFalse",
      "question": "The <pre>null</pre> value means \"nothing\" or \"value unknown\"",
      "answer": true,
      "explanation": "If you use <pre>null</pre>, make sure you don't surround it in quotes. Doing so would turn the value into a string.",
      "displayAsCode": []
    },
    {
      "id": 212,
      "type": "TrueOrFalse",
      "question": "The <pre>undefined</pre> value means \"value has not been assigned\"",
      "answer": true,
      "explanation": "If you use <pre>undefined</pre>, make sure you don't surround it in quotes. Doing so would turn the value into a string.",
      "displayAsCode": []
    },
    {
      "id": 213,
      "type": "FillBlank",
      "given": "",
      "question": "",
      "q1": "<pre>typeof 1500n</pre> returns",
      "q2": "",
      "choices": [],
      "answer": "",
      "answers": ["BigInt", "bigint", "Bigint"],
      "explanation": "The presence of <pre>n</pre> on the end makes it a <pre>bigint</pre>, not the actual number size itself.",
      "displayAsCode": ["answer"],
      "moreInfo": "https://javascript.info/types",
      "size": 6
    },
    {
      "id": 214,
      "type": "FillBlank",
      "given": "",
      "question": "",
      "q1": "<pre>typeof 20000000</pre> returns",
      "q2": "",
      "choices": [],
      "answer": "",
      "answers": ["number", "Number"],
      "explanation": "Even though the number is large, it's not a <pre>bigint</pre> since there is no <pre>n</pre> on the end of the number",
      "displayAsCode": ["answer"],
      "moreInfo": "",
      "size": 6
    },
    {
      "id": 215,
      "type": "FillBlank",
      "given": "",
      "question": "",
      "q1": "<pre>typeof \"seven\"</pre> returns",
      "q2": "",
      "choices": [],
      "answer": "",
      "answers": ["string", "String"],
      "explanation": "Anything wrapped in quotes is a string.",
      "displayAsCode": ["answer"],
      "moreInfo": "",
      "size": 6
    },
    {
      "id": 216,
      "type": "FillBlank",
      "given": "",
      "question": "",
      "q1": "<pre>typeof \`seven\`</pre> returns",
      "q2": "",
      "choices": [],
      "answer": "",
      "answers": ["string", "String"],
      "explanation": "Anything wrapped in quotes (or tick marks) is a string.",
      "displayAsCode": ["answer"],
      "moreInfo": "",
      "size": 6
    },
    {
      "id": 217,
      "type": "FillBlank",
      "given": "",
      "question": "",
      "q1": "<pre>typeof alert</pre> returns",
      "q2": "",
      "choices": [],
      "answer": "",
      "answers": ["function"],
      "explanation": "",
      "displayAsCode": ["answer"],
      "moreInfo": "https://javascript.info/types",
      "size": 8
    },
    {
      "id": 218,
      "type": "FillBlank",
      "given": "",
      "question": "",
      "q1": "<pre>typeof null</pre> returns",
      "q2": "",
      "choices": [],
      "answer": "",
      "answers": ["object"],
      "explanation": "This is somewhat curious, as <pre>typeof undefined</pre> returns <pre>undefined</pre>. In the link provided, the author identifies this as a mistake, held over from the early days of JavaScript. But there's much weirder stuff than this in JavaScript!",
      "displayAsCode": ["answer"],
      "moreInfo": "https://javascript.info/types",
      "size": 6
    },
    {
      "id": 219,
      "type": "FillBlank",
      "given": "",
      "question": "",
      "q1": "<pre>typeof undefined</pre> returns",
      "q2": "",
      "choices": [],
      "answer": "",
      "answers": ["undefined"],
      "explanation": "This is somewhat curious, as <pre>typeof null</pre> returns <pre>object</pre>. But there's much weirder stuff than this in JavaScript!",
      "displayAsCode": ["answer"],
      "moreInfo": "https://javascript.info/types",
      "size": 9
    },
    {
      "id": 2110,
      "type": "FillBlank",
      "given": "",
      "question": "",
      "q1": "<pre>typeof true</pre> returns",
      "q2": "",
      "choices": [],
      "answer": "",
      "answers": ["boolean"],
      "explanation": "",
      "displayAsCode": ["answer"],
      "moreInfo": "https://javascript.info/types",
      "size": 7
    },
    {
      "id": 2111,
      "type": "FillBlank",
      "given": "",
      "question": "",
      "q1": "<pre>typeof false</pre> returns",
      "q2": "",
      "choices": [],
      "answer": "",
      "answers": ["boolean"],
      "explanation": "",
      "displayAsCode": ["answer"],
      "moreInfo": "https://javascript.info/types",
      "size": 7
    },
    {
      "id": 2112,
      "type": "FillBlank",
      "given": "",
      "question": "",
      "q1": "<pre>typeof Math</pre> returns",
      "q2": "",
      "choices": [],
      "answer": "",
      "answers": ["object"],
      "explanation": "",
      "displayAsCode": ["answer"],
      "moreInfo": "https://javascript.info/types",
      "size": 6
    },
    {
      "id": 2113,
      "type": "FillBlank",
      "given": "",
      "question": "",
      "q1": "<pre>typeof []</pre> returns",
      "q2": "",
      "choices": [],
      "answer": "",
      "answers": ["object"],
      "explanation": "Although we always refer to this as an <em>array</em>, from JavaScript's POV, it's just an object.",
      "displayAsCode": ["answer"],
      "moreInfo": "https://javascript.info/types",
      "size": 6
    },
    {
      "id": 2114,
      "type": "FillBlank",
      "given": "",
      "question": "",
      "q1": "<pre>typeof {}</pre> returns",
      "q2": "",
      "choices": [],
      "answer": "",
      "answers": ["object"],
      "explanation": "",
      "displayAsCode": ["answer"],
      "moreInfo": "https://javascript.info/types",
      "size": 6
    },
    {
      "id": 2115,
      "type": "FillBlank",
      "given": "const add = (a,b) => {return a + b}",
      "question": "",
      "q1": "<pre>typeof add</pre> returns",
      "q2": "",
      "choices": [],
      "answer": "",
      "answers": ["function"],
      "explanation": "",
      "displayAsCode": ["answer", "given"],
      "moreInfo": "https://javascript.info/types",
      "size": 8
    },
    {
      "id": 2116,
      "type": "FillBlank",
      "given": "const array = [true, 5, \"tree\", [], {}]",
      "question": "",
      "q1": "<pre>typeof array</pre> returns",
      "q2": "",
      "choices": [],
      "answer": "",
      "answers": ["object"],
      "explanation": "As you can see, arrays (even though <pre>typeof</pre> correctly identifies it as an <pre>object</pre>) can hold values of different types.",
      "displayAsCode": ["answer", "given"],
      "moreInfo": "https://javascript.info/types",
      "size": 7
    },
    {
      "id": 121,
      "type": "ValidOrNot",
      "question": "let name = \"Mickey\"<br />let greeting = `Hello, ${name}`",
      "answer": true,
      "explanation": "Tick marks indicate a <em>template string</em>, in which JavaScript expressions can be interpreted when placed inside <pre>${</pre> and <pre>}</pre>",
      "displayAsCode": ["question"]
    },
    {
      "id": 2117,
      "type": "TrueOrFalse",
      "question": "Because JavaScript is not a strongly-typed language, it has no concept of <em>data types</em>",
      "answer": false,
      "explanation": "Even though JavaScript is a weakly-typed language, it still has data types.",
      "displayAsCode": []
    },
    {
      "id": 212,
      "type": "MultipleChoice",
      "question": "Which one of these is <em>not</am> a JavaScript data type?",
      "choices": ["string", "uri", "function", "map"],
      "displayAsCode": [],
      "answer": 1,
      "explanation": "string, function, and map are all JavaScript data types. uri, on the other hand, is not."
    },
    {
      "id": 2118,
      "type": "MultipleChoice",
      "question": "Which one of these is <em>not</em> a JavaScript data type?",
      "choices": ["set", "object", "number", "conditional"],
      "displayAsCode": [],
      "answer": 3,
      "explanation": "set, object, and number are all JavaScript data types. conditional, on the other hand, is not."
    },
    {
      "id": 2119,
      "type": "FillBlank",
      "q1": "A data type that is a set of statements that performs a task or calculates a value is called a ",
      "answers": ["function"],
      "explanation": "",
      "displayAsCode": ["answer"],
      "size": 8
    },
    {
      "id": 2120,
      "type": "MultipleChoice",
      "given": "const catYears = 54/0",
      "question": "This code will return what data type?",
      "choices": ["NaN", "string", "Error", "number"],
      "answer": "3",
      "explanation": "This is an odd one. Dividing by 0 returns <pre>Infinity</pre>, which is actually a number.",
      "displayAsCode": ["choices", "given"]
    },
    {
      "id": 2121,
      "type": "ValidOrNot",
      "given": "",
      "question": "const x = NaN",
      "answer": true,
      "explanation": "<pre>NaN</pre>, short for <em>Not a Number</em>, is usually encountered as the result of a mathematical operation that goes awry, but we can, in fact, set a variable to <pre>NaN</pre>. Why someone would <em>want</em> to do this is a mystery.",
      "displayAsCode": ["question"],
      "moreInfo": ""
    },
    {
      "id": 2122,
      "type": "FillBlank",
      "given": "The largest value of a number data type is (2<sup>53</sup> - 1) which is 9007199254740991. To use an even larger value, append the value with...",
      "q1": "let incrediblyBigNumber = 5487895612354778954562541",
      "answers": ["n"],
      "size": 1,
      "explanation": "This is a new data type in JavaScript: <b>BigInt</b>. To use it, append <pre>n</pre> to the value.",
      "displayAsCode": ["q1"],
      "moreInfo": "https://javascript.info/bigint"
    },
    {
      "id": 2123,
      "type": "FillBlank",
      "given": "'Mickey' / 7",
      "q1": "Running this code will return",
      "answers": ["NaN"],
      "size": 3,
      "explanation": "You might think it would produce an error, but instead, we get <pre>NaN</pre> &mdash; short for <em>Not a Number</em>",
      "displayAsCode": ["given"],
      "moreInfo": "https://javascript.info/types"
    },
    {
      "id": 2124,
      "type": "FillBlank",
      "given": "You want to find the data type of a variable, <pre>x</pre>...",
      "q1": "console.log(",
      "q2": "x)",
      "size": 6,
      "answers": ["typeof"],
      "explanation": "<pre>typeof</pre> is followed by its <em>operand</em>. This operator is unusual in that the operand can be wrapped in parentheses &mdash; or not.",
      "displayAsCode": ["q1","answer","q2"],
      "moreInfo": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof"
    },
    {
      "id": 2125,
      "type": "TrueOrFalse",
      "given": "",
      "question": "A <em>template literal</em> (also called a <em>template string</em> allows interpolation of JavaScript within a string.",
      "answer": true,
      "explanation": "Template literals are surrounded by tick marks &mdash; <pre>``</pre>",
      "displayAsCode": [],
      "moreInfo": "https://javascript.info/types"
    },
    {
      "id": 2126,
      "type": "ValidOrNot",
      "given": "",
      "question": "let msg = `Today is ${new Date()}`",
      "answer": true,
      "explanation": "Template strings allow JavaScript interpolation within the string.",
      "displayAsCode": ["question"],
      "moreInfo": "https://javascript.info/types"
    },
    {
      "id": 2127,
      "type": "ValidOrNot",
      "question": "`let guestList = 'Guests:'<br>* John<br>* Wolfgang<br>* Esmerelda<br>`",
      "given": "",
      "answer": true,
      "explanation": "Not only is this valid, but template literals have the advantage that they respect white space (such as line breaks).",
      "displayAsCode": ["question"],
      "moreInfo": "https://javascript.info/string"
    },
    {
      "id": 2128,
      "type": "ValidOrNot",
      "question": "\"let guestList = 'Guests:'<br>* John<br>* Wolfgang<br>* Esmerelda<br>\"",
      "given": "",
      "answer": false,
      "explanation": "You can only split lines, as we're doing here, with string literals, not normal strings.",
      "displayAsCode": ["question"],
      "moreInfo": "https://javascript.info/string"
    },
    {
      "id": 2129,
      "type": "FillBlank",
      "given": "You want to split a string across multiple lines with a normal string (not a string literal)...",
      "q1": "Four score and seven years ago",
      "q2": "our fathers brought forth on this continent a new nation.",
      "answers": ["\\n"],
      "explanation": "Use the back slash (<pre>\\</pre>) when you want to use one of several <em>special</em> characters. This is known as <em>escaping</em> a character. In this case, the right answer is \\n",
      "displayAsCode": [],
      "moreInfo": "https://javascript.info/string",
      "size": 2
    },
    {
      "id": 2130,
      "type": "TrueOrFalse",
      "given": "You want to use double quotes within a string that has been created with double quotes &mdash; like this: \"<pre>Amadeus was referred to by his friends as \\\"Wolfie\\\"</pre>",
      "answer": true,
      "explanation": "Use the back slash (<pre>\\</pre>) when you want to use one of several <em>special</em> characters. This is known as <em>escaping</em> a character. In this case, the right answer is \\\"",
      "displayAsCode": [],
      "moreInfo": "https://javascript.info/string",
      "size": 0
    },
    {
      "id": 2131,
      "type": "TrueOrFalse",
      "question": "If you want to insert a tab character in a normal string (not a string template), you should use the escape code<pre>\\t</pre>",
      "answer": true,
      "explanation": "Use the back slash (<pre>\\</pre>) when you want to use one of several <em>special</em> characters. This is known as <em>escaping</em> a character. In this case, the right answer is \\t",
      "displayAsCode": [],
      "moreInfo": "https://javascript.info/string",
      "size": 0
    },
    {
      "id": 2132,
      "type": "MultipleChoice",
      "given": "",
      "question": "Which one of these is <em>not</em> a JavaScript data type?",
      "choices": ["char", "object", "boolean", "symbol"],
      "answer": 0,
      "explanation": "Many languages have a <pre>char</pre> data type. JavaScript does not.",
      "displayAsCode": [],
      "moreInfo": "https://javascript.info/types"
    },
    {
      "id": 2133,
      "type": "FillBlank",
      "given": "",
      "q1": "A data type that specifies whether something is <pre>true</pre> or <pre>false</pre> is a",
      "answers": ["Boolean", "boolean"],
      "explanation": "Note that <pre>boolean</pre> data type values can <em>only</em> be <pre>true</pre> or <pre>false</pre>. Also note the lack of quotes &mdash; these are <em>not</em> strings.",
      "displayAsCode": ["answer"],
      "moreInfo": "https://javascript.info/types",
      "size": 7
    },
    {
      "id": 2134,
      "type": "TrueOrFalse",
      "given": "let invited = \"false\"",
      "question": "<pre>invited</pre> has a value of type, <pre>boolean</pre>",
      "answer": false,
      "explanation": "Putting <pre>false</pre> in quotes makes this a <pre>string</pre> data type. Boolean values do not allow quotes.",
      "displayAsCode": ["given"],
      "moreInfo": "https://javascript.info/types"
    },
    {
      "id": 2135,
      "type": "FillBlank",
      "given": "You want to \"flip\" the value of a boolean value &mdash; changing <pre>true</pre> to <pre>false</pre> or <i>vice versa</i>",
      "q1": "let isInvited = ",
      "q2": "isInvited = ",
      "answers": ["!"],
      "explanation": "Using the <i>bang</i> operator (<pre>!</pre>)in this way is a common idiom.",
      "displayAsCode": ["q1", "q2", "answer"],
      "moreInfo": "https://javascript.info/types",
      "size": 1
    },
    {
      "id": 2136,
      "type": "FillBlank",
      "given": "Comparisons of values always return a boolean value. Here, use an operator to see if <pre>x</pre> is greater than <pre>y</pre>.",
      "q1": "x",
      "q2": "y ",
      "answers": [">"],
      "explanation": "",
      "displayAsCode": ["q1", "q2", "answer"],
      "moreInfo": "https://javascript.info/logical-operators",
      "size": 1
    },
    {
      "id": 2137,
      "type": "MultipleChoice",
      "given": "",
      "question": "Which of these is not a <em>primitive</em> data type?",
      "q1": "",
      "q2": "",
      "choices": ["number", "object", "string", "boolean"],
      "answer": 1,
      "answers": [""],
      "explanation": "",
      "displayAsCode": [],
      "moreInfo": "https://javascript.info/types",
      "size": 0
    },
    {
      "id": 311,
      "type": "FillBlank",
      "given": "Determine if 42 is greater than 200/4.378",
      "question": "",
      "q1": "console.log(",
      "q2": ")",
      "choices": [],
      "answer": "",
      "answers": ["42 > 200 / 4.378"],
      "explanation": "The <pre>></pre> operator is used to determine if one value is greater than another.",
      "displayAsCode": ["q1", "answer"],
      "moreInfo": "https://javascript.info/comparison",
      "size": 16
    },
    {
      "id": 312,
      "type": "FillBlank",
      "given": "Determine if 95 is less than than 64",
      "question": "",
      "q1": "console.log(",
      "q2": ")",
      "choices": [],
      "answer": "",
      "answers": ["95 < 64"],
      "explanation": "The <pre><</pre> operator is used to determine if one value is less than another.",
      "displayAsCode": ["q1", "q2", "answer"],
      "moreInfo": "https://javascript.info/comparison",
      "size": 16
    },
    {
      "id": 313,
      "type": "FillBlank",
      "given": "const secretCode = \"adi!227\"<br>\/\/Determine if <pre>secretCode</pre> is equal to \"adi!227\" using regular (non-strict) equality ",
      "question": "",
      "q1": "console.log(",
      "q2": ")",
      "choices": [],
      "answer": "",
      "answers": ["secretCode == \"adi!227\"", "\"adi!227\" == secretCode"],
      "explanation": "Regular (non-strict) equality uses double equal (<pre>==</pre>) and does not check to see if the values are of the same <em>type</em>. In general, it's safer to use strict equality triple equal (<pre>===</pre>), which checks both type <em>and</em> value.",
      "displayAsCode": ["q1", "q2","answer", "given"],
      "moreInfo": "https://javascript.info/comparison",
      "size": 24
    },
    {
      "id": 314,
      "type": "FillBlank",
      "given": "const x = 57<br>const y = 114 / 2<br>\/\/Determine if <pre>x</pre> is greater than or equal to <pre>y</pre>",
      "question": "",
      "q1": "console.log(",
      "q2": ")",
      "choices": [],
      "answer": "",
      "answers": ["x >= y"],
      "explanation": "",
      "displayAsCode": ["q1", "q2","answer", "given"],
      "moreInfo": "https://javascript.info/comparison",
      "size": 8
    },
    {
      "id": 315,
      "type": "FillBlank",
      "given": "const x = 46<br>const y = 23 +19<br>\/\/Determine if <pre>x</pre> is less than or equal to <pre>y</pre>",
      "question": "",
      "q1": "console.log(",
      "q2": ")",
      "choices": [],
      "answer": "",
      "answers": ["x <= y"],
      "explanation": "",
      "displayAsCode": ["q1", "q2","answer", "given"],
      "moreInfo": "https://javascript.info/comparison",
      "size": 8
    },
    {
      "id": 316,
      "type": "FillBlank",
      "given": "const x = true<br>const y = 1<br>\/\/Determine if <pre>x</pre> is equal to <pre>y</pre> (regular, not strict equality)",
      "question": "",
      "q1": "console.log(",
      "q2": ")",
      "choices": [],
      "answer": "",
      "answers": ["x == y"],
      "explanation": "If you actually execute this code, you'll see that the expression returns <pre>true</pre>. This is because the double equal does a <em>type conversion</em> such that <pre>true</pre> is converted to <pre>1</pre>. This is why you almost always want to use strict equality.",
      "displayAsCode": ["q1", "q2","answer", "given"],
      "moreInfo": "",
      "size": 8
    },
    {
      "id": 317,
      "type": "FillBlank",
      "given": "const x = true<br>const y = 1<br>\/\/Determine if <pre>x</pre> is equal to <pre>y</pre> (strict equality)",
      "question": "",
      "q1": "console.log(",
      "q2": ")",
      "choices": [],
      "answer": "",
      "answers": ["x === y"],
      "explanation": "If you actually execute this code, you'll see that the expression returns <pre>false</pre>. This is because the triple equal does <em>not</em> do a <em>type conversion</em>. This is why you almost always want to use strict equality.",
      "displayAsCode": ["q1", "q2","answer", "given"],
      "moreInfo": "",
      "size": 8
    },
    {
      "id": 318,
      "type": "FillBlank",
      "given": "const x = null<br>const y = undefined<br>\/\/Determine if <pre>x</pre> is equal to <pre>y</pre> (regular, non-strict equality)",
      "question": "",
      "q1": "console.log(",
      "q2": ")",
      "choices": [],
      "answer": "",
      "answers": ["x == y"],
      "explanation": "If you actually execute this code, you'll see that the expression returns <pre>true</pre>. This is because the double equal does some weird type-casting. I'm not sure the people who wrote this into the language originally knew how weird things would get. This is why you almost always want to use strict equality.",
      "displayAsCode": ["q1", "q2","answer", "given"],
      "moreInfo": "",
      "size": 8
    },
    {
      "id": 319,
      "type": "FillBlank",
      "given": "const x = null<br>const y = undefined<br>\/\/Determine if <pre>x</pre> is equal to <pre>y</pre> (strict equality)",
      "question": "",
      "q1": "console.log(",
      "q2": ")",
      "choices": [],
      "answer": "",
      "answers": ["x === y"],
      "explanation": "If you actually execute this code, you'll see that the expression returns <pre>false</pre>. Unlike with double equal, triple equal does not do some weird type-casting. This is why you almost always want to use strict equality.",
      "displayAsCode": ["q1", "q2","answer", "given"],
      "moreInfo": "",
      "size": 8
    },
    {
      "id": 3110,
      "type": "FillBlank",
      "given": "const x = null<br>const y = 0<br>\/\/Determine if <pre>x</pre> is greater than or equal to <pre>y</pre>.",
      "question": "",
      "q1": "console.log(",
      "q2": ")",
      "choices": [],
      "answer": "",
      "answers": ["x >= y"],
      "explanation": "If you actually execute this code, you'll see that the expression returns <pre>true</pre>. This is because <pre>>=</pre> does some voodoo type-casting.",
      "displayAsCode": ["q1", "q2","answer", "given"],
      "moreInfo": "",
      "size": 8
    },
    {
      "id": 3111,
      "type": "",
      "given": "let customerStatus = \"gold\"<br>let percentOff = customerStatus === \"gold\" ? 10 : 0",
      "question": "",
      "q1": "The <pre>percentOff</pre> number will be ",
      "q2": "",
      "choices": [],
      "answer": "",
      "answers": ["10", "10%"],
      "explanation": "This <em>conditional operator</em> evaluates the first statement: <pre>customerStatus === \"gold\"</pre>. If this evaluates to <pre>true</pre> the value immediately after the <pre>?</pre> is returned. If it evaluates to <pre>false</pre>, the value after the <pre>:</pre> is returned.",
      "displayAsCode": ["answer", "given"],
      "moreInfo": "https://javascript.info/ifelse",
      "size": 5
    },
    {
      "id": 3112,
      "type": "ValidOrNot",
      "given": "",
      "question": "if 6 > 5 return true",
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": false,
      "answers": [""],
      "explanation": "The conditional portion (<pre>6 > 5</pre>) must be wrapped in parentheses.",
      "displayAsCode": ["question", "answer"],
      "moreInfo": "https://javascript.info/ifelse",
      "size": 0
    },
    {
      "id": 3113,
      "type": "ValidOrNot",
      "given": "",
      "question": "if (6 > 5) return true",
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [""],
      "explanation": "If you can fit the results of the if condition on the same line, you don't need to use <pre>{}</pre> to wrap the <pre>return true</pre>. That said, this is a bad idea, likely to cause trouble down the line: use curly braces with your if conditions.",
      "displayAsCode": ["question", "answer"],
      "moreInfo": "https://javascript.info/ifelse",
      "size": 0
    },
    {
      "id": 3114,
      "type": "ValidOrNot",
      "given": "",
      "question": "let registered = false<br>if (registered) {\/\/ do something }",
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [""],
      "explanation": "This is a common shorthand for <pre>if (registered === true)</pre>",
      "displayAsCode": ["question"],
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 3115,
      "type": "ValidOrNot",
      "given": "",
      "question": "let registered = true<br>registered = !registered",
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [""],
      "explanation": "Appending a bang (<pre>!</pre>) to a boolean value flips the value to the opposite.",
      "displayAsCode": ["question"],
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 3116,
      "type": "FillBlank",
      "given": "let registered = true<br>let x = Math.random()<br>\/\/ if x greater than 0.5, flip the value of registered",
      "question": "",
      "q1": "if (x > 0.5){<br>",
      "q2": "<br>}",
      "choices": [],
      "answer": "",
      "answers": ["registered = !registered"],
      "explanation": "Appending a bang (<pre>!</pre>) to a boolean value flips it to its opposite.",
      "displayAsCode": ["given", "q1", "q2", "answer"],
      "moreInfo": "",
      "size": 25
    },
    {
      "id": 3117,
      "type": "ValidOrNot",
      "given": "",
      "question": "let confused = !!!true",
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [""],
      "explanation": "Appending multiple <pre>!</pre> to a boolean value flips the value multiple times. In this case, confused ends up as <pre>false</pre>.",
      "displayAsCode": ["question"],
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 3118,
      "type": "ValidOrNot",
      "given": "",
      "question": "if (Math.random() > 0.5) then {<br>&nbsp;&nbsp;\/\/ do something<br>}",
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": false,
      "answers": [""],
      "explanation": "You don't use <pre>then</pre> with conditional statements.",
      "displayAsCode": ["question"],
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 3119,
      "type": "ValidOrNot",
      "given": "",
      "question": "if (Math.random() > 0.5) {<br>&nbsp;&nbsp;\/\/ do something<br>} else {<br>&nbsp;&nbsp;\/\/ do something else<br>}",
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [""],
      "explanation": "Use <pre>else</pre> to direct the action if the initial <pre>if</pre> condition is <pre>false</pre>.",
      "displayAsCode": ["question"],
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 3120,
      "type": "AllMixedUp",
      "given": "Arrange to test to see if registered is greater than unregistered",
      "question": "",
      "q1": "",
      "q2": "",
      "mixed": ["unregistered",">", ")", "registered","if", "("],
      "ordered": ["if", "(","registered", ">", "unregistered", ")"],
      "choices": [],
      "answer": "",
      "answers": [""],
      "explanation": "",
      "displayAsCode": [],
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 3121,
      "type": "FillBlank",
      "given": "<pre>let a = 1, b = 2, winner</pre><br>If a is greater than b, assign \"a wins\" to <pre>winner</pre>, otherwise assign \"b wins\" to <pre>winner</pre> using the ternary conditional expression.",
      "question": "",
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": "",
      "answers": ["winner = a > b ? \"a wins\" : \"b wins\"", "winner = a > b ? 'a wins' : 'b wins'"],
      "explanation": "",
      "displayAsCode": ["answer"],
      "moreInfo": "",
      "size": 40
    },
    {
      "id": 3122,
      "type": "TrueOrFalse",
      "given": "if (1) { console.log('I guess it is true')}",
      "question": "Does this print \"I guess it is true\" to the console?",
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [""],
      "explanation": "The shorthand, <pre>if (1)</pre>, uses non-strict evaluation, converting any non-zero number to <pre>true</pre>. ",
      "displayAsCode": ["given"],
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 331,
      "type": "FillBlank",
      "given": "<pre>let x = Math.random()</pre><br>If x is less than 0.33, log 'small'. <br>If x is greater than or equal to 0.33 but less than 0.66, log 'medium'. <br>If neither of these conditions are true, log 'large'. <br>Use curly braces <pre>{}</pre> within if conditions.",
      "question": "",
      "q1": "let x = Math.random()<br>if (x < 0.33) { console.log('small')}<br>",
      "q2": "<br>else {console.log('large')}",
      "choices": [],
      "answer": "",
      "answers": ["else if (x >=0.33 && x < 0.66) {console.log('medium')}","else if (x >=0.33 && x < 0.66) {console.log(\"medium\")}"],
      "explanation": "<pre>else if</pre> is your friend here.",
      "displayAsCode": [ "answer", "q1", "q2"],
      "moreInfo": "",
      "size": 60
    },
    {
      "id": 3123,
      "type": "TrueOrFalse",
      "given": "let x = a > b ? 'a' : 'b'",
      "question": "The ternary operator uses non-strict evaluation (sometimes called 'truthy')",
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [""],
      "explanation": "",
      "displayAsCode": ["given"],
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 3124,
      "type": "MultipleChoice",
      "given": "",
      "question": "How many <pre>else if</pre> statements are allowed in an expression?",
      "q1": "",
      "q2": "",
      "choices": ["1", "3", "7", "unlimited"],
      "answer": 3,
      "answers": [""],
      "explanation": "",
      "displayAsCode": ["choices"],
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 3125,
      "type": "TrueOrFalse",
      "given": "",
      "question": "<pre>if</pre> conditions that use an <pre>else if</pre> <em>must</em> have a closing <pre>else</pre>",
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": false,
      "answers": [""],
      "explanation": "",
      "displayAsCode": [],
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 332,
      "type": "ValidOrNot",
      "given": "",
      "question": "let age = prompt('age?', 18)<br>&nbsp;&nbsp;let message = (age < 3) <br>&nbsp;&nbsp;? 'Hi, baby!' <br>&nbsp;&nbsp;:  (age < 18)  <br>&nbsp;&nbsp;&nbsp;&nbsp;? 'Hello!' <br>&nbsp;&nbsp;&nbsp;&nbsp;:   (age < 100) <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;? 'Greetings! What an unusual age!' <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: 'Stumped'",
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [""],
      "explanation": "I know it looks weird, but it's valid. What's happening? In the <em>else</em> portion (<pre>:</pre>), another ternary expression is used in place of a simple value. For more check out the link below.",
      "displayAsCode": ["question"],
      "moreInfo": "https://javascript.info/ifelse",
      "size": 0
    },
    {
      "id": 811,
      "type": "FillBlank",
      "given": "The <pre>if</pre> check should see if <pre>status</pre> is <pre>'silver'</pre> or <pre>'gold'</pre>",
      "question": "",
      "q1": "if (status === 'silver'",
      "q2": "status ==='gold')",
      "choices": [],
      "answer": "",
      "answers": ["||"],
      "explanation": "",
      "displayAsCode": ["q1","q2", "answer"],
      "moreInfo": "",
      "size": 1
    },
    {
      "id": 821,
      "type": "MultipleChoice",
      "given": "let x = (true || false)",
      "question": "What will <pre>x</pre> equal?",
      "q1": "",
      "q2": "",
      "choices": ["true", "false", "Can't be determined", "Creates an error"],
      "answer": 0,
      "answers": [""],
      "explanation": "<pre>||</pre> is a <em>short-circuit</em> logical operator. It looks to see if one of the values is <em>truthy</em>. If it finds a <em>truthy</em> value, it stops looking, since it already knows that the entire expression is true.",
      "displayAsCode": ["given"],
      "moreInfo": "https://javascript.info/logical-operators",
      "size": 0
    },
    {
      "id": 822,
      "type": "MultipleChoice",
      "given": "let x = (1 || 0)",
      "question": "What will <pre>x</pre> equal?",
      "q1": "",
      "q2": "",
      "choices": ["1", "0", "Can't be determined", "Creates an error"],
      "answer": 0,
      "answers": [""],
      "explanation": "<pre>||</pre> is a <em>short-circuit</em> logical operator. It looks to see if one of the values is <em>truthy</em>. <pre>1</pre> evaluates to <pre>true</pre> due to non-strict (truthy) evaluation. If it finds a <em>truthy</em> value, it stops looking, since it already knows that the entire expression is true.",
      "displayAsCode": ["given"],
      "moreInfo": "https://javascript.info/logical-operators",
      "size": 0
    },
    {
      "id": 812,
      "type": "ValidOrNot",
      "given": "",
      "question": "let x = a || b || c",
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [""],
      "explanation": "You can more than one <em>or</em> clause in an expression.",
      "displayAsCode": ["question"],
      "moreInfo": "https://javascript.info/logical-operators",
      "size": 0
    },
    {
      "id": 823,
      "type": "MultipleChoice",
      "given": "let x = '0' === true || !true || false" ,
      "question": "What value will <pre>x</pre> have?",
      "q1": "",
      "q2": "",
      "choices": ["0", "true", "false", "Can't be determined"],
      "answer": 2,
      "answers": [""],
      "explanation": "The key is in the first <em>or</em> condition. Using strict evaluation, <pre>'0'</pre> is <em>not</em> equal to true. Having failed the truthy test of the first part, it goes onto the second part where it encounters <pre>!true</pre>. The <pre>!</pre> negates the <pre>true</pre> value. Then the third or condition is <pre>false</pre>. Since no <pre>true</pre> conditions were found, the value of <pre>false</pre> is assigned to <pre>x</pre>",
      "displayAsCode": ["given"],
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 831,
      "type": "MultipleChoice",
      "given": "let x = 100<br>true || console.log(++x)<br>false || console.log(x)",
      "question": "What will be printed to the console?",
      "q1": "",
      "q2": "",
      "choices": ["100", "101", "nothing", "Error"],
      "answer": 0,
      "answers": [""],
      "explanation": "This might strike you as odd. What's happening? We start setting <pre>x = 100</pre>. In the next line, a truthy value is found <em>and so no further action is taken</em> &mdash; namely incrementing <pre>x</pre> and logging it. On the third line, a falsy value is encountered, causing the JavaScript interpreter to move onto the next part of the or clause. This prints the original value of <pre>x</pre> to the console.",
      "displayAsCode": ["given"],
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 832,
      "type": "MultipleChoice",
      "given": "let x = 100<br>false && console.log(++x)<br>!true && console.log(x)",
      "question": "What will be printed to the console?",
      "q1": "",
      "q2": "",
      "choices": ["100", "101", "nothing", "Error"],
      "answer": 2,
      "answers": [""],
      "explanation": "<pre>&&</pre> is a short-circuit operator. Since <em>both</em> statements must be true, it stops evaluating the minute it encounters a falsy value. In this case, having found falsy values for both if checks, evaluation ceases and nothing is printed to the console.",
      "displayAsCode": ["given"],
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 833,
      "type": "MultipleChoice",
      "given": "let a = 0<br>let b = 1<br>let c ='0'<br>let result = null<br>if ((a && b) || c) {<br>&nbsp;&nbsp;d = 'gold'<br>}&nbsp;&nbsp;else {<br>&nbsp;&nbsp;d = 'silver'<br>}",
      "question": "What will be printed to the console?",
      "q1": "",
      "q2": "",
      "choices": ["null", "gold", "silver", "cannot be determined"],
      "answer": 1,
      "answers": [""],
      "explanation": "Work through the more complex if checks to see why it arrives at gold.",
      "displayAsCode": ["given"],
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 813,
      "type": "FillBlank",
      "given": "The <pre>if</pre> check should use one <pre>if</pre> statement to see if  <pre>status</pre> is <pre>'gold' </pre> and <pre>active</pre> is true.",
      "question": "",
      "q1": "if (status === 'gold'",
      "q2": "active')",
      "choices": [],
      "answer": "",
      "answers": ["&&"],
      "explanation": "",
      "displayAsCode": ["q1","q2", "answer"],
      "moreInfo": "",
      "size": 2
    },
    {
      "id": 834,
      "type": "MultipleChoice",
      "given": "let a = null<br>let b = 1<br>let c = a ?? b",
      "question": "What is the value of <pre>c</pre>",
      "q1": "",
      "q2": "",
      "choices": ["null", "undefined", "1", "Error thrown"],
      "answer": 2,
      "answers": [""],
      "explanation": "The <pre>??</pre> is known as the <em>nullish coalescing operator</em>. If <pre>a</pre> is neither <pre>null</pre> nor <pre>undefined</pre>, then the value of <pre>a</pre> is returned. Otherwise, it returns the value of the second argument. In this case, <pre>c</pre> would evaluate to <pre>1</pre>",
      "displayAsCode": ["given"],
      "moreInfo": "https://javascript.info/nullish-coalescing-operator",
      "size": 0
    },
    {
      "id": 814,
      "type": "AllMixedUp",
      "given": "",
      "question": "Create a <em>while loop</em> that checks if <pre>classFull</pre> is true. If not, <pre>students</pre> should be incremented.",
      "q1": "",
      "q2": "",
      "choices": [],
      "mixed": ["(","students++","}","classFull", "{", "while", "!",")"],
      "ordered": ["while","(", "!","classFull",")","{", "students++", "}"],
      "answer": "",
      "answers": [""],
      "explanation": "",
      "displayAsCode": [],
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 815,
      "type": "FillBlank",
      "given": "A while loop should print the value of <pre>i</pre> to the console while i is less than 10.",
      "question": "",
      "q1": "let i = 1<br>while (",
      "q2": "){<br>&nbsp;&nbsp;console.log(i++)<br>}",
      "choices": [],
      "answer": "",
      "answers": ["i < 10"],
      "explanation": "",
      "displayAsCode": ["q1","q2","answer"],
      "moreInfo": "",
      "size": 6
    },
    {
      "id": 816,
      "type": "FillBlank",
      "given": "A while loop should print the value of <pre>i</pre> to the console while i is not equal to zero.",
      "question": "",
      "q1": "let i = 10<br>while (",
      "q2": "){<br>&nbsp;&nbsp;console.log(i--)<br>}",
      "choices": [],
      "answer": "",
      "answers": ["i != 0", "i > 0"],
      "explanation": "",
      "displayAsCode": ["q1","q2","answer"],
      "moreInfo": "",
      "size": 6
    },
    {
      "id": 817,
      "type": "FillBlank",
      "given": "A while loop should increment the value of students until the number of students equals the limit prescribed.",
      "question": "",
      "q1": "let students = 0<br>let limit = 10<br>while (",
      "q2": ") {<br>&nbsp;&nbsp;students++<br>}",
      "choices": [],
      "answer": "",
      "answers": ["students < limit"],
      "explanation": "",
      "displayAsCode": ["q1","q2","answer"],
      "moreInfo": "",
      "size": 15
    },
    {
      "id": 818,
      "type": "FillBlank",
      "given": "A while loop should both increment the value of students and decrement the value of limit until limit is zero.",
      "question": "",
      "q1": "let students = 0<br>let limit = 10<br>while (",
      "q2": ") {<br>&nbsp;&nbsp;students++<br>&nbsp;&nbsp;limit--<br>}",
      "choices": [],
      "answer": "",
      "answers": ["limit != 0"],
      "explanation": "",
      "displayAsCode": ["q1","q2","answer"],
      "moreInfo": "",
      "size": 10
    },
    {
      "id": 819,
      "type": "FillBlank",
      "given": "A while loop should both increment the value of students and once the number of students is ten, should stop the loop by setting registrationFull to true.",
      "question": "",
      "q1": "let registrationFull = false<br>let students = 0<br>while (",
      "q2": ") {<br>&nbsp;&nbsp;students++<br>&nbsp;&nbsp;if (students === 10) {<br>&nbsp;&nbsp;&nbsp;&nbsp;registrationFull = true<br>&nbsp;&nbsp;}<br>}",
      "choices": [],
      "answer": "",
      "answers": ["!registrationFull"],
      "explanation": "",
      "displayAsCode": ["q1","q2","answer"],
      "moreInfo": "",
      "size": 17
    },
    {
      "id": 8120,
      "type": "MultipleChoice",
      "given": "",
      "question": "Which kind of loop will always execute its body at least once before checking if a given condition is true?",
      "q1": "",
      "q2": "",
      "choices": ["while loop", "do-while loop", "for loop", "do-for loop"],
      "answer": 1,
      "answers": [""],
      "explanation": "BTW, there is no <em>do-for loop</em>",
      "displayAsCode": [],
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 824,
      "type": "ValidOrNot",
      "given": "A do-while loop should both increment the value of students and once the number of students is ten, should stop the loop by setting registrationFull to true.",
      "question": "let registrationFull = false<br>let students = 0<br>do while (!registrationFull){<br>&nbsp;&nbsp;students++<br>&nbsp;&nbsp;if (students === 10) {<br>&nbsp;&nbsp;&nbsp;&nbsp;registrationFull = true<br>&nbsp;&nbsp;}<br>}",
      "q1": "",
      "q2": ") ",
      "choices": [],
      "answer": false,
      "answers": [""],
      "explanation": "",
      "displayAsCode": ["given"],
      "moreInfo": "https://javascript.info/while-for",
      "size": 0
    },
    {
      "id": 825,
      "type": "MultipleChoice",
      "given": "let log = false<br>do {<br>&nbsp;&nbsp;console.log('hello')<br>} while (log === true)",
      "question": "How many times will 'Hello' be logged?",
      "q1": "",
      "q2": "",
      "choices": ["0", "1", "infinitely", "Error thrown"],
      "answer": 1,
      "answers": [""],
      "explanation": "A do-while loop executes <em>before</em> condition evaluation takes place.",
      "displayAsCode": ["given"],
      "moreInfo": "https://javascript.info/while-for",
      "size": 0
    },
    {
      "id": 826,
      "type": "FillBlank",
      "given": "Complete the code to form a do-while loop.",
      "question": "",
      "q1": "let log = false<br>do {<br>&nbsp;&nbsp;console.log('hello')<br>}&nbsp;",
      "q2": "(log === true)",
      "choices": [],
      "answer": "",
      "answers": ["while"],
      "explanation": "",
      "displayAsCode": ["q1", "q2", "answer"],
      "moreInfo": "",
      "size": 6
    },
    {
      "id": 8121,
      "type": "ValidOrNot",
      "given": "",
      "question": "for (let i=0; i<100; i+=2) {<br>&nbsp;&nbsp;console.log(i)<br>}",
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [""],
      "explanation": "The third part of a <em>for loop</em> should change <pre>i</pre>. There's no requirement that this change should be by 1.",
      "displayAsCode": ["question"],
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 8122,
      "type": "FillBlank",
      "given": "The body of the for loop should log 'The value of i is ?' &mdash; where <em>?</em> is replaced by the actual value of i. Note the use of a template string!" ,
      "question": "",
      "q1": "for (let i=0; i<100; i+=2) {<br>console.log(`The value of i is ",
      "q2": "`)<br>}",
      "choices": [],
      "answer": "",
      "answers": ["${i}"],
      "explanation": "",
      "displayAsCode": ["q2","q1","answer"],
      "moreInfo": "",
      "size": 4
    },
    {
      "id": 8123,
      "type": "ValidOrNot",
      "given": "",
      "question": "let i = 0<br>for (; i<100; i++) {<br>&nbsp;&nbsp;console.log(`The value of i is ${i}`)<br>}",
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [""],
      "explanation": "This is a far less common way of creating a for loop. You should prefer the more common method of declaring <pre>i</pre> inline.",
      "displayAsCode": ["question"],
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 8124,
      "type": "AllMixedUp",
      "given": "",
      "question": "Create a for loop from jumble",
      "q1": "",
      "q2": "",
      "mixed": [";",")","//loop body","i<100","}",";","let i=10","(", "{", "for", "i+=10",],
      "ordered": ["for","(","let i=10",";","i<100",";","i+=10", ")","{","//loop body", "}"],
      "choices": [],
      "answer": "",
      "answers": [""],
      "explanation": "",
      "displayAsCode": [],
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 8125,
      "type": "ValidOrNot",
      "given": "",
      "question": "let i = 0<br>for (; i<10;) {<br>&nbsp;&nbsp;console.log(i++)<br>}",
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [""],
      "explanation": "Although this is not common, it's valid JavaScript code",
      "displayAsCode": ["question"],
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 8126,
      "type": "ValidOrNot",
      "given": "",
      "question": "for(;;){<br>&nbsp;&nbsp;console.log('hey there')<br>}",
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [""],
      "explanation": "It's valid, but don't run this code: it will repeat infinitely",
      "displayAsCode": ["question"],
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 827,
      "type": "FillBlank",
      "given": "Exit the loop if the condition specified is true",
      "question": "",
      "q1": "let i = 9<br>let j = 232<br>for (;;) {<br>&nbsp;&nbsp;console.log(j % i)<br>&nbsp;&nbsp;if (j % i == 0) {<br>&nbsp;&nbsp;&nbsp;&nbsp;console.log(i, j) {",
      "q2": "}<br>&nbsp;&nbsp;}<br>&nbsp;&nbsp;i++<br>}",
      "choices": [],
      "answer": "",
      "answers": ["break","break;"],
      "explanation": "This illustrates breaking out of an otherwise-infinite loop using <pre>break</pre>",
      "displayAsCode": ["q1", "q2", "answer"],
      "moreInfo": "",
      "size": 6
    },
    {
      "id": 828,
      "type": "TrueOrFalse",
      "given": "for (let i=1; i<100; i++) {<br>&nbsp;&nbsp;let msg = i<br>&nbsp;&nbsp;if (i % 3 == 0) {<br>&nbsp;&nbsp;&nbsp;&nbsp;msg = 'fizz'<br>&nbsp;&nbsp;}<br>&nbsp;&nbsp;if (i % 5 == 0) {<br>&nbsp;&nbsp;&nbsp;&nbsp;msg = 'buzz'<br>&nbsp;&nbsp;}<br>&nbsp;&nbsp;if (i % 15 == 0) {<br>&nbsp;&nbsp;&nbsp;&nbsp;msg = 'fizzbuzz'<br>&nbsp;&nbsp;}<br>&nbsp;&nbsp;console.log(msg)<br>}",
      "question": "Will this ever print 'fizzbuzz'?",
      "choices": [],
      "answer": true,
      "answers": [],
      "explanation": "This is a well-known programming challenge -- and yes it will print 'fizzbuzz' on multiples of 15",
      "displayAsCode": ["q1", "q2", "answer"],
      "moreInfo": "",
      "size": 6
    },
    {
      "id": 835,
      "type": "FillBlank",
      "given": "The loop should only log values of <pre>i</pre> that are odd.",
      "question": "",
      "q1": "for (let i=0; i<20; i++) {<br>&nbsp;&nbsp;if (",
      "q2": ") {<br>&nbsp;&nbsp;&nbsp;&nbsp;continue;<br>&nbsp;&nbsp;}<br>&nbsp;&nbsp;console.log(i)<br>}",
      "choices": [],
      "answer": "",
      "answers": ["i % 2 === 0", "i%2==0"],
      "explanation": "This uses the <em>modulo</em> operator to log only values of <pre>i</pre> that are odd.",
      "displayAsCode": ["q1", "q2", "answer"],
      "moreInfo": "",
      "size": 11
    },
    {
      "id": 829,
      "type": "FillBlank",
      "given": "The loop should only log values of <pre>i</pre> that are even.",
      "question": "",
      "q1": "for (let i=0; i<20; i++) {<br>&nbsp;&nbsp;if (i % 2 ) {<br>&nbsp;&nbsp;&nbsp;&nbsp;",
      "q2": "<br>&nbsp;&nbsp;}<br>&nbsp;&nbsp;console.log(i)<br>}",
      "choices": [],
      "answer": "",
      "answers": ["continue"],
      "explanation": "This uses the <em>modulo</em> operator to log only values of <pre>i</pre> that are even.",
      "displayAsCode": ["q1", "q2", "answer"],
      "moreInfo": "",
      "size": 11
    },
    {
      "id": 8210,
      "type": "ValidOrNot",
      "given": "",
      "question": "(i > 5) ? alert(i) : continue;",
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": false,
      "answers": [""],
      "explanation": "<pre>continue</pre> can't be used with the ternary conditional operator",
      "displayAsCode": ["question"],
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 8211,
      "type": "ValidOrNot",
      "given": "",
      "question": "for (let i=0; i<20; i++) {<br>&nbsp;&nbsp;for (let j=10; j>0; j--) {<br>&nbsp;&nbsp;&nbsp;&nbsp;console.log(i*j)<br>&nbsp;&nbsp;}<br>}",
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [""],
      "explanation": "This is an example of a <em>nested</em> loop",
      "displayAsCode": ["question"],
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 8212,
      "type": "TrueOrFalse",
      "given": "for (let i=0; i<20; i++) {<br>&nbsp;&nbsp;for (let j=10; j>0; j--) {<br>&nbsp;&nbsp;&nbsp;&nbsp;console.log(i*j)<br>&nbsp;&nbsp;&nbsp;&nbsp;if (i*j == 42) {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;}<br>}",
      "question": "The console will stop logging after <pre>i*j == 42</pre>",
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": false,
      "answers": [""],
      "explanation": "The <pre>break</pre> will only exit from the inner loop. We need to exit from <em>both</em> loops. For this we need to use <em>labeled</em> loops.",
      "displayAsCode": ["given"],
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 837,
      "type": "FillBlank",
      "given": "This code should exit from <em>both</em> loops when <pre>i*j == 42</pre>",
      "question": "",
      "q1": "outer: for (let i=0; i<20; i++) {<br>&nbsp;&nbsp;for (let j=10; j>0; j--) {<br>&nbsp;&nbsp;&nbsp;&nbsp;console.log(i*j)<br>&nbsp;&nbsp;&nbsp;&nbsp;if (i*j == 42) {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break ",
      "q2": "<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;}<br>}",
      "choices": [],
      "answer": "",
      "answers": ["outer", "outer;"],
      "explanation": "",
      "displayAsCode": ["answer","q1","q2"],
      "moreInfo": "",
      "size": 6
    },
    {
      "id": 8127,
      "type": "MultipleChoice",
      "given": "let level = 'gold'<br>let discount = 0<br>switch(level) {<br>&nbsp;&nbsp;case 'bronze':<br>&nbsp;&nbsp;&nbsp;&nbsp;discount = .05<br>&nbsp;&nbsp;&nbsp;&nbsp;break<br>&nbsp;&nbsp;case 'silver':<br>&nbsp;&nbsp;&nbsp;&nbsp;discount = .10<br>&nbsp;&nbsp;&nbsp;&nbsp;break<br>&nbsp;&nbsp;case 'gold':<br>&nbsp;&nbsp;&nbsp;&nbsp;discount = .15<br>}",
      "question": "What will the value of <pre>discount</pre> be?",
      "q1": "",
      "q2": "",
      "choices": ["0", ".05", ".10", ".15"],
      "answer": 3,
      "answers": [],
      "explanation": "",
      "displayAsCode": ["given"],
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 8128,
      "type": "MultipleChoice",
      "given": "let level = 'gold'<br>let discount = 0<br>switch(level) {<br>&nbsp;&nbsp;case 'gold':<br>&nbsp;&nbsp;&nbsp;&nbsp;discount = .15<br>&nbsp;&nbsp;case 'silver':<br>&nbsp;&nbsp;&nbsp;&nbsp;discount = .10<br>case 'bronze':<br>&nbsp;&nbsp;&nbsp;&nbsp;discount = .05<br>}",
      "question": "What will the value of <pre>discount</pre> be?",
      "q1": "",
      "q2": "",
      "choices": ["0", ".05", ".10", ".15"],
      "answer": 1,
      "answers": [],
      "explanation": "Without the <pre>break</pre> statements, execution of the code <em>begins</em> at the correct <pre>case</pre> but then \"falls through\" the remaining code until it finds a <pre>break</pre> or reaches the end",
      "displayAsCode": ["given"],
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 8129,
      "type": "ValidOrNot",
      "given": "",
      "question": "let a = 6<br>let b = 5<br>let results = null<br>switch(a) {<br>&nbsp;&nbsp;case b+1:<br>&nbsp;&nbsp;&nbsp;&nbsp;results = 'Buenas dias'<br>&nbsp;&nbsp;&nbsp;&nbsp;break<br>&nbsp;&nbsp;case b+2:<br>&nbsp;&nbsp;&nbsp;&nbsp;results = 'Guten Tag'<br>&nbsp;&nbsp;&nbsp;&nbsp;break<br>&nbsp;&nbsp;case b+3:<br>&nbsp;&nbsp;&nbsp;&nbsp;results = 'Good day'<br>&nbsp;&nbsp;&nbsp;&nbsp;break<br>}",
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [],
      "explanation": "This example is meant to illustrate that you can use <pre>case</pre> with any JavaScript expression. In fact, it will always evaluate to 'Buenas dias'",
      "displayAsCode": ["question"],
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 838,
      "type": "MultipleChoice",
      "given": "let a = 4.71<br>let results = null<br>switch(true) {<br>&nbsp;&nbsp;case a > 0 && a < 3:<br>&nbsp;&nbsp;&nbsp;&nbsp;results = 'small'<br>&nbsp;&nbsp;break<br>&nbsp;&nbsp;case a >2 && a < 5:<br>&nbsp;&nbsp;&nbsp;&nbsp;results = 'medium'<br>&nbsp;&nbsp;&nbsp;&nbsp;break<br>&nbsp;&nbsp;case a > 4:<br>&nbsp;&nbsp;&nbsp;&nbsp;results = 'large'<br>&nbsp;&nbsp;&nbsp;&nbsp;break<br>}",
      "question": "What will the value of <pre>results</pre> be?",
      "q1": "",
      "q2": "",
      "choices": ["small", "medium", "large", "error"],
      "answer": 1,
      "answers": [],
      "explanation": "Looks weird, but this is a way to do ranges with a <pre>switch</pre> statement",
      "displayAsCode": ["given"],
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 8130,
      "type": "MultipleChoice",
      "given": "let status = 'tin'<br>discount = null<br>switch(status) {<br>&nbsp;&nbsp;case 'bronze':<br>&nbsp;&nbsp;&nbsp;&nbsp;discount = 0.05<br>&nbsp;&nbsp;&nbsp;&nbsp;break<br>&nbsp;&nbsp;case 'silver':<br>&nbsp;&nbsp;&nbsp;&nbsp;discount = 0.10<br>&nbsp;&nbsp;&nbsp;&nbsp;break<br>&nbsp;&nbsp;case 'gold':<br>&nbsp;&nbsp;&nbsp;&nbsp;discount = 0.10<br>&nbsp;&nbsp;&nbsp;&nbsp;break<br>&nbsp;&nbsp;???:<br>&nbsp;&nbsp&nbsp;&nbspdiscount = 0<br>}",
      "question": "In order to catch any unaccounted-for cases, what should we replace <pre>???</pre> with?",
      "q1": "",
      "q2": "",
      "choices": ["finally", "else", "then", "default"],
      "answer": 3,
      "answers": [],
      "explanation": "",
      "displayAsCode": ["given"],
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 8131,
      "type": "ValidOrNot",
      "given": "",
      "question": "let status = 'tin'<br>discount = null<br>switch(status) {<br>&nbsp;&nbsp;case 'tin':<br>&nbsp;&nbsp;case 'bronze':<br>&nbsp;&nbsp;&nbsp;&nbsp;discount = 0.5<br>&nbsp;&nbsp;&nbsp;&nbsp;break<br>&nbsp;&nbsp;case 'silver':<br>&nbsp;&nbsp;&nbsp;&nbsp;discount = 0.10<br>&nbsp;&nbsp;&nbsp;&nbsp;break<br>&nbsp;&nbsp;case 'gold':<br>&nbsp;&nbsp;&nbsp;&nbsp;discount = 0.15<br>&nbsp;&nbsp;&nbsp;&nbsp;break<br>&nbsp;&nbsp;default:<br>&nbsp;&nbsp;&nbsp;&nbsp;discount = 0<br>}",
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [],
      "explanation": "This is an example of <em>grouping</em>. It works because <pre>case 'tin'</pre> 'falls through to the next case.'",
      "displayAsCode": ["question"],
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 8132,
      "type": "MultipleChoice",
      "given": "let status = 'tin'<br>discount = null<br>switch(status) {<br>&nbsp;&nbsp;case 'tin':<br>&nbsp;&nbsp;case 'bronze':<br>&nbsp;&nbsp;&nbsp;&nbsp;discount = 0.05<br>&nbsp;&nbsp;&nbsp;&nbsp;break<br>&nbsp;&nbsp;case 'silver':<br>&nbsp;&nbsp;&nbsp;&nbsp;discount = 0.10<br>&nbsp;&nbsp;&nbsp;&nbsp;break<br>&nbsp;&nbsp;case 'gold':<br>&nbsp;&nbsp;&nbsp;&nbsp;discount = 0.15<br>&nbsp;&nbsp;&nbsp;&nbsp;break<br>&nbsp;&nbsp;default:<br>&nbsp;&nbsp;&nbsp;&nbsp;discount = 0<br>}",
      "question": "What will the value of <pre>discount</pre> be?",
      "q1": "",
      "q2": "",
      "choices": [0, 0.05, 0.10, 0.15],
      "answer": 1,
      "answers": [],
      "explanation": "This is an example of <em>grouping</em>. It works because <pre>case 'tin'</pre> 'falls through to the next case.'",
      "displayAsCode": ["given"],
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 8133,
      "type": "TrueOrFalse",
      "given": "",
      "question": "The equality checking in a <pre>switch</pre> statement is always strict.",
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [],
      "explanation": "",
      "displayAsCode": [],
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 8134,
      "type": "MultipleChoice",
      "given": "let discount = '.1'<br>let price = 100<br>switch(discount) {<br>&nbsp;&nbsp;case .1:<br>&nbsp;&nbsp;&nbsp;&nbsp;price = price * .9<br>&nbsp;&nbsp;&nbsp;&nbsp;break<br>&nbsp;&nbsp;case .05:<br>&nbsp;&nbsp;&nbsp;&nbsp;price = price * .95<br>&nbsp;&nbsp;&nbsp;&nbsp;break<br>}",
      "question": "What will the value of <pre>price</pre> be?",
      "q1": "",
      "q2": "",
      "choices": [90, 95, 100, 'error'],
      "answer": 2,
      "answers": [],
      "explanation": "Equality checking in <pre>switch</pre> statements is strict. In this example, <pre>discount</pre> is a string while the cases are all numbers.",
      "displayAsCode": ["given"],
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 611,
      "type": "MultipleChoice",
      "given": "",
      "question": "The best definition of a <em>function</em> is...",
      "q1": "",
      "q2": "",
      "choices": ["any block of code appended with <pre>function:</pre>", "a set of statements that performs a task or calculates a value", "a set of statements that returns a value","any valid JavaScript expression or statement"],
      "answer": 1,
      "answers": [],
      "explanation": "",
      "displayAsCode": [],
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 612,
      "type": "TrueOrFalse",
      "given": "function currentDateTime() {<br>&nbsp;&nbsp;return new Date()<br>}",
      "question": "This is a valid function",
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [],
      "explanation": "",
      "displayAsCode": ["given"],
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 613,
      "type": "MultipleChoice",
      "given": "function randRange(min, max) {<br>&nbsp;&nbsp;return Math.floor(Math.random() * (max - min) + min)<br>}",
      "question": "This example accepts two <em>parameters</em>: <pre>min</pre> and <pre>max</pre>. What is the maximum number of parameters that a function can accept?",
      "q1": "",
      "q2": "",
      "choices": [2,3,10, "no fixed limit"],
      "answer": 3,
      "answers": [],
      "explanation": "",
      "displayAsCode": ["given"],
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 614,
      "type": "FillBlank",
      "given": "Make <pre>result</pre> local to the function.",
      "question": "",
      "q1": "function multiply(x,y) {<br>&nbsp;&nbsp;",
      "q2": "result = x*y<br>&nbsp;&nbsp;return result<br>}",
      "choices": [],
      "answer": "",
      "answers": ["let", "const"],
      "explanation": "Either <pre>let</pre> or <pre>const</pre> will work here. What you don't want is <pre>var</pre>.",
      "displayAsCode": ["q2","q1","answer"],
      "moreInfo": "",
      "size": 6
    },
    {
      "id": 615,
      "type": "ValidOrNot",
      "given": "",
      "question": "let result = null;<br>function multiply(x,y) {<br>&nbsp;&nbsp;result = x*Y<br>}",
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [],
      "explanation": "Functions can access global variables. That said, in general, functions should not know about variables outside themselves. It's preferable if they simply return a value.",
      "displayAsCode": ["question"],
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 616,
      "type": "MultipleChoice",
      "given": "let result = true;<br>function myFnc() {<br>&nbsp;&nbsp;let result = false<br>&nbsp;&nbsp;console.log(result)<br>}",
      "question": "What value will be printed to the console if this function is invoked?",
      "q1": "",
      "q2": "",
      "choices": ["true", "false", "Duplicate assignment error"],
      "answer": 1,
      "answers": [],
      "explanation": "Outer variables are used only if function-local variables are not available.",
      "displayAsCode": ["given"],
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 617,
      "type": "MultipleChoice",
      "given": "function add(x,y) {<br>&nbsp;&nbsp;return x + y<br>}<br>console.log(add(2,4,6))}",
      "question": "What will be printed to the console?",
      "q1": "",
      "q2": "",
      "choices": ["6","10","12","Invalid parameters error"],
      "answer": "0",
      "answers": [],
      "explanation": "Arguments passed into a function beyond those specified as parameters are ignored. (There is an exception to this in the uncommon case where the function refers to the arguments passed in as a collection, <pre>arguments</pre>).",
      "displayAsCode": ["given"],
      "moreInfo": "",
      "size": 0
    },
    {
      "id": ,
      "type": "",
      "given": "",
      "question": "",
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": "",
      "answers": [],
      "explanation": "",
      "displayAsCode": [],
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 618,
      "type": "FillBlank",
      "given": "",
      "question": "Provide a second parameter, <pre>discount</pre> with a default value of <pre>.02</pre>",
      "q1": "function calculatePrice(price,",
      "q2": ") {<br>&nbsp;&nbsp;return price * (1-discount)<br>}",
      "choices": [],
      "answer": "",
      "answers": ["discount = .02", "discount=0.02"],
      "explanation": "",
      "displayAsCode": ["answer","q1","q2"],
      "moreInfo": "",
      "size": 15
    },
    {
      "id": 619,
      "type": "TrueOrFalse",
      "given": "",
      "question": "A parameter is the variable listed inside the parentheses in the function declaration (it’s a declaration time term). An argument is the value that is passed to the function when it is called (it’s a call time term).",
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [],
      "explanation": "",
      "displayAsCode": [],
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 6120,
      "type": "ValidOrNot",
      "given": "",
      "question": "function defaultTaxRate() {<br>&nbsp;&nbsp;return 0.10<br>}<br><br>function taxedPrice(price, taxRate = defaultTaxRate()) {<br>&nbsp;&nbsp;return price * (1 + taxRate)<br>}",
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [],
      "explanation": "A parameter's default value can be a function as well as a simple value.",
      "displayAsCode": ["question"],
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 6121,
      "type": "ValidOrNot",
      "given": "",
      "question": "function greeting(name) {<br>&nbsp;&nbsp;name = name || 'friend'<br>&nbsp;&nbsp;return `Hello, ${name}`<br>}",
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [],
      "explanation": "This is another way of dealing with parameters for which no arguments are given.",
      "displayAsCode": ["question"],
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 6122,
      "type": "MultipleChoice",
      "given": "function policy() {<br>&nbsp;&nbsp;let type = 'sales item'<br>&nbsp;&nbsp;return<br>&nbsp;&nbsp;`This is a ${type} and is final.`<br>}",
      "question": "What will this function return?",
      "q1": "",
      "q2": "",
      "choices": ["This is a ${type} and is final.", "This is a sales item and is final.", "nothing", "Undefined type error"],
      "answer": 2,
      "answers": [],
      "explanation": "This is the biggest case where not using semicolons can bite you: when JavaScript sees a naked <pre>return</pre>, it immediately returns with no value. You can wrap what you want in parens to solve this problem.<br><pre>return(<br>`This is a ${type} and is final.`)",
      "displayAsCode": ["given"],
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 6123,
      "type": "ValidOrNot",
      "given": "",
      "question": "let policy = function() {<br>&nbsp;&nbsp;let type = 'sales item'<br>&nbsp;&nbsp;return (<br>&nbsp;&nbsp;&nbsp;&nbsp;`This is a ${type} and is final.`<br>&nbsp;&nbsp;)<br>}",
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [],
      "explanation": "",
      "displayAsCode": ["question"],
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 6124,
      "type": "ValidOrNot",
      "given": "",
      "question": "let students = []<br>let addStudent = function(student) {<br>&nbsp;&nbsp;students.push(student)<br>}<br><br>addStudent('Anna')",
      "displayAsCode": ["question"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [],
      "explanation": "",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 6125,
      "type": "MultipleChoice",
      "given": "let students = []<br>let addStudent = function(student) {<br>&nbsp;&nbsp;students.push(student)<br>}<br><br>let studentAdded = addStudent('Anna')<br>console.log(studentAdded)",
      "question": "What will be logged to the console?",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": ["Anna", "the students array", "No return error", "undefined"],
      "answer": 3,
      "answers": [],
      "explanation": "Functions with no <pre>return</pre> clause automatically return <pre>undefined</pre>",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 621,
      "type": "ValidOrNot",
      "given": "",
      "question": "let sayHello = (function sayHello(name) {<br>&nbsp;&nbsp;console.log(`Hello ${name}`)<br>})('Anna')",
      "displayAsCode": ["question"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [],
      "explanation": "This pattern is known as an <em>immediately-invoked function expression</em> or <em>IIFE</em>. With modern JavaScript (and avoiding the user of <pre>var</pre>, we no longer need to use IIFEs.",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 622,
      "type": "MultipleChoice",
      "given": "let sayHello = (function sayHello(name) {<br>&nbsp;&nbsp;console.log(`Hello ${name}`)<br>})('Anna')",
      "question": "What will be logged to the console?",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": ["Hello Anna", "Hello", "nothing", "error"],
      "answer": 0,
      "answers": [],
      "explanation": "This pattern is known as an <em>immediately-invoked function expression</em> or <em>IIFE</em>. With modern JavaScript (and avoiding the use of <pre>var</pre>, we don't need to use IIFEs any longer.",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 6126,
      "type": "TrueOrFalse",
      "given": "",
      "question": "A function can, itelf, call a function.",
      "displayAsCode": [],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [],
      "explanation": "",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 6127,
      "type": "MultipleChoice",
      "given": "let price = 100<br>let adjustPrice = function (price = 200)<br>{<br>&nbsp;&nbsp;return price * 1.3<br>}<br><br>console.log(adjustPrice())",
      "question": "What will be logged to the console?",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": [130, 260, 0, "nothing"],
      "answer": 1,
      "answers": [],
      "explanation": "",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 6128,
      "type": "FillBlank",
      "given": "function sayHi() {<br>&nbsp;&nbsp;alert('Hello')<br>}",
      "question": "",
      "displayAsCode": ["given"],
      "q1": "This syntax is known as a function ",
      "q2": "",
      "choices": [],
      "answer": "",
      "answers": ['declaration', 'Declaration'],
      "explanation": "",
      "moreInfo": "",
      "size": 10
    },
    {
      "id": 6129,
      "type": "FillBlank",
      "given": "let sayHi = function() {<br>&nbsp;&nbsp;alert('Hello')<br>}",
      "question": "",
      "displayAsCode": ["given"],
      "q1": "This syntax is known as a function ",
      "q2": "",
      "choices": [],
      "answer": "",
      "answers": ["expression", "Expression"],
      "explanation": "",
      "moreInfo": "",
      "size": 10
    },
    {
      "id": 623,
      "type": "MultipleChoice",
      "given": "let defaultDiscount = function() {<br>&nbsp;&nbsp;return .06<br>}<br><br>function adjustPrice(price, discount = defaultDiscount()) {<br>&nbsp;&nbsp;return price - price * discount<br>}<br>console.log(adjustPrice(100))",
      "question": "What is logged to the console?",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": [100, .06, 94, 'nothing'],
      "answer": 2,
      "answers": [],
      "explanation": "A function can be used as a default value of an argument passed to a function.",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 624,
      "type": "ValidOrNot",
      "given": "",
      "question": "function adjustPrice(price, discount = (function(){return .06})()) {<br>&nbsp;&nbsp;return price - price * discount<br>}<br><br>console.log(adjustPrice(100))",
      "displayAsCode": ["question"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [],
      "explanation": "Here an <em>immediately invoked function expression (IIFE)</em> provided as a default to an argument passed to the function. With modern JavaScript, avoiding the use of <pre>var</pre>, we no longer need to use IIFEs.",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 6130,
      "type": "FillBlank",
      "given": "let fnc = (arg) => {<br>&nbsp;&nbsp;console.log(arg)<br>}",
      "question": "",
      "displayAsCode": ["given"],
      "q1": "This type of function is known as an ",
      "q2": " function.",
      "choices": [],
      "answer": "",
      "answers": ["arrow", "Arrow"],
      "explanation": "",
      "moreInfo": "",
      "size": 6
    },
    {
      "id": 6131,
      "type": "",
      "given": "",
      "question": "",
      "displayAsCode": [],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": "",
      "answers": [],
      "explanation": "",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 6132,
      "type": "ValidOrNot",
      "given": "",
      "question": "let fnc = arg => `You sent me ${arg}`",
      "displayAsCode": ["question"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [],
      "explanation": "This is one version of an <em>arrow function</em>",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 631,
      "type": "MultipleChoice",
      "given": "function pow(x, n) {<br>&nbsp;&nbsp;if (n == 1) {<br>&nbsp;&nbsp;&nbsp;&nbsp;return x;<br>&nbsp;&nbsp;}<br>else {<br>&nbsp;&nbsp;&nbsp;&nbsp;return x * pow(x, n - 1)<br>&nbsp;&nbsp;}<br>}",
      "question": "This is an example of what kind of function?",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": ["genetic", "recursive", "arrow", "IIFE"],
      "answer": 1,
      "answers": [],
      "explanation": "",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 625,
      "type": "TrueOrFalse",
      "given": "function sumAll(...args) {<br>&nbsp;&nbsp;let sum = 0<br>&nbsp;&nbsp;for (let arg of args) { sum += arg}<br>&nbsp;&nbsp;return sum<br>}<br><br>console.log(sumAll(1,2,3,4,5,6))",
      "question": "<pre>...args</pre> is an example of the use of the <em>spread</em> syntax.",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [],
      "explanation": "",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 626,
      "type": "TrueOrFalse",
      "given": "function fnc( firstPlace, secondPlace, thirdPlace, ...rest) {<br>&nbsp;&nbsp;console.log(rest)<br>}<br><br>fnc('Ana', 'Kay', 'Darien', 'Mickey', 'Sandra', 'Octavia'",
      "question": "<pre>...rest</pre> is an array that consists of <pre>['Mickey', 'Sandra', 'Octavia']</pre>",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [],
      "explanation": "",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 627,
      "type": "FillBlank",
      "given": "",
      "question": "",
      "displayAsCode": ["question","q1","q2"],
      "q1": "function fnc( firstPlace, secondPlace, thirdPlace ) {<br>&nbsp;&nbsp;for (argument of ",
      "q2": ") {<br>&nbsp;&nbsp;&nbsp;&nbsp;console.log(argument)<br>&nbsp;&nbsp;}<br>}",
      "choices": [],
      "answer": "",
      "answers": ["arguments"],
      "explanation": "<pre>arguments</pre> is an array-like variable that's available within a function and contains all arguments passed to the function.",
      "moreInfo": "",
      "size": 10
    },
    {
      "id": 628,
      "type": "MultipleChoice",
      "given": "function topScore(arr) {<br>&nbsp;&nbsp;console.log(Math.max(...arr))<br>}<br><br>topScore([84,89,96,78,100,99,94,91])",
      "question": "What does <pre>...arr</pre> do?",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": ["spreads an array into individual values", "loops over an array", "converts an array into an object", "does nothing"],
      "answer": 0,
      "answers": [],
      "explanation": "",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 6133,
      "type": "TrueOrFalse",
      "given": "let result = false<br><br>function fnc() {<br>&nbsp;&nbsp;let result = true<br>}",
      "question": "This code will produce a duplicate declaration error",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": false,
      "answers": [],
      "explanation": "Variables declared inside a function are confined to that function. Within the function <pre>result </pre> has a value of <pre>true</pre>. Outside the function, <pre>result</pre> has a value of <pre>false</pre>.",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 6134,
      "type": "FillBlank",
      "given": "function outer() {<br>&nbsp;&nbsp;let result = true<br>&nbsp;&nbsp;function inner() {<br>&nbsp;&nbsp;&nbsp;&nbsp;let result = false<br>&nbsp;&nbsp;&nbsp;&nbsp;return result<br>&nbsp;&nbsp;}<br>&nbsp;&nbsp;return inner()<br>}",
      "question": "",
      "displayAsCode": ["given", "answer", "q1", "q2"],
      "q1": "<pre>console.log(outer()) </pre> will display ",
      "q2": "",
      "choices": [],
      "answer": "",
      "answers": ["false"],
      "explanation": "A nested function also has a private scope",
      "moreInfo": "",
      "size": 6
    },
    {
      "id": 632,
      "type": "FillBlank",
      "given": "function outer() {<br>&nbsp;&nbsp;let name = 'Hal'<br>&nbsp;&nbsp;return function() {<br>&nbsp;&nbsp;&nbsp;&nbsp;return `Hello, ${name}`<br>&nbsp;&nbsp;}<br>}<br><br>let fnc = outer();<br>console.log(fnc())",
      "question": "",
      "displayAsCode": ["given"],
      "q1": "The mechanism by which the returned function from <pre>outer</pre> still has access to <pre>outer</pre>'s variables is called a ",
      "q2": "",
      "choices": [],
      "answer": "",
      "answers": ["closure"],
      "explanation": "",
      "moreInfo": "",
      "size": 7
    },
    {
      "id": 1149,
      "type": "TrueOrFalse",
      "given": "",
      "question": "<pre>var</pre> is rarely used in modern JavaScript",
      "displayAsCode": [],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [],
      "explanation": "",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 1150,
      "type": "TrueOrFalse",
      "given": "",
      "question": "When used within a function a variable declared with <pre>var</pre> is scoped to that function and unavailable outside the function.",
      "displayAsCode": [],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": false,
      "answers": [],
      "explanation": "This is one of the main reasons why you should almost always prefer <pre>let</pre> or <pre>const</pre> over <pre>var</pre>",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 1151,
      "type": "TrueOrFalse",
      "given": "var myName = 'Hal'<br>var myName = 'Amadeus'",
      "question": "This code will throw a Duplicate Declaration error",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": false,
      "answers": [],
      "explanation": "Yet another reason to eschew the use of <pre>var</pre>",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 1152,
      "type": "MultipleChoice",
      "given": "function greeting() {<br>&nbsp;&nbsp;console.log(`Hi, ${name}`)<br>}<br>var name = 'Hal'<br>greeting()",
      "question": "What will be logged to the console?",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": ["Hi, Hal", "Hi, undefined", "Hi,", "Undeclared variable error"],
      "answer": 0,
      "answers": [],
      "explanation": "More weirdness (and more reasons) to avoid the use of <pre>var</pre>",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 1153,
      "type": "MultipleChoice",
      "given": "",
      "question": "A variable's <em>scope</em> refers to...",
      "displayAsCode": [],
      "q1": "",
      "q2": "",
      "choices": ["what data type a variable can hold", "how long a variable is kept alive before being garbage-collected", "where a variable is accessible from", "whether the variable has been declared <pre>private</pre>"],
      "answer": 2,
      "answers": [],
      "explanation": "",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 1154,
      "type": "TrueOrFalse",
      "given": "globalThis.console.log(`Hi, ${name}`)<br>console.log(`Hi, ${name}`)",
      "question": "In both cases, <pre>console</pre> is globally-scoped.",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [],
      "explanation": "",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 8135,
      "type": "FillBlank",
      "given": "To display the name of a function...",
      "question": "",
      "displayAsCode": ["answer", "q1", "q2"],
      "q1": "function greeting() {}<br>console.log(greeting.",
      "q2": ")",
      "choices": [],
      "answer": "",
      "answers": ["name"],
      "explanation": "",
      "moreInfo": "",
      "size": 4
    },
    {
      "id": 8136,
      "type": "MultipleChoice",
      "given": "let sayHi = function(who) {<br>&nbsp;&nbsp;alert(`Hello, ${who}`)<br>}",
      "question": "This is an example of...",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": ["Arrow function", "Headless function", "Non-Returning function", "Named Function Expression"],
      "answer": 3,
      "answers": [],
      "explanation": "",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 8213,
      "type": "MultipleChoice",
      "given": "let sayHi = function(who) {<br>&nbsp;&nbsp;if (who) {<br>&nbsp;&nbsp;&nbsp;&nbsp;console.log(`Hi, ${who}`)<br>&nbsp;&nbsp;} else {<br>&nbsp;&nbsp;&nbsp;&nbsp;sayHi('Guest')<br>&nbsp;&nbsp;}<br>}<br><br>let greet = sayHi<br>sayHi = null<br>greet()",
      "question": "What will be logged to the console?",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": ["Hi, Guest", "Hi,", "nothing", "TypeError"],
      "answer": 3,
      "answers": [],
      "explanation": "Inside the function, we call <pre>sayHi</pre> &mdash; but <pre>sayHi</pre> has been set to <pre>null</pre>, so <pre>sayHi</pre> is no longer a function. To get around this possible problem, you might want to give the function a name &mdash; and then use that name within the function rather than <pre>sayHi</pre>",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 629,
      "type": "FillBlank",
      "given": "Provide missing code so that the <pre>else</pre> clause recursively calls its own function.",
      "question": "",
      "displayAsCode": ["answer", "q1", "q2"],
      "q1": "let sayHi = function func(who) {<br>&nbsp;&nbsp;if (who) {<br>&nbsp;&nbsp;&nbsp;&nbsp;console.log(`Hi, ${who}`)<br>&nbsp;&nbsp;} else {<br>&nbsp;&nbsp;&nbsp;&nbsp;",
      "q2": "('Guest')<br>&nbsp;&nbsp;}<br>}",
      "choices": [],
      "answer": "",
      "answers": ["func"],
      "explanation": "",
      "moreInfo": "",
      "size": 5
    },
    {
      "id": 6210,
      "type": "FillBlank",
      "given": "Provide missing code so that the <pre>else</pre> clause recursively calls its own function.",
      "question": "",
      "displayAsCode": ["answer", "q1", "q2"],
      "q1": "function greet(who) {<br>&nbsp;&nbsp;if (who) {<br>&nbsp;&nbsp;&nbsp;&nbsp;console.log(`Hi, ${who}`)<br>&nbsp;&nbsp;} else {<br>&nbsp;&nbsp;&nbsp;&nbsp;",
      "q2": "('Guest')<br>&nbsp;&nbsp;}<br>}",
      "choices": [],
      "answer": "",
      "answers": ["greet"],
      "explanation": "",
      "moreInfo": "",
      "size": 5
    },
    {
      "id": 6211,
      "type": "ValidOrNot",
      "given": "",
      "question": "let greet = new Function('who', 'return `Hello,` + who ')",
      "displayAsCode": ["question"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [],
      "explanation": "Although not commonly used, this pattern can be used to create a function. The first arguments sent to <pre>new Function</pre> are parameters for the function; the final argument is the function body.",
      "moreInfo": "https://javascript.info/new-function",
      "size": 0
    },
    {
      "id": 6212,
      "type": "MultipleChoice",
      "given": "function getFunc() {<br>&nbsp;&nbsp;let value = 'test';<br>&nbsp;&nbsp;return new Function('alert(value)')<br>}<br><br>getFunc()()",
      "question": "What will happen when this code is run?",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": ["an alert popup will appear with the word <em>test</em> in it", "an alert popup will appear <em>without</em> the word <em>test</em> in it", "an alert popup will appear, asking the user for the value of <pre>value</pre>", "an error will be thrown indicating that <pre>value</pre> is not defined."],
      "answer": 3,
      "answers": [],
      "explanation": "When a function is created with the <pre>new Function</pre> pattern, it does not have access to the ouoter variables &mdash; in other words, it is not a <em>closure</em>",
      "moreInfo": "https://javascript.info/new-function",
      "size": 0
    },
    {
      "id": 8137,
      "type": "MultipleChoice",
      "given": "function greet() {console.log('Hi there')}<br>setTimeout(greet, 1000)",
      "question": "What will happen when this code is run?",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": ["After a delay of 1 second, <em>Hi there</em> will be logged to the console", "Nothing &mdash; as <pre>greet</pre> is declared but never invoked", "After a delay of 1 second, <em>Hi there</em> will be logged to the console continuously", "An error will be thrown"],
      "answer": 0,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/settimeout-setinterval",
      "size": 0
    },
    {
      "id": 8138,
      "type": "FillBlank",
      "given": "Supply the code to cancel <pre>myTimer</pre>",
      "question": "",
      "displayAsCode": ["q1", "q2","answer"],
      "q1": "let myTimer = setTimeout(() => console.log('Hi there'), 5000)<br>setTimeout(() => ",
      "q2": "(myTimer), 2000)",
      "choices": [],
      "answer": "",
      "answers": ["clearTimeout"],
      "explanation": "",
      "moreInfo": "https://javascript.info/settimeout-setinterval",
      "size": 12
    },
    {
      "id": 8139,
      "type": "ValidOrNot",
      "given": "",
      "question": "let myTimer = setTimeout(() => console.log('Hi there'), 5000)<br>setTimeout(() => clearTimeout(myTimer), 2000)",
      "displayAsCode": ["question"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/settimeout-setinterval",
      "size": 0
    },
    {
      "id": 8140,
      "type": "AllMixedUp",
      "given": "",
      "question": "Rearrange the code to create a <pre>setTimeout</pre> function",
      "displayAsCode": [],
      "mixed": [")","setTimeout","let","(",",","5000","myFunc","=","myTimer"],
      "ordered": ["let", "myTimer", "=", "setTimeout", "(", "myFunc", ",", "5000", ")"],
      "choices": [],
      "answer": "",
      "answers": [],
      "explanation": "",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 8141,
      "type": "FillBlank",
      "given": "Fill in the blank to create a recurring call to the anonymous arrow function.",
      "question": "",
      "displayAsCode": ["answer", "q1", "q2"],
      "q1": "let counter = 0<br>let myInterval = ",
      "q2": "(() => {<br>&nbsp;&nbsp;console.log(++counter)<br>}, 1500)",
      "choices": [],
      "answer": "",
      "answers": ["setInterval"],
      "explanation": "",
      "moreInfo": "",
      "size": 11
    },
    {
      "id": 8142,
      "type": "FillBlank",
      "given": "Fill the blank to stop the recurring action of this code",
      "question": "",
      "displayAsCode": ["q1", "q2", "answer"],
      "q1": "let counter = 0<br>let myInterval = setInterval(() => {<br>&nbsp;&nbsp;console.log(++counter)<br>&nbsp;&nbsp;if (counter == 7) {<br>&nbsp;&nbsp;&nbsp;&nbsp;",
      "q2": "<br>&nbsp;&nbsp;}<br>}, 2000)",
      "choices": [],
      "answer": "",
      "answers": ["clearInterval(myInterval)"],
      "explanation": "",
      "moreInfo": "",
      "size": 26
    },
    {
      "id": 839,
      "type": "TrueOrFalse",
      "given": "let delay = 2000<br>function callAPI() {<br>&nbsp;&nbsp;let rnd = Math.random()<br>&nbsp;&nbsp;switch(true) {<br>&nbsp;&nbsp;&nbsp;&nbsp;case rnd < 0.33:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;delay += 200<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log('Too fast, increasing delay to ' + delay)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break<br>&nbsp;&nbsp;&nbsp;&nbsp;case rnd >= 0.33 && rnd <.66:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log('Just right, leaving delay as is at ' + delay)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break<br>&nbsp;&nbsp;&nbsp;&nbsp;default:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;delay -= 200<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log('Too slow, decreasing delay to ' + delay)<br>}<br>setInterval(callAPI, delay)",
      "question": "This code will adjust the length of time between <pre>callAPI</pre>",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": false,
      "answers": [],
      "explanation": "The value of <pre>delay</pre> is set when <pre>setInterval</pre> is called and is not re-evaluated on each subsequent call.",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 8310,
      "type": "TrueOrFalse",
      "given": "let delay = 2000<br>function callAPI() {<br>&nbsp;&nbsp;let timeNow = new Date()<br>&nbsp;&nbsp;console.log('Currently: ' + timeNow)<br>&nbsp;&nbsp;let rnd = Math.random()<br>&nbsp;&nbsp;switch(true) {<br>&nbsp;&nbsp;&nbsp;&nbsp;case rnd < 0.33:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;delay += 1000<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log('Too fast, increasing delay to ' + delay)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break<br>&nbsp;&nbsp;&nbsp;&nbsp;case rnd >= 0.33 && rnd <.66:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log('Just right, leaving delay as is at ' + delay)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break<br>&nbsp;&nbsp;&nbsp;&nbsp;default:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;delay -= 500<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log('Too slow, decreasing delay to ' + delay)<br>&nbsp;&nbsp;}<br>&nbsp;&nbsp;myTimeout = setTimeout(callAPI, delay)<br>}<br><br>let myTimeout = setTimeout(callAPI, delay)",
      "question": "This code will adjust the length of time between <pre>callAPI</pre>",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [],
      "explanation": "Since we're using <pre>setTimeout</pre> instead of <pre>setInterval</pre>, the value of <pre>delay</pre> <em>will</em> be evaluated on each iteration.",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 633,
      "type": "MultipleChoice",
      "given": "function cacheMachine(func) {<br>&nbsp;&nbsp;let cache = new Map()<br>&nbsp;&nbsp;return function(val) {<br>&nbsp;&nbsp;&nbsp;&nbsp;if (cache.has(val)) {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return cache.get(val)<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;let result = func(val)<br>&nbsp;&nbsp;&nbsp;&nbsp;cache.set(val, result)<br>&nbsp;&nbsp;&nbsp;&nbsp;return result<br>&nbsp;&nbsp;}<br>}",
      "question": "This code provides an example of a...",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": ["Derivative function", "Genetic algorithm", "Closure", "Remote assignment"],
      "answer": 2,
      "answers": [],
      "explanation": "",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 6213,
      "type": "MultipleChoice",
      "given": "let user = {<br>&nbsp;&nbsp;firstName: 'John',<br>&nbsp;&nbsp;sayHi() {<br>&nbsp;&nbsp;&nbsp;&nbsp;console.log(`Hello, ${this.firstName}!`)<br>&nbsp;&nbsp;<br>}<br>}<br><br>setTimeout(user.sayHi, 1000);",
      "question": "What will be logged to the console?",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": ["Hello, undefined!", "Hello!", "Hello, John!", "error"],
      "answer": 0,
      "answers": [],
      "explanation": "Once a method is passed somewhere separately from the object, <pre>this</pre> is lost.",
      "moreInfo": "https://javascript.info/bind",
      "size": 0
    },
    {
      "id": 634,
      "type": "MultipleChoice",
      "given": "let user = {<br>&nbsp;&nbsp;firstName: 'John'<br>}<br><br>function func() {<br>&nbsp;&nbsp;return(`Hello, ${this.firstName}!`)<br>}<br><br>console.log(func.bind(user)())",
      "question": "What will be logged to the console?",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": ["Hello, John!", "Hello, undefined!", "Hello!", "error"],
      "answer": 0,
      "answers": [],
      "explanation": "Using <pre>.bind</pre> avoids the problem of <pre>this</pre> getting 'lost' by telling the bound function (<pre>func</pre> in this case) to use <pre>user</pre> as <pre>this</pre>.",
      "moreInfo": "https://javascript.info/bind",
      "size": 0
    },
    {
      "id": 635,
      "type": "FillBlank",
      "given": "",
      "question": "Fill in the blank to bind the <pre>user</pre> object to the function, <pre>func</pre>.",
      "displayAsCode": ["answer","q1", "q2"],
      "q1": "let user = {<br>&nbsp;&nbsp;firstName: 'John'<br>}<br><br>function func() {<br>&nbsp;&nbsp;return(`Hello, ${this.firstName}!`)<br>}<br><br>console.log(",
      "q2": ")",
      "choices": [""],
      "answer": 0,
      "answers": ["func.bind(user)()"],
      "explanation": "Using <pre>.bind</pre> avoids the problem of <pre>this</pre> getting 'lost' by telling the bound function (<pre>func</pre> in this case) to use <pre>user</pre> as <pre>this</pre>.",
      "moreInfo": "https://javascript.info/bind",
      "size": 18
    },
    {
      "id": 6214,
      "type": "ValidOrNot",
      "given": "",
      "question": "let user = {<br>&nbsp;&nbsp;firstName: 'John'<br>}<br><br>function func(greeting) {<br>&nbsp;&nbsp;return(`Hello, ${greeting}, ${this.firstName}!`)<br>}<br><br>console.log(func.bind(user)('Hi'))",
      "displayAsCode": ["question"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [],
      "explanation": "",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 6215,
      "type": "MultipleChoice",
      "given": "let user = {<br>&nbsp;&nbsp;firstName: 'John'<br>}<br><br>function func(greeting) {<br>&nbsp;&nbsp;return(`Hello, ${greeting}, ${this.firstName}!`)<br>}<br><br>console.log(func.bind(user)('Hi'))",
      "question": "What will be logged to the console?",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": ["undefined, John", "Hello, undefined", "undefined, undefined", "Hello, John"],
      "answer": 3,
      "answers": [],
      "explanation": "",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 636,
      "type": "TrueOrFalse",
      "given": "let userUtils = {<br>&nbsp;&nbsp;addAddress: function(street, city, state) {<br>&nbsp;&nbsp;&nbsp;&nbsp;this.street = street<br>&nbsp;&nbsp;&nbsp;&nbsp;this.city = city<br>&nbsp;&nbsp;&nbsp;&nbsp;this.state = state<br>&nbsp;&nbsp;}<br>}<br><br>let user = {<br>&nbsp;&nbsp;firstName: 'Ignaz',<br>&nbsp;&nbsp;lastName: 'Semmelweiß'<br>}<br><br>userUtils.addAddress.bind(user)('123 Rainbow', 'Las Vegas', 'NV')",
      "question": "Ignaz Semmelweiß lives in Las Vegas",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [],
      "explanation": "The <pre>func.bind</pre> syntax returns a function where <pre>this</pre> is set to whatever <pre>func</pre> has been bound to.",
      "moreInfo": "https://javascript.info/bind",
      "size": 0
    },
    {
      "id": 637,
      "type": "TrueOrFalse",
      "given": "let userUtils = {<br>&nbsp;&nbsp;addAddress: function(street, city, state) {<br>&nbsp;&nbsp;&nbsp;&nbsp;this.street = street<br>&nbsp;&nbsp;&nbsp;&nbsp;this.city = city<br>&nbsp;&nbsp;&nbsp;&nbsp;this.state = state<br>&nbsp;&nbsp;}<br>}<br><br>let user = {<br>&nbsp;&nbsp;firstName: 'Ignaz',<br>&nbsp;&nbsp;lastName: 'Semmelweiß'<br>}<br><br>userUtils.addAddress.bind(user)('123 Rainbow', 'Las Vegas', 'NV')",
      "question": "Ignaz Semmelweiß has no address",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": false,
      "answers": [],
      "explanation": "You can add parameters when binding a function",
      "moreInfo": "https://javascript.info/bind",
      "size": 0
    },
    {
      "id": 6216,
      "type": "ValidOrNot",
      "given": "",
      "question": "function multiplyBy(a,b) {<br>&nbsp;&nbsp;return a * b<br>}<br><br>let double = multiplyBy.bind(null, 2)",
      "displayAsCode": ["question"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [],
      "explanation": "This is sometimes called a <em>partial function</em>",
      "moreInfo": "https://javascript.info/bind",
      "size": 0
    },
    {
      "id": 6216,
      "type": "FillBlank",
      "given": "function multiplyBy(a,b) {<br>&nbsp;&nbsp;return a * b<br>}<br><br>let double = multiplyBy.bind(null, 2)<br><br>console.log(double(8)",
      "question": "",
      "displayAsCode": ["given"],
      "q1": "The value printed to the console is ",
      "q2": "",
      "choices": [],
      "answer": "",
      "answers": ["16"],
      "explanation": "This is sometimes called a <em>partial function</em>",
      "moreInfo": "https://javascript.info/bind",
      "size": 3
    },
    {
      "id": 6135,
      "type": "TrueOrFalse",
      "given": "let sayHi = () => 'Hello'<br>console.log(sayHi())",
      "question": "This code will throw a run-time exception.",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": false,
      "answers": [],
      "explanation": "",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 6218,
      "type": "FillBlank",
      "given": "name = 'Ana'<br>let sayHi = (name) => {<br>&nbsp;&nbsp;return `Hello, ${this.name}`<br>}<br><br>console.log(sayHi('Hal'))",
      "question": "",
      "displayAsCode": ["given"],
      "q1": "the value of <pre>this.name</pre> is ",
      "q2": "",
      "choices": [],
      "answer": "",
      "answers": ["Ana", "'Ana'"],
      "explanation": "Arrow functions have no <pre>this</pre> context. They search 'upwards' for a context and find one in the <em>global</em> object.",
      "moreInfo": "",
      "size": 4
    },
    {
      "id": ,
      "type": "",
      "given": "",
      "question": "",
      "displayAsCode": [],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": "",
      "answers": [],
      "explanation": "",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 421,
      "type": "FillBlank",
      "given": "let composer = {<br>&nbsp;&nbsp;name: 'Ludwig van Beethoven',<br>&nbsp;&nbsp;symphonies: 9,<br>&nbsp;&nbsp;born: 1770,<br>&nbsp;&nbsp;died: 1827<br>}<br><br>Object.defineProperty(composer, 'died', {<br>&nbsp;&nbsp;writable: false<br>})<br><br>composer.died = 1837",
      "question": "",
      "displayAsCode": ["given"],
      "q1": "The value of <pre>composer.died</pre> is ",
      "q2": "",
      "choices": [],
      "answer": "",
      "answers": ["1827"],
      "explanation": "",
      "moreInfo": "https://javascript.info/property-descriptors",
      "size": 5
    },
    {
      "id": 431,
      "type": "MultipleChoice",
      "given": "let composer = {<br>&nbsp;&nbsp;name: 'Hector Berlioz',<br>&nbsp;&nbsp;symphonies: 4,<br>&nbsp;&nbsp;born: 1803,<br>&nbsp;&nbsp;died: 1869<br>}",
      "question": "If you want to prevent any additions, deletions, or changes to this object's properties, which of these will do the job?",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": ["Object.seal", "Object.freeze", "Object.static", "Object.immutable"],
      "answer": 1,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/property-descriptors",
      "size": 0
    },
    {
      "id": 411,
      "type": "FillBlank",
      "given": "Fill in the blank to provide a 'getter' for <pre>fullName</pre>",
      "question": "",
      "displayAsCode": ["q1","q2","answer"],
      "q1": "let person = {<br>&nbsp;&nbsp;firstName: 'Hal',<br>&nbsp;&nbsp;lastName: 'Helms',<br>&nbsp;&nbsp;",
      "q2": "() {<br>&nbsp;&nbsp;&nbsp;&nbsp;return `${this.firstName} ${this.lastName}`<br>&nbsp;&nbsp;}<br>}",
      "choices": [],
      "answer": "",
      "answers": ["get fullName"],
      "explanation": "",
      "moreInfo": "https://javascript.info/property-accessors",
      "size": 13
    },
    {
      "id": 412,
      "type": "FillBlank",
      "given": "let report = {<br>&nbsp;&nbsp;bhf: 0,<br>&nbsp;&nbsp;set age(age) {<br>&nbsp;&nbsp;&nbsp;&nbsp;if ( age > 0 && age < 120 ) {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.bhf = age<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;}<br>}<br><br>report.age = 200",
      "question": "",
      "displayAsCode": ["given", "answer","q1","q2"],
      "q1": "The value of <pre>report.bhf</pre> is ",
      "q2": "",
      "choices": [],
      "answer": "",
      "answers": ["0"],
      "explanation": "",
      "moreInfo": "https://javascript.info/property-accessors",
      "size": 4
    },
    {
      "id": 422,
      "type": "MultipleChoice",
      "given": "let report = {<br>&nbsp;&nbsp;age: 0,<br>&nbsp;&nbsp;set age(age) {<br>&nbsp;&nbsp;&nbsp;&nbsp;if ( age > 0 && age < 120 ) {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.age = age<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;}<br>}<br><br>report.age = 42",
      "question": "What does this code do?",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": ["Sets <pre>report.age</pre> to 42", "Throws a run-time exception", "Does nothing as it violates the age check"],
      "answer": 1,
      "answers": [],
      "explanation": "You cannot have the property name the same as your <pre>get</pre> property.",
      "moreInfo": "https://javascript.info/property-accessors",
      "size": 0
    },
    {
      "id": 432,
      "type": "FillBlank",
      "given": "let electricVehicle = {<br>&nbsp;&nbsp;motor: 'electric',<br>&nbsp;&nbsp;emissions: 'none'<br>}<br><br>let tesla = {<br>&nbsp;&nbsp;mark: 'Tesla',<br>&nbsp;&nbsp;range: '340 miles'<br>}<br>tesla.__proto__ = electricVehicle<br><br>console.log(tesla.motor)",
      "question": "",
      "displayAsCode": ["given"],
      "q1": "The value of <pre>tesla.motor</pre> is ",
      "q2": "",
      "choices": [],
      "answer": "",
      "answers": ["electric"],
      "explanation": "This works, but <pre>Object.setPrototypeOf</pre> is preferred.",
      "moreInfo": "https://javascript.info/prototype-inheritance",
      "size": 9
    },
    {
      "id": 433,
      "type": "FillBlank",
      "given": "let electricVehicle = {<br>&nbsp;&nbsp;motor: 'electric',<br>&nbsp;&nbsp;emissions: 'none'<br>}<br><br>let tesla = {<br>&nbsp;&nbsp;mark: 'Tesla',<br>&nbsp;&nbsp;range: '340 miles'<br>}<br>Object.setPrototypeOf(tesla, electricVehicle)<br><br>console.log(tesla.motor)",
      "question": "",
      "displayAsCode": ["given"],
      "q1": "The value of <pre>tesla.motor</pre> is ",
      "q2": "",
      "choices": [],
      "answer": "",
      "answers": ["electric"],
      "explanation": "<pre>Object.setPrototypeOf</pre> is preferred over the older <pre>__proto__</pre>.",
      "moreInfo": "https://javascript.info/prototype-inheritance",
      "size": 9
    },
    {
      "id": 423,
      "type": "FillBlank",
      "given": "let electricVehicle = {<br>&nbsp;&nbsp;motor: 'electric',<br>&nbsp;&nbsp;emissions: 'none',<br>&nbsp;&nbsp;outlook() {return 'Electric vehicles are poised to continue gaining in popularity.'}<br>}<br><br>let tesla = {<br>&nbsp;&nbsp;mark: 'Tesla',<br>&nbsp;&nbsp;range: '340 miles'<br>}<br><br>Object.setPrototypeOf(tesla, electricVehicle)<br><br>for (property in tesla) {<br>&nbsp;&nbsp;console.log(property)<br>}",
      "question": "",
      "displayAsCode": ["given"],
      "q1": "The number of properties logged to the console is ",
      "q2": "",
      "choices": [],
      "answer": "",
      "answers": ["5"],
      "explanation": "",
      "moreInfo": "https://javascript.info/prototype-inheritance",
      "size": 2
    },
    {
      "id": 424,
      "type": "FillBlank",
      "given": "let electricVehicle = {<br>&nbsp;&nbsp;motor: 'electric',<br>&nbsp;&nbsp;emissions: 'none',<br>&nbsp;&nbsp;outlook() { return 'Electric vehicles are poised to continue gaining in popularity.' }<br>}<br><br>let tesla = {<br>&nbsp;&nbsp;mark: 'Tesla',<br>&nbsp;&nbsp;range: '340 miles'<br>}<br><br>Object.setPrototypeOf(tesla, electricVehicle)<br>for (property in tesla) {<br>&nbsp;&nbsp;if (tesla.hasOwnProperty(property)) {<br>&nbsp;&nbsp;&nbsp;&nbsp;console.log(property)<br>&nbsp;&nbsp;}<br>}",
      "question": "",
      "displayAsCode": ["given"],
      "q1": "The number of properties logged to the console is ",
      "q2": "",
      "choices": [],
      "answer": "",
      "answers": ["2"],
      "explanation": "",
      "moreInfo": "https://javascript.info/prototype-inheritance",
      "size": 2
    },
    {
      "id": 425,
      "type": "MultipleChoice",
      "given": "let vehicle = {<br>&nbsp;&nbsp;toString() {<br>&nbsp;&nbsp;&nbsp;&nbsp;return `${this.year} ${this.mark} ${this.make}`<br>&nbsp;&nbsp;}<br>}<br><br>let car = {<br>&nbsp;&nbsp;make: 'Tesla',<br>&nbsp;&nbsp;mark: 'Model S Plaid',<br>&nbsp;&nbsp;year: 2021<br>}",
      "question": "In <pre>vehicle</pre>'s <pre>toString</pre> method, what does <pre>this</pre> refer to?",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": ["<pre>vehicle</pre>", "<pre>car</pre>", "<pre>global</pre>", "nothing &mdash; in this context, <pre>this</pre> is undefined"],
      "answer": 1,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/native-prototypes",
      "size": 0
    },
    {
      "id": 426,
      "type": "TrueOrFalse",
      "given": "function myFunc() {}<br><br>console.log(myFunc.__proto__ === Function.prototype)",
      "question": "The console prints out <em>false</em>",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": false,
      "answers": [],
      "explanation": "Functions inherit from <pre>Function.prototype</pre>",
      "moreInfo": "https://javascript.info/native-prototypes",
      "size": 0
    },
    {
      "id": 427,
      "type": "TrueOrFalse",
      "given": "function myFunc() {}<br><br>console.log(myFunc.__proto__.__proto__ === Object.prototype)",
      "question": "The console prints out <em>true</em>",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/native-prototypes",
      "size": 0
    },
    {
      "id": 428,
      "type": "TrueOrFalse",
      "given": "Object.prototype.log = function() {<br>&nbsp;&nbsp;console.log(this)<br>}<br><br>let arr = [0,1,2,3,5,8]<br><br>arr.log()",
      "question": "This will print the array to the console",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [],
      "explanation": "",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 429,
      "type": "TrueOrFalse",
      "given": "Object.prototype.log = function() {<br>&nbsp;&nbsp;console.log(this)<br>}<br><br>'Hello'.log()",
      "question": "This code throws a run-time exception",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": false,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/native-prototypes",
      "size": 0
    },
    {
      "id": 4210,
      "type": "TrueOrFalse",
      "given": "Object.prototype.log = function() {<br>&nbsp;&nbsp;console.log(this)<br>}<br><br>let message = {<br>&nbsp;&nbsp;0: 'Fourscore',<br>&nbsp;&nbsp;1: 'and',<br>&nbsp;&nbsp;2: 'seven',<br>&nbsp;&nbsp;3: 'years',<br>&nbsp;&nbsp;4: 'ago',<br>&nbsp;&nbsp;length: 5<br>}<br><br>message.join = Array.prototype.join<br><br>message.join(' ').log()",
      "question": "This code will print the joined message to the console",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/native-prototypes",
      "size": 0
    },
    {
      "id": 2138,
      "type": "MultipleChoice",
      "given": "console.log(typeof +'1')",
      "question": "What will be logged to the console?",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": ["number", "object", "primitive", "string"],
      "answer": 0,
      "answers": [],
      "explanation": "",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 2139,
      "type": "MultipleChoice",
      "given": "console.log(typeof +true)",
      "question": "What will be logged to the console?",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": ["number", "object", "boolean", "string"],
      "answer": 0,
      "answers": [],
      "explanation": "",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 413,
      "type": "FillBlank",
      "given": "Fill the blank to log the person's first name to the console",
      "question": "",
      "displayAsCode": ["q1","q2","answer"],
      "q1": "let person = {<br>&nbsp;&nbsp;firstName: 'Hal',<br>&nbsp;&nbsp;lastName: 'Helms'<br>}<br>",
      "q2": "",
      "choices": [],
      "answer": "",
      "answers": ["console.log(person.firstName)", "console.log(person.firstName);"],
      "explanation": "",
      "moreInfo": "",
      "size": 30
    },
    {
      "id": 414,
      "type": "TrueOrFalse",
      "given": "let person = {<br>&nbsp;&nbsp;firstName: 'Hal',<br>&nbsp;&nbsp;lastName: 'Helms',<br>&nbsp;&nbsp;greet: function () {<br>&nbsp;&nbsp;&nbsp;&nbsp;return `Hi, I am ${this.firstName} ${this.lastName}`<br>&nbsp;&nbsp;}<br>}<br><br>console.log(person.greet())",
      "question": "This code will print <em>Hi, I am Hal Helms</em> to the console",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [],
      "explanation": "",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 6219,
      "type": "TrueOrFalse",
      "given": "let person = {<br>&nbsp;&nbsp;firstName: 'Hal',<br>&nbsp;&nbsp;lastName: 'Helms',<br>&nbsp;&nbsp;greet: function () {<br>&nbsp;&nbsp;&nbsp;&nbsp;return `Hi, I am ${this.firstName} ${this.lastName}`<br>&nbsp;&nbsp;},<br>&nbsp;&nbsp;get sayHi() {<br>&nbsp;&nbsp;&nbsp;&nbsp;return this.greet()<br>&nbsp;&nbsp;}<br>}<br><br>console.log(person.sayHi)",
      "question": "This code will print <em>Hi, I am Hal Helms</em> to the console",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [],
      "explanation": "",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 321,
      "type": "FillBlank",
      "given": "console.log(false || 'Hello')",
      "question": "",
      "displayAsCode": ["given"],
      "q1": "This code will print ",
      "q2": " to the console",
      "choices": [],
      "answer": "",
      "answers": ["Hello", "'Hello'", "\"Hello\""],
      "explanation": "",
      "moreInfo": "",
      "size": 7
    },
    {
      "id": 4211,
      "type": "TrueOrFalse",
      "given": "let vehicle = {<br>&nbsp;&nbsp;start() {<br>&nbsp;&nbsp;&nbsp;&nbsp;console.log('vroom')<br>&nbsp;&nbsp;}<br>}<br><br>let tesla = Object.create(vehicle)",
      "question": "This code produces a new object whose prototype is <pre>vehicle</pre>",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/prototype-methods",
      "size": 0
    },
    {
      "id": 415,
      "type": "ValidOrNot",
      "given": "",
      "question": "let obj = new Object()",
      "displayAsCode": ["question"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [],
      "explanation": "",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 416,
      "type": "TrueOrFalse",
      "given": "let obj = {}",
      "question": "You may only use <em>object literal</em> notation if you also have stated: <pre>use strict</pre>",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": false,
      "answers": [],
      "explanation": "",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 417,
      "type": "ValidOrNot",
      "given": "",
      "question": "let obj = {<br>&nbsp;&nbsp;addProperties = true<br>&nbsp;&nbsp;if (this.addProperties) {<br>&nbsp;&nbsp;&nbsp;&nbsp;date = new Date()<br>&nbsp;&nbsp;}<br>}",
      "displayAsCode": ["question"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": false,
      "answers": [],
      "explanation": "",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 418,
      "type": "FillBlank",
      "given": "Add a property called <pre>name</pre> with a given value of <pre>null</pre>",
      "question": "",
      "displayAsCode": ["answer", "q1", "q2"],
      "q1": "let person = {<br>&nbsp;&nbsp;age: null,<br>&nbsp;&nbsp;",
      "q2": "<br>}",
      "choices": [],
      "answer": "",
      "answers": ["name: null", "name: null"],
      "explanation": "",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 419,
      "type": "FillBlank",
      "given": "Remove the property <pre>age</pre>",
      "question": "",
      "displayAsCode": ["answer", "q1", "q2"],
      "q1": "let person = {<br>&nbsp;&nbsp;age: null,<br>&nbsp;&nbsp;name: null<br>}<br><br>",
      "q2": "",
      "choices": [],
      "answer": "",
      "answers": ["delete person.age", "delete person['age']"],
      "explanation": "",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 4110,
      "type": "MultipleChoice",
      "given": "let person = {<br>&nbsp;&nbsp;age: null,<br>&nbsp;&nbsp;name: null<br>}<br><br>person.address = {}",
      "question": "What will this code do?",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": ["Throw an error", "Nothing &mdash; properties must be defined when the object is defined", "Add an <pre>address</pre> property to <pre>person</pre>", "Create a variable in the global or window scope"],
      "answer": 2,
      "answers": [],
      "explanation": "",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 4111,
      "type": "ValidOrNot",
      "given": "",
      "question": "let person = {<br>&nbsp;&nbsp;age: null,<br>&nbsp;&nbsp;name: null,<br>&nbsp;&nbsp;\"is married\": false<br>}",
      "displayAsCode": ["question"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [],
      "explanation": "Property names consisting of more than one word can be used if written in quotes",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 4112,
      "type": "ValidOrNot",
      "given": "",
      "question": "let person = {<br>&nbsp;&nbsp;age: null,<br>&nbsp;&nbsp;name: null,<br>}<br><br>console.log(person['age'])",
      "displayAsCode": ["question"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [],
      "explanation": "The <em>bracket notation</em> can be used for any property name",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 4112,
      "type": "FillBlank",
      "given": "function makeBox(height, width, depth) {<br>&nbsp;&nbsp;return { height, width, depth }<br>}<br><br>let box = makeBox(510, 250, 120)<br><br>console.log(box.depth)",
      "question": "",
      "displayAsCode": ["given"],
      "q1": "The number logged to the console will be ",
      "q2": "",
      "choices": [],
      "answer": "",
      "answers": ["120", `"120"`,"'120'"],
      "explanation": "",
      "moreInfo": "https://javascript.info/object#property-value-shorthand",
      "size": 5
    },
    {
      "id": 4113,
      "type": "ValidOrNot",
      "given": "",
      "question": "let obj = {<br>&nbsp;&nbsp;Math: 'My own deviously wrong mathematical functions'<br>}",
      "displayAsCode": ["question"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [],
      "explanation": "Yes, this seems <em>very</em> wrong. See link for explanation.",
      "moreInfo": "https://javascript.info/object#property-names-limitations",
      "size": 0
    },
    {
      "id": 434,
      "type": "ValidOrNot",
      "given": "",
      "question": "let explanations = {<br>&nbsp;&nbsp;[Math.pi]: 'The value of π',<br>&nbsp;&nbsp;[Math.ceil]: 'A decimal value rounded up to the next integer'<br>}<br><br>console.log(explanations[Math.ceil])",
      "displayAsCode": ["question"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/object#computed-properties",
      "size": 0
    },
    {
      "id": 8143,
      "type": "MultipleChoice",
      "given": "let msg = \"We're from the government and we're here to help.\"<br>let prevarication = msg<br>msg = \"We're just kidding. We're here to tax you.\"<br>console.log(prevarication)",
      "question": "What will log to the console?",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": ["We're from the government and we're here to help", "We're just kiddinig. We're here to tax you.", "Nothing will be displayed", "Error: Duplicate variable assignment"],
      "answer": 0,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/object-copy",
      "size": 0
    },
    {
      "id": 8144,
      "type": "FillBlank",
      "given": "let myCat = {<br>&nbsp;&nbsp;name: 'Amadeus',<br>&nbsp;&nbsp;color: 'black'<br>}<br><br>let yourCat = myCat<br><br>yourCat.color = 'orange'",
      "question": "",
      "displayAsCode": ["given"],
      "q1": "The value of <pre>myCat</pre> is ",
      "q2": "",
      "choices": [],
      "answer": "",
      "answers": ['orange'],
      "explanation": "",
      "moreInfo": "https://javascript.info/object-copy",
      "size": 6
    },
    {
      "id": 8145,
      "type": "FillBlank",
      "given": "let myCat = {<br>&nbsp;&nbsp;name: 'Amadeus',<br>&nbsp;&nbsp;color: 'black'<br>}<br><br>let yourCat = myCat<br><br>console.log(myCat === yourCat)",
      "question": "",
      "displayAsCode": ["given", "answer"],
      "q1": "The value logged to the console is ",
      "q2": "",
      "choices": [],
      "answer": "",
      "answers": ['true'],
      "explanation": "",
      "moreInfo": "https://javascript.info/object-copy",
      "size": 5
    },
    {
      "id": 4212,
      "type": "TrueOrFalse",
      "given": "let myCat = {<br>&nbsp;&nbsp;name: 'Amadeus',<br>&nbsp;&nbsp;color: 'black'<br>}<br><br>let yourCat = {}<br><br>for (let key in myCat) {<br>&nbsp;&nbsp;yourCat[key] = myCat[key]<br>}<br>yourCat.color = 'orange'",
      "question": "The color of <pre>myCat</pre> is orange",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": false,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/object-copy#cloning-and-merging-object-assign",
      "size": 0
    },
    {
      "id": 4213,
      "type": "TrueOrFalse",
      "given": "let myCat = {<br>&nbsp;&nbsp;name: 'Amadeus',<br>&nbsp;&nbsp;color: 'black'<br>}<br><br>let yourCat = {}<br><br>Object.assign(yourCat, myCat)<br><br>yourCat.color = 'orange'",
      "question": "The color of <pre>myCat</pre> is black",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/object-copy#cloning-and-merging-object-assign",
      "size": 0
    },
    {
      "id": 4214,
      "type": "TrueOrFalse",
      "given": "let amadeus = {<br>&nbsp;&nbsp;name: 'Amadeus',<br>&nbsp;&nbsp;color: 'black'<br>}<br><br>let namelessCat1 = {<br>&nbsp;&nbsp;eats: 'fish'<br>}<br><br>let namelessCat2 = {<br>&nbsp;&nbsp;tail: 'long'<br>}<br><br>let superCat = {}<br><br>Object.assign(superCat, amadeus, namelessCat1, namelessCat2)",
      "question": "<pre>amadeus</pre> has no tail",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": false,
      "answers": [],
      "explanation": "https://javascript.info/object-copy#cloning-and-merging-object-assign",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 4215,
      "type": "TrueOrFalse",
      "given": "let amadeus = {<br>&nbsp;&nbsp;name: 'Amadeus',<br>&nbsp;&nbsp;color: 'black',<br>&nbsp;&nbsp;tail: 'short<br>}<br><br>let namelessCat1 = {<br>&nbsp;&nbsp;eats: 'fish'<br>}<br><br>let namelessCat2 = {<br>&nbsp;&nbsp;tail: 'long'<br>}<br><br>let superCat = {}<br><br>Object.assign(superCat, amadeus, namelessCat1, namelessCat2)",
      "question": "<pre>amadeus</pre> has a short tail",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": false,
      "answers": [],
      "explanation": "https://javascript.info/object-copy#cloning-and-merging-object-assign",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 4114,
      "type": "TrueOrFalse",
      "given": "const amadeus = {<br>&nbsp;&nbsp;name: 'Amadeus',<br>&nbsp;&nbsp;color: 'black',<br>&nbsp;&nbsp;tail: 'short'<br>}<br><br>amadeus.tail = 'long'",
      "question": "This causes an error, as <pre>amadeus</pre> has been declared a <pre>const</pre>.",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": false,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/object-copy#nested-cloning",
      "size": 0
    },
    {
      "id": 8214,
      "type": "TrueOrFalse",
      "given": "",
      "question": "To force the garbage collector to sweep for unreferenced variables, use <pre>system.gc()</pre>",
      "displayAsCode": [],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": false,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/garbage-collection#internal-algorithms",
      "size": 0
    },
    {
      "id": 4216,
      "type": "MultipleChoice",
      "given": "const amadeus = {<br>&bnsp;&bnsp;name: 'Amadeus',<br>&bnsp;&bnsp;color: 'black',<br>&bnsp;&bnsp;tail: 'short',<br>}<br><br>let sayHi = function() {<br>&bnsp;&bnsp;return `Hi, I'm ${this.name} and I'm a ${this.color} cat`<br>}<br><br>amadeus.sayHi = sayHi<br><br>console.log(amadeus.sayHi())",
      "question": "What will running this code produce?",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": ["Hi, I'm Amadeus and I'm a black cat", "Hi, I'm undefined and I'm a undefined cat", "Error, as <pre>amadeus</pre> is declared as a <pre>const</pre>","Nothing &mdash; you can't assign a function to an object after it's been declared. It will be ignored."],
      "answer": 0,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/object-methods#this-in-methods",
      "size": 0
    },
    {
      "id": 4115,
      "type": "ValidOrNot",
      "given": "",
      "question": "let myComputer = {<br>&nbsp;&nbsp;maker: 'Apple',<br>&nbsp;&nbsp;model: 'iMac Pro',<br>&nbsp;&nbsp;sayHi() {<br>&nbsp;&nbsp;&nbsp;&nbsp;console.log(`I am an ${myComputer.maker} computer, specifically a ${myComputer.model}`)<br>&nbsp;&nbsp;}<br>}",
      "displayAsCode": ["question"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [],
      "explanation": "It is valid &mdash; but using the name of the object instead of <pre>this</pre> is a <em>bad</em> idea",
      "moreInfo": "https://javascript.info/object-methods#this-in-methods",
      "size": 0
    },
    {
      "id": 4116,
      "type": "MultipleChoice",
      "given": "let myComputer = {<br>&nbsp;&nbsp;maker: 'Apple',<br>&nbsp;&nbsp;model: 'iMac Pro',<br>&nbsp;&nbsp;sayHi() {<br>&nbsp;&nbsp;&nbsp;&nbsp;console.log(`I am an ${myComputer.maker} computer, specifically a ${myComputer.model}`)<br>&nbsp;&nbsp;}<br>}<br><br>let yourComputer = myComputer<br>myComputer = null<br><br>yourComputer.sayHi()",
      "question": "What will be logged to the console?",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": ["I am an Apple computer, specifically a iMac Pro", "I am an undefined computer, specifically a undefined", "I am an computer, specifically a", "Error"],
      "answer": 3,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/object-methods#this-in-methods",
      "size": 0
    },
    {
      "id": 6136,
      "type": "TrueOrFalse",
      "given": "function introduceYourself() {<br>&nbsp;&nbsp;console.log(`Hi, I'm ${this.name}`)<br>}<br><br>introduceYourself()",
      "question": "This code will throw a runtime exception",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": false,
      "answers": [],
      "explanation": "<pre>this.name</pre> will simply evaluate to <pre>undefined</pre> with no exception thrown",
      "moreInfo": "https://javascript.info/object-methods#this-is-not-bound",
      "size": 0
    },
    {
      "id": 4217,
      "type": "MultipleChoice",
      "given": "function introduceYourself() {<br>&nbsp;&nbsp;console.log(`Hi, I'm ${this.name}`)<br>}<br><br>let ana = {<br>&nbsp;&nbsp;name: 'Ana'<br>}<br><br>let carmen = {<br>&nbsp;&nbsp;name: 'Carmen'<br>}<br><br>ana.hi = introduceYourself<br>carmen.hi = introduceYourself<br><br>ana.hi()",
      "question": "What will happen when this code is run?",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": ["An exception will be thrown", "<em>Hi, I'm Ana</em> will be logged to the console", "<em>Hi, I'm undefined</em> will be logged to the console", "<em>Hi, I'm</em> will be logged to the console"],
      "answer": 1,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/object-methods#this-is-not-bound",
      "size": 0
    },
    {
      "id": 4218,
      "type": "MultipleChoice",
      "given": "function introduceYourself() {<br>&nbsp;&nbsp;console.log(`Hi, I'm ${this.name}`)<br>}<br><br>let ana = {<br>&nbsp;&nbsp;name: 'Ana'<br>}<br><br>introduceYourself = function() {<br>&nbsp;&nbsp;console.log(`Hi, I'm a function`)<br>}<br><br>ana.hi = introduceYourself<br>ana.hi()",
      "question": "What will happen when this code is run?",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": ["<em>Hi, I'm Ana</em> will be logged to the console", "<em>Hi, I'm a function</em> will be logged to the console", "<em>Hi, I'm undefined</em> will be logged to the console", "An exception will be thrown"],
      "answer": 1,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/object-methods#this-in-methods",
      "size": 0
    },
    {
      "id": 6137,
      "type": "MultipleChoice",
      "given": "",
      "question": "What does the expression, <em>unbound <pre>this</pre></em> refer to?",
      "displayAsCode": [],
      "q1": "",
      "q2": "",
      "choices": ["<pre>this</pre> takes on the context of whatever calls the function", "<pre>this</pre> always refers to the <em>global</em> object", "<pre>this</pre> refers to the context in which the function is declared", "<pre>this</pre> points to the context in which it was written"],
      "answer": 0,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/object-methods#this-is-not-bound",
      "size": 0
    },
    {
      "id": 6220,
      "type": "FillBlank",
      "given": "let firstName = 'Amadeus'<br><br>let user = {<br>&nbsp;&nbsp;firstName: 'Ana',<br>&nbsp;&nbsp;sayHi() {<br>&nbsp;&nbsp;&nbsp;&nbsp;let arrow = (firstName = 'Cody') => alert(this.firstName)<br>&nbsp;&nbsp;&nbsp;&nbsp;arrow()<br>&nbsp;&nbsp;}<br>}",
      "question": "What name is shown in the alert box?",
      "displayAsCode": ["given"],
      "q1": "The name shown in the alert box is ",
      "q2": "",
      "choices": [],
      "answer": "",
      "answers": ["Ana"],
      "explanation": "",
      "moreInfo": "https://javascript.info/object-methods#this-is-not-bound",
      "size": 8
    },
    {
      "id": 4117,
      "type": "ValidOrNot",
      "given": "",
      "question": "function Book(title, author) {<br>&nbsp;&nbsp;this.title = title<br>&nbsp;&nbsp;this.author = author<br>}<br><br>let myBook = new Book('A Prayer for Owen Meany', 'John Irving')",
      "displayAsCode": ["question"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/constructor-new",
      "size": 0
    },
    {
      "id": 4118,
      "type": "ValidOrNot",
      "given": "",
      "question": "function Book(title, author) {<br>&nbsp;&nbsp;this.title = title<br>&nbsp;&nbsp;this.author = author<br>}<br><br>let myBook = Book.new('A Prayer for Owen Meany', 'John Irving')",
      "displayAsCode": ["question"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": false,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/constructor-new",
      "size": 0
    },
    {
      "id": 4119,
      "type": "TrueOrFalse",
      "given": "let myBook = new function () {}",
      "question": "This code throws an exception",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": false,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/constructor-new",
      "size": 0
    },
    {
      "id": 4219,
      "type": "FillBlank",
      "given": "Add the code to create a function called <pre>abstract</pre>",
      "question": "",
      "displayAsCode": ["answer", "q1", "q2"],
      "q1": "function Book(title, author) {<br>&nbsp;&nbsp;this.title = title<br>&nbsp;&nbsp;this.author = author<br>&nbsp;&nbsp;",
      "q2": "&nbsp;= () => `${this.title} by ${this.author}`<br>}",
      "choices": [],
      "answer": "",
      "answers": ["this.abstract"],
      "explanation": "",
      "moreInfo": "",
      "size": 13
    },
    {
      "id": 4220,
      "type": "MultipleChoice",
      "given": "let person = {<br>&nbsp;&nbsp;firstName: 'Hal',<br>&nbsp;&nbsp;lastName: 'Helms'<br>}<br><br>console.log(person.address.street)",
      "question": "What will happen when this code is run?",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": ["<pre>undefined</pre> is printed to the console", "An empty string is printed to the console", "<em>[object: address]</em> is printed to the console.", "An error will be thrown"],
      "answer": 3,
      "answers": [],
      "explanation": "",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 4221,
      "type": "FillBlank",
      "given": "Fill in the blank to prevent an error from being thrown",
      "question": "",
      "displayAsCode": ["answer", "q1", "q2"],
      "q1": "let person = {<br>&nbsp;&nbsp;firstName: 'Hal',<br>&nbsp;&nbsp;lastName: 'Helms'<br>}<br><br>console.log(person.address",
      "q2": "street)",
      "choices": [],
      "answer": "",
      "answers": ["?."],
      "explanation": "",
      "moreInfo": "https://javascript.info/optional-chaining",
      "size": 2
    },
    {
      "id": 8311,
      "type": "TrueOrFalse",
      "given": "let myId = Symbol()",
      "question": "This code creates a new <pre>symbol</pre> value",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/symbol",
      "size": 0
    },
    {
      "id": 8312,
      "type": "FillBlank",
      "given": "let myId = Symbol()<br>let yourId = Symbol()<br>console.log(myId === yourId)",
      "question": "",
      "displayAsCode": ["given"],
      "q1": "This code logs ",
      "q2": "",
      "choices": [],
      "answer": "",
      "answers": ["false"],
      "explanation": "",
      "moreInfo": "https://javascript.info/symbol",
      "size": 8
    },
    {
      "id": 8313,
      "type": "FillBlank",
      "given": "let myId = Symbol()<br>let yourId = Symbol('')<br>console.log(myId === yourId)",
      "question": "",
      "displayAsCode": ["given"],
      "q1": "This code logs ",
      "q2": "",
      "choices": [],
      "answer": "",
      "answers": ["false"],
      "explanation": "",
      "moreInfo": "https://javascript.info/symbol",
      "size": 8
    },
    {
      "id": 8314,
      "type": "TrueOrFalse",
      "given": "const id = 'A4453xls74'<br>let myId = Symbol(id)<br>let yourId = Symbol(id)<br>console.log(myId === yourId)",
      "question": "This logs <pre>true</pre> to the console",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": false,
      "answers": [],
      "explanation": "https://javascript.info/symbol",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 8315,
      "type": "MultipleChoice",
      "given": "let ana = {<br>&nbsp;&nbsp;name: 'Ana'<br>}<br><br>let company = {<br>&nbsp;&nbsp;jsCert: Symbol('JS'),<br>&nbsp;&nbsp;certify: function(person, testScore) {<br>&nbsp;&nbsp;&nbsp;&nbsp;if (testScore > 80) {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;person[this.jsCert] = true<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;},<br>&nbsp;&nbsp;apply(person) {<br>&nbsp;&nbsp;&nbsp;&nbsp;if (person[this.jsCert]) {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return `You're hired`<br>&nbsp;&nbsp;&nbsp;&nbsp;} else {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return `Sorry, you need JS skills`<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;}<br>}",
      "question": "Can Ana see if she's JS-certified before applying?",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": ["Yes, she can look to see if she has the <pre>jsCert</pre> property", "No, she has no access to this information", "We'll never know, since this code throws an exception"],
      "answer": "1",
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/symbol#hidden-properties",
      "size": 0
    },
    {
      "id": 4222,
      "type": "ValidOrNot",
      "given": "",
      "question": "let user = {<br>&nbsp;&nbsp;{skill: 'JS'}: true,<br>&nbsp;&nbsp;{skill: 'Rust'}: false<br>}",
      "displayAsCode": ["question"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": false,
      "answers": [],
      "explanation": "You can use objects for keys in <em>Maps</em> but not in objects",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 221,
      "type": "TrueOrFalse",
      "given": "'hello, world'.toUpperCase()",
      "question": "This code will error out since a <em>string</em> is a primitive and has no methods",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": false,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/primitives-methods#a-primitive-as-an-object",
      "size": 0
    },
    {
      "id": 222,
      "type": "TrueOrFalse",
      "given": "3.1415.toFixed(2)",
      "question": "This will produce <em>3.14</em>",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/primitives-methods#a-primitive-as-an-object",
      "size": 0
    },
    {
      "id": 223,
      "type": "ValidOrNot",
      "given": "",
      "question": "const BILLION = 1_000_000_000",
      "displayAsCode": ["question"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/number",
      "size": 0
    },
    {
      "id": 224,
      "type": "TrueOrFalse",
      "given": "const BILLION = 1_000_000_000<br><br>BILLION === 1e9",
      "question": "This code returns <pre>true</pre>",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/number",
      "size": 0
    },
    {
      "id": 8146,
      "type": "FillBlank",
      "given": "Round down to nearest integer",
      "question": "",
      "displayAsCode": ["answer", "q1", "q2"],
      "q1": "let num = 3.87<br>",
      "q2": "(num)",
      "choices": [],
      "answer": "",
      "answers": ["Math.floor"],
      "explanation": "",
      "moreInfo": "https://javascript.info/number#rounding",
      "size": 11
    },
    {
      "id": 8147,
      "type": "FillBlank",
      "given": "Round up to nearest integer",
      "question": "",
      "displayAsCode": ["answer", "q1", "q2"],
      "q1": "let num = 3.14<br>",
      "q2": "(num)",
      "choices": [],
      "answer": "",
      "answers": ["Math.ceil"],
      "explanation": "",
      "moreInfo": "https://javascript.info/number#rounding",
      "size": 9
    },
    {
      "id": 8148,
      "type": "FillBlank",
      "given": "Round to nearest integer (up or down)",
      "question": "",
      "displayAsCode": ["answer", "q1", "q2"],
      "q1": "let num = 3.62<br>",
      "q2": "(num)",
      "choices": [],
      "answer": "",
      "answers": ["Math.round"],
      "explanation": "",
      "moreInfo": "https://javascript.info/number#rounding",
      "size": 11
    },
    {
      "id": 231,
      "type": "TrueOrFalse",
      "given": "let x = 0.10<br>let y = 0.20<br><br>x + y === 0.30",
      "question": "",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": false,
      "answers": [],
      "explanation": "Make sure you understand this",
      "moreInfo": "https://javascript.info/number#imprecise-calculations",
      "size": 0
    },
    {
      "id": 232,
      "type": "TrueOrFalse",
      "given": "let x = 0.10<br>let y = 0.20<br><br>x + y === 0.30",
      "question": "This returns true",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": false,
      "answers": [],
      "explanation": "Make sure you understand this",
      "moreInfo": "https://javascript.info/number#imprecise-calculations",
      "size": 0
    },
    {
      "id": 233,
      "type": "TrueOrFalse",
      "given": "let x = 0.10<br>let y = 0.20<br>let sum = x + y<br><br>sum.toFixed(2) === 0.30",
      "question": "This returns true",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": false,
      "answers": [],
      "explanation": "<pre>toFixed()</pre> returns a <em>string</em> and the triple-equals checks for both value <em>and</em> type, causing the condition to return <pre>false</pre>",
      "moreInfo": "https://javascript.info/number#imprecise-calculations",
      "size": 0
    },
    {
      "id": 8149,
      "type": "TrueOrFalse",
      "given": "let points = `100pts`<br>if (parseInt(points) == 100) {<br>&nbsp;&nbsp;console.log('You have 100 points')<br>}",
      "question": "The if check will return true",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [],
      "explanation": "",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 234,
      "type": "TrueOrFalse",
      "given": "let a = parseInt('100')<br>let b = +'100'<br>Object.is(a, b)",
      "question": "This returns false",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": false,
      "answers": [],
      "explanation": "",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 711,
      "type": "FillBlank",
      "given": "Fill in the blank to find the larger value of <pre>a</pre> and <pre>b</pre>",
      "question": "",
      "displayAsCode": ["answer", "q2"],
      "q1": "",
      "q2": "(a,b)",
      "choices": [],
      "answer": "",
      "answers": ["Math.max"],
      "explanation": "",
      "moreInfo": "https://javascript.info/number#other-math-functions",
      "size": 9
    },
    {
      "id": 714,
      "type": "FillBlank",
      "given": "Fill in the blank to find the lesser value of <pre>a</pre> and <pre>b</pre>",
      "question": "",
      "displayAsCode": ["answer", "q2"],
      "q1": "",
      "q2": "(a,b)",
      "choices": [],
      "answer": "",
      "answers": ["Math.min"],
      "explanation": "",
      "moreInfo": "https://javascript.info/number#other-math-functions",
      "size": 9
    },
    {
      "id": 712,
      "type": "FillBlank",
      "given": "Fill in the blank to generate a random number between 0 and 1 (not including 1)",
      "question": "",
      "displayAsCode": ["answer"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": "",
      "answers": ["Math.random()"],
      "explanation": "",
      "moreInfo": "https://javascript.info/number#other-math-functions",
      "size": 12
    },
    {
      "id": 713,
      "type": "FillBlank",
      "given": "Fill in the blank to raise 8 to the third power",
      "question": "",
      "displayAsCode": ["answer", "q2"],
      "q1": "",
      "q2": "(8, 3)",
      "choices": [],
      "answer": "",
      "answers": ["Math.pow"],
      "explanation": "",
      "moreInfo": "https://javascript.info/number#other-math-functions",
      "size": 8
    },
    {
      "id": 2140,
      "type": "TrueOrFalse",
      "given": "",
      "question": "To create strings in excess of 16 bits, use <pre>new BigString()</pre>",
      "displayAsCode": [],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": false,
      "answers": [],
      "explanation": "No such type",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 2141,
      "type": "TrueOrFalse",
      "given": "",
      "question": "Best practice is to use single quotes for <pre>char</pre>s and double quotes for regular strings",
      "displayAsCode": [],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": false,
      "answers": [],
      "explanation": "JavaScript has no <pre>char</pre> data type",
      "moreInfo": "https://javascript.info/string",
      "size": 0
    },
    {
      "id": 2142,
      "type": "FillBlank",
      "given": "Use string interpolation to generate a message from the author",
      "question": "",
      "displayAsCode": ["answer", "q1", "q2"],
      "q1": "let author = 'Hal Helms'<br>let msg = `Brought to you by ",
      "q2": "`",
      "choices": [],
      "answer": "",
      "answers": ["${author}"],
      "explanation": "",
      "moreInfo": "https://javascript.info/string",
      "size": 9
    },
    {
      "id": 2143,
      "type": "FillBlank",
      "given": "",
      "question": "",
      "displayAsCode": [],
      "q1": "Using <pre>+</pre> to join strings is called ",
      "q2": "",
      "choices": [],
      "answer": "",
      "answers": ["concatenation"],
      "explanation": "",
      "moreInfo": "",
      "size": 15
    },
    {
      "id": 225,
      "type": "FillBlank",
      "given": "Use the correct escape character/s to break the string into two lines",
      "question": "",
      "displayAsCode": ["answer","q1","q2"],
      "q1": "let author = 'Hal Helms'<br>let brief = 'Heart of Darkness' ",
      "q2": "by Jack London",
      "choices": [],
      "answer": "",
      "answers": ["\\n"],
      "explanation": "",
      "moreInfo": "",
      "size": 2
    },
    {
      "id": 226,
      "type": "FillBlank",
      "given": "",
      "question": "",
      "displayAsCode": ["answer"],
      "q1": "The escape character is ",
      "q2": "",
      "choices": [],
      "answer": "",
      "answers": ["\\"],
      "explanation": "",
      "moreInfo": "",
      "size": 2
    },
    {
      "id": 715,
      "type": "FillBlank",
      "given": "Fill in the blank to get the author's initial",
      "question": "",
      "displayAsCode": ["answer", "q1","q2"],
      "q1": "let author = 'Hal B Helms'<br>console.log(",
      "q2": ")",
      "choices": [],
      "answer": "",
      "answers": ["author[4]"],
      "explanation": "",
      "moreInfo": "https://javascript.info/string#string-length",
      "size": 10
    },
    {
      "id": 227,
      "type": "TrueOrFalse",
      "given": "let author = 'Hal H Helms'<br>author[4] = 'B'",
      "question": "This code will change the author's initial from 'H' to 'B'",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": false,
      "answers": [],
      "explanation": "Strings are <em>immutable</em> &mdash; can't be changed",
      "moreInfo": "https://javascript.info/string#strings-are-immutable",
      "size": 0
    },
    {
      "id": 716,
      "type": "FillBlank",
      "given": "Fill in the blank to change <pre>api</pre> to all upper-case",
      "question": "",
      "displayAsCode": ["answer","q1","q2"],
      "q1": "let api = 'https://mydomain.com/api/'<br>api.",
      "q2": "",
      "choices": [],
      "answer": "",
      "answers": ["toUpperCase()"],
      "explanation": "",
      "moreInfo": "https://javascript.info/string#changing-the-case",
      "size": 18
    },
    {
      "id": 717,
      "type": "FillBlank",
      "given": "Fill in the blank to change <pre>api</pre> to all lower-case",
      "question": "",
      "displayAsCode": ["answer","q1","q2"],
      "q1": "let api = 'HTTPS://mydomain.com/API/'<br>api.",
      "q2": "",
      "choices": [],
      "answer": "",
      "answers": ["toLowerCase()"],
      "explanation": "",
      "moreInfo": "https://javascript.info/string#changing-the-case",
      "size": 18
    },
    {
      "id": 718,
      "type": "FillBlank",
      "given": "Fill in the blank to join <pre>firstName</pre> and <pre>lastName</pre> with a space separating the two",
      "question": "",
      "displayAsCode": ["q1","q2","answer"],
      "q1": "let firstName = 'Babe'<br>let lastName = 'Ruth'<br><br>let fullName = firstName.concat(",
      "q2": ")",
      "choices": [],
      "answer": "",
      "answers": ["' ', lastName", "\" \", lastName"],
      "explanation": "",
      "moreInfo": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/concat",
      "size": 14
    },
    {
      "id": 719,
      "type": "FillBlank",
      "given": "Fill in the blank to see if <currentCode> ends with the string, <pre>_DEV</pre>",
      "question": "",
      "displayAsCode": ["q1","q2","answer"],
      "q1": "let currentCode = '020921_DEV'<br>if (currentCode.",
      "q2": ") {<br>&nbsp;&nbsp;console.log('You are in the DEV environment')<br>}",
      "choices": [],
      "answer": "",
      "answers": ["endsWith('_DEV')", "endsWith(\"_DEV\")"],
      "explanation": "",
      "moreInfo": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith",
      "size": 17
    },
    {
      "id": 7110,
      "type": "FillBlank",
      "given": "Fill in the blank to find whether <pre>address</pre> has a typo",
      "question": "",
      "displayAsCode": ["q1","q2","answer"],
      "q1": "let address = 'Four score and seven yars ago'<br>if (address.",
      "q2": "(' yars ')) {<br>&nbsp;&nbsp;console.log('You have a typo')<br>}",
      "choices": [],
      "answer": "",
      "answers": ["includes"],
      "explanation": "",
      "moreInfo": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes",
      "size": 9
    },
    {
      "id": 7111,
      "type": "TrueOrFalse",
      "given": "let title = 'Journal of Research'<br>let match = title.match(/[A-Z]/g)<br>Array.isArray(match)",
      "question": "This code returns <pre>false</pre>",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": false,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/match",
      "size": 0
    },
    {
      "id": 7112,
      "type": "MultipleChoice",
      "given": "let title = 'Journal of Research'<br>title = title.???(22, '.')",
      "question": "In order to add spaces to the end to reach a desired length, the <pre>???</pre> should be replaced with...",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": ["endsWith", "padEnd", "endWith", "fill"],
      "answer": 1,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/padEnd",
      "size": 0
    },
    {
      "id": 7113,
      "type": "MultipleChoice",
      "given": "let title = 'Journal of Research'<br>title = title.???(22, '.')",
      "question": "In order to add spaces to the beginning to reach a desired length, the <pre>???</pre> should be replaced with...",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": ["startsWith", "padStart", "startWith", "fill"],
      "answer": 1,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/padStart",
      "size": 0
    },
    {
      "id": 7114,
      "type": "FillBlank",
      "given": "T.S. Eliot's poem, <em>The Hollow Men</em>, ends with the same phrase repeated four times. Help Mr. Eliot automate this.",
      "question": "",
      "displayAsCode": ["q1","answer"],
      "q1": "let phrase = 'This is the way the world ends '<br>let ending = phrase.",
      "q2": "",
      "choices": [],
      "answer": "",
      "answers": ["repeat(4)"],
      "explanation": "",
      "moreInfo": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/repeat",
      "size": 10
    },
    {
      "id": 7115,
      "type": "FillBlank",
      "given": "The Brits want to use <pre>american</pre> but want the word, <em>colors</em> replaced with the word, <em>colours</em>",
      "question": "",
      "displayAsCode": ["q1","q2","answer"],
      "q1": "let american = 'The colors of the flag are red, white, and blue'<br>let british = american.",
      "q2": "",
      "choices": [],
      "answer": "",
      "answers": ["replace('colors', 'colours')", "replace(\"colors\", \"colours\")"],
      "explanation": "",
      "moreInfo": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace",
      "size": 30
    },
    {
      "id": 721,
      "type": "FillBlank",
      "given": "let str = 'Jan won 1st place in the science fair'<br>let results = str.search(/1/)",
      "question": "",
      "displayAsCode": ["given"],
      "q1": "<pre>results<pre> has a value of ",
      "q2": "",
      "choices": [],
      "answer": "",
      "answers": ["8"],
      "explanation": "",
      "moreInfo": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/search",
      "size": 2
    },
    {
      "id": ,
      "type": "",
      "given": "",
      "question": "",
      "displayAsCode": [],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": "",
      "answers": [],
      "explanation": "",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 722,
      "type": "FillBlank",
      "given": "let quip = {<br>&nbsp;&nbsp;quote: 'You only live once, but if you do it right, once is enough',<br>&nbsp;&nbsp;author: 'Mae West'<br>}",
      "question": "Return the phrase, <em>once is enough</em>",
      "displayAsCode": ["q1","q2","answer"],
      "q1": "quip.quote.",
      "q2": "(44))",
      "choices": [],
      "answer": "",
      "answers": ["slice"],
      "explanation": "",
      "moreInfo": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/slice",
      "size": 6
    },
    {
      "id":723,
      "type": "FillBlank",
      "given": "let quip = 'I generally avoid temptation unless I can\'t resist it'",
      "question": "Fill in the blank to return <em>avoid temptation</em>",
      "displayAsCode": ["given", "q1", "q2", "answer"],
      "q1": "console.log(quip.slice",
      "q2": ")",
      "choices": [],
      "answer": "",
      "answers": ["(12, 28)"],
      "explanation": "",
      "moreInfo": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/slice",
      "size": 9
    },
    {
      "id": 724,
      "type": "TrueOrFalse",
      "given": "let quip = 'I used to be Snow White but I drifted'<br>let results = quip.split(' ')",
      "question": "<pre>results</pre> is an array",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/split",
      "size": 0
    },
    {
      "id": 725,
      "type": "MultipleChoice",
      "given": "let quip = 'Mae West: When I'm good, I'm very, very good. But when I'm bad, I'm even better.'<br>let results = quip.???('Mae West')",
      "question": "What should we replace <em>???</em> with in order to find out if the quip begins with <em>Mae West</em>",
      "displayAsCode": ["given", "choices"],
      "q1": "",
      "q2": "",
      "choices": ["startsWith", "begins", "charAt(0)", "[0-8]"],
      "answer": "0",
      "answers": [],
      "explanation": "",
      "moreInfo": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith",
      "size": 0
    },
    {
      "id": 7116,
      "type": "ValidOrNot",
      "given": "",
      "question": "let quip = 'Whenever I'm caught between two evils, I choose the one I haven't tried'<br><br>let results = quip.substring(39)",
      "displayAsCode": ["question"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/substring",
      "size": 0
    },
    {
      "id": 435,
      "type": "ValidOrNot",
      "given": "",
      "question": "Object.prototype.toString = function() {<br>&nbsp;&nbsp;for (key in this) {<br>&nbsp;&nbsp;&nbsp;&nbsp;console.log(`${key}: ${this[key]}`)<br>&nbsp;&nbsp;}<br>}<br><br>let programmer = {<br>&nbsp;&nbsp;firstName: 'Hal',<br>&nbsp;&nbsp;lastName: 'Helms'<br>}<br><br>programmer.toString()",
      "displayAsCode": ["question"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [],
      "explanation": "Adding properties to <pre>prototype</pre> is sometimes known as <em>monkey-patching</em>",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 7117,
      "type": "FillBlank",
      "given": "Fill in the blank to remove both leading and trailing white space",
      "question": "",
      "displayAsCode": ["q1","q2","answer"],
      "q1": "let quip = '    If I asked for a cup of coffee, someone would search for a double meaning     '<br>quip.",
      "q2": "",
      "choices": [],
      "answer": "",
      "answers": ["trim()"],
      "explanation": "",
      "moreInfo": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/Trim",
      "size": 7,
    },
    {
      "id": 7118,
      "type": "FillBlank",
      "given": "Fill in the blank to remove trailing white space",
      "question": "",
      "displayAsCode": ["q1","q2","answer"],
      "q1": "let quip = '    If I asked for a cup of coffee, someone would search for a double meaning     '<br>quip.",
      "q2": "",
      "choices": [],
      "answer": "",
      "answers": ["trimEnd()"],
      "explanation": "",
      "moreInfo": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/trimEnd",
      "size": 10,
    },
    {
      "id": 7119,
      "type": "FillBlank",
      "given": "Fill in the blank to remove leading white space",
      "question": "",
      "displayAsCode": ["q1","q2","answer"],
      "q1": "let quip = '    If I asked for a cup of coffee, someone would search for a double meaning     '<br>quip.",
      "q2": "",
      "choices": [],
      "answer": "",
      "answers": ["trimStart()"],
      "explanation": "",
      "moreInfo": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/trimEnd",
      "size": 12,
    },
    {
      "id": 2144,
      "type": "ValidOrNot",
      "given": "",
      "question": "let german = 'Ich komme aus Österreich'",
      "displayAsCode": ["question"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [],
      "explanation": "",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 511,
      "type": "MultipleChoice",
      "given": "let x = new Array()",
      "question": "What will happen when this code is run?",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": ["A new, empty array is created", "An exception will be thrown"],
      "answer": 0,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/array",
      "size": 0
    },
    {
      "id": 512,
      "type": "MultipleChoice",
      "given": "const x = []<br>x.push(1)",
      "question": "",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": ["A new, empty array will be created", "An exception will be thrown since x has been declared as a <pre>const</pre>"],
      "answer": 0,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/array",
      "size": 0
    },
    {
      "id": 513,
      "type": "FillBlank",
      "given": "Fill in the blank to create an array with the numbers: 0,1,1,2,3,5,8",
      "question": "",
      "displayAsCode": ["q1", "q2", "answer"],
      "q1": "const x = [",
      "q2": "]",
      "choices": [],
      "answer": "",
      "answers": ["0,1,1,2,3,5,8"],
      "explanation": "",
      "moreInfo": "https://javascript.info/array",
      "size": 13
    },
    {
      "id": 514,
      "type": "MultipleChoice",
      "given": "const authors = ['Faulkner', 'Irving', 'King', 'Mill']<br>console.log(authors[2])",
      "question": "Which author will be returned when this code is run?",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": ["Faulkner", "Irving", "King", "Mill", "none"],
      "answer": 2,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/array",
      "size": 0
    },
    {
      "id": 521,
      "type": "MultipleChoice",
      "given": "const authors = ['Faulkner', 'Irving', 'King', 'Mill']<br>authors[0] = 'Golding'",
      "question": "What will happen when this code is run?",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": ["The array will now have <em>5</em> authors in it", "Faulkner will be replaced with Golding", "An 'Index Not Found' exception will be thrown", "Nothing, the error will fail silently"],
      "answer": 1,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/array",
      "size": 0
    },
    {
      "id": 515,
      "type": "TrueOrFalse",
      "given": "",
      "question": "Array indices begin at 0",
      "displayAsCode": [],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/array",
      "size": 0
    },
    {
      "id": 516,
      "type": "TrueOrFalse",
      "given": "const arr = [true, 42, 'How are you', {firstName: 'Hal', lastName: 'Helms'}]",
      "question": "This code is invalid as arrays cannot have mixed data types",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": false,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/array",
      "size": 0
    },
    {
      "id": 517,
      "type": "ValidOrNot",
      "given": "",
      "question": "",
      "displayAsCode": [],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": "",
      "answers": [],
      "explanation": "",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 518,
      "type": "ValidOrNot",
      "given": "",
      "question": "const numbers = [1,2,3,4,]",
      "displayAsCode": ["question"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/array",
      "size": 0
    },
    {
      "id": 519,
      "type": "MultipleChoice",
      "given": "const numbers = [1,2,3,4,]<br>authors.shift()",
      "question": "What will be the contents of <pre>numbers</pre> after this code is run?",
      "displayAsCode": ["given", "choices"],
      "q1": "",
      "q2": "",
      "choices": ["2,3,4", "1", "1,2,3,4", "1,2,3"],
      "answer": 0,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/array",
      "size": 0
    },
    {
      "id": 5110,
      "type": "MultipleChoice",
      "given": "const numbers = [1,2,3,4,]<br>authors.pop()",
      "question": "What will be the contents of <pre>numbers</pre> after this code is run?",
      "displayAsCode": ["given", "choices"],
      "q1": "",
      "q2": "",
      "choices": ["2,3,4", "1", "1,2,3,4", "1,2,3"],
      "answer": 3,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/array",
      "size": 0
    },
    {
      "id": 5111,
      "type": "MultipleChoice",
      "given": "const numbers = [1,2,3,4,]<br>authors.push('x)",
      "question": "What will be the contents of <pre>numbers</pre> after this code is run?",
      "displayAsCode": ["given", "choices"],
      "q1": "",
      "q2": "",
      "choices": ["x,2,3,4", "1x", "1,2,3,4,x", "1,2,3,x"],
      "answer": 2,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/array",
      "size": 0
    },
    {
      "id": 5112,
      "type": "MultipleChoice",
      "given": "const numbers = [1,2,3,4,]<br>authors.unshift(5)",
      "question": "What will be the contents of <pre>numbers</pre> after this code is run?",
      "displayAsCode": ["given", "choices"],
      "q1": "",
      "q2": "",
      "choices": ["1,2,3,4,5", "5,4,3,2,1", "5,1,2,3,4", "1,2,3,5"],
      "answer": 2,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/array",
      "size": 0
    },
    {
      "id": 5113,
      "type": "ValidOrNot",
      "given": "",
      "question": "const numbers = [1,2,3,4,]<br>numbers.unshift(5,6)",
      "displayAsCode": ["question", "choices"],
      "q1": "",
      "q2": "",
      "choices": ["1,2,3,4,5,6", "5,6,4,3,2,1", "5,6,1,2,3,4", "1,2,3,5,6"],
      "answer": 2,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/array",
      "size": 0
    },
    {
      "id": 522,
      "type": "FillBlank",
      "given": "const numbers = [1,2,3,4,]<br>const integers = numbers<br>integers[0] = 5",
      "question": "",
      "displayAsCode": ["given"],
      "q1": "<pre>numbers</pre> is an array consisting of ",
      "q2": "",
      "choices": [],
      "answer": "",
      "answers": ["5,2,3,4", "[5,2,3,4]"],
      "explanation": "",
      "moreInfo": "https://javascript.info/array#internals",
      "size": 11
    },
    {
      "id": 523,
      "type": "MultipleChoice",
      "given": "",
      "question": "Arrays are copied by...",
      "displayAsCode": [],
      "q1": "",
      "q2": "",
      "choices": ["value", "reference"],
      "answer": 1,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/array#internals",
      "size": 0
    },
    {
      "id": 4120,
      "type": "MultipleChoice",
      "given": "",
      "question": "Objects are copied by...",
      "displayAsCode": [],
      "q1": "",
      "q2": "",
      "choices": ["value", "reference"],
      "answer": 1,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/array#internals",
      "size": 0
    },
    {
      "id": 1155,
      "type": "MultipleChoice",
      "given": "",
      "question": "Primitives are copied by...",
      "displayAsCode": [],
      "q1": "",
      "q2": "",
      "choices": ["value", "reference"],
      "answer": 0,
      "answers": [],
      "explanation": "",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 531,
      "type": "ValidOrNot",
      "given": "",
      "question": "const numbers = [92,81,88,90]<br>numbers.type = 'scores'",
      "displayAsCode": ["question"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [],
      "explanation": "This works because arrays are specialized objects &mdash; and so can have properties. That said, this is a <em>very bad idea</em>.",
      "moreInfo": "https://javascript.info/array#internals",
      "size": 0
    },
    {
      "id": 524,
      "type": "TrueOrFalse",
      "given": "",
      "question": "The methods, <em>push</em> and <em>pop</em> run fast while <em>shift</em> and <em>unshift</em> run slow",
      "displayAsCode": [],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/array#performance",
      "size": 0
    },
    {
      "id": 525,
      "type": "ValidOrNot",
      "given": "",
      "question": "const numbers = [92,81,88,90]<br><br>for (let number of numbers) {<br>&nbsp;&nbsp;console.log(number)<br>}",
      "displayAsCode": ["question"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [],
      "explanation": "The <em>for..of</em> construct is preferable to the older <em>for loop</em>",
      "moreInfo": "https://javascript.info/array#loops",
      "size": 0
    },
    {
      "id": 526,
      "type": "TrueOrFalse",
      "given": "",
      "question": "The <em>for..in</em> loop, when used with an array, also loops over any non-index properties",
      "displayAsCode": [],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [],
      "explanation": "For that reason, the <em>for..of</em> loop is preferable in use",
      "moreInfo": "https://javascript.info/array#loops",
      "size": 0
    },
    {
      "id": ,
      "type": "",
      "given": "",
      "question": "",
      "displayAsCode": [],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": "",
      "answers": [],
      "explanation": "",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 527,
      "type": "FillBlank",
      "given": "const numbers = []<br>numbers[0] = 1<br>numbers[99] = 100<br><br>console.log(numbers.length)",
      "question": "",
      "displayAsCode": ["given"],
      "q1": "The value of <pre>numbers.length</pre> is ",
      "q2": "",
      "choices": [],
      "answer": "",
      "answers": ["100"],
      "explanation": "Weird, right? The <pre>length</pre> property returns the largest <em>index</em> + 1",
      "moreInfo": "https://javascript.info/array#a-word-about-length",
      "size": 4
    },
    {
      "id": 528,
      "type": "TrueOrFalse",
      "given": "let arr = new Array(2)",
      "question": "<pre>arr</pre> is a new array with the number <em>2</em> in it",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": false,
      "answers": [],
      "explanation": "Another weird one! No, it returns an empty array with a <pre>length</pre> of 2! Best to use the simpler, square bracket notation when creating arrays.",
      "moreInfo": "https://javascript.info/array#new-array",
      "size": 0
    },
    {
      "id": 5114,
      "type": "TrueOrFalse",
      "given": "let arr1 = []<br>let arr2 = []<br>console.log(arr1 == arr2)",
      "question": "Logs <em>true</em> to the console",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": false,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/array#don-t-compare-arrays-with",
      "size": 0
    },
    {
      "id": ,
      "type": "",
      "given": "",
      "question": "",
      "displayAsCode": [],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": "",
      "answers": [],
      "explanation": "",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 529,
      "type": "MultipleChoice",
      "given": "let colors = ['red', 'white', 'purple', 'green']<br>delete colors[1]",
      "question": "How many items are in the array after this code is run?",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": ["0","1","2","3","4"],
      "answer": 4,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/array-methods#splice",
      "size": 0
    },
    {
      "id": 5210,
      "type": "FillBlank",
      "given": "let colors = ['red', 'white', 'purple', 'green']<br>delete colors[1]<br>",
      "question": "",
      "displayAsCode": ["given",],
      "q1": "<pre>colors.length</pre> returns ",
      "q2": "",
      "choices": [],
      "answer": "",
      "answers": ["4"],
      "explanation": "",
      "moreInfo": "https://javascript.info/array-methods#splice",
      "size": 1
    },
    {
      "id": 5115,
      "type": "MultipleChoice",
      "given": "",
      "question": "Which array function is called the <em>Swiss army knife</em> of functions?",
      "displayAsCode": ["choices"],
      "q1": "",
      "q2": "",
      "choices": ["commit", "splice", "slice", "transform"],
      "answer": "1",
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/array-methods#splice",
      "size": 0
    },
    {
      "id": 5211,
      "type": "FillBlank",
      "given": "let colors = ['red', 'white', 'purple', 'green']<br>colors.splice(2)",
      "question": "",
      "displayAsCode": ["given"],
      "q1": "The number of items are in the array after this code is run is ",
      "q2": "",
      "choices": [],
      "answer": "",
      "answers": ["2"],
      "explanation": "",
      "moreInfo": "https://javascript.info/array-methods#splice",
      "size": 1
    },
    {
      "id": 5212,
      "type": "FillBlank",
      "given": "let colors = ['red', 'white', 'purple', 'green']<br>colors.splice(2, 1)",
      "question": "",
      "displayAsCode": ["given"],
      "q1": "The number of items are in the array after this code is run is ",
      "q2": "",
      "choices": [],
      "answer": "",
      "answers": ["3"],
      "explanation": "",
      "moreInfo": "https://javascript.info/array-methods#splice",
      "size": 1
    },
    {
      "id": 5213,
      "type": "TrueOrFalse",
      "given": "",
      "question": "The <pre>splice</pre> function of an array returns a <em>copy</em> of the original array",
      "displayAsCode": [],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": false,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/array-methods#splice",
      "size": 0
    },
    {
      "id": 5214,
      "type": "TrueOrFalse",
      "given": "let colors = ['red', 'white', 'purple', 'green']<br>colors.splice(2, 2, 'yellow', 'black')",
      "question": "<pre>colors</pre> will contain <em>red, white, yellow, and black",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/array-methods#splice",
      "size": 0
    },
    {
      "id": 5215,
      "type": "TrueOrFalse",
      "given": "let colors = ['red', 'white', 'purple', 'green']<br>colors.splice(2, 'yellow', 'black')",
      "question": "<pre>colors</pre> will contain <em>red, white, purple, yellow, and black",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": false,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/array-methods#splice",
      "size": 0
    },
    {
      "id": 5216,
      "type": "FillBlank",
      "given": "let colors = ['red', 'white', 'purple', 'green']<br>colors.splice(0, colors.length)",
      "question": "",
      "displayAsCode": ["given"],
      "q1": "The array will contain ",
      "q2": " elements when this code is run",
      "choices": [],
      "answer": "",
      "answers": ["0"],
      "explanation": "",
      "moreInfo": "https://javascript.info/array-methods#splice",
      "size": 1
    },
    {
      "id": 436,
      "type": "ValidOrNot",
      "given": "",
      "question": "let machine = {<br>&nbsp;&nbsp;requiresLubrication: true<br>}<br><br>let ssd = Object.create(machine)<br>ssd.requiresLubrication = false",
      "displayAsCode": ["question"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [],
      "explanation": "<pre>Object.create</pre> creates a new object. When passed an object as an argument, it uses the object as the prototype for the object being created.",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 6222,
      "type": "FillBlank",
      "given": "Fill in the blank that will allow <pre>>summation</pre> to use <pre>lambo</pre> as <pre>this</pre>",
      "question": "",
      "displayAsCode": ["q1","q2","answer"],
      "q1": "let lambo = {<br>&nbsp;&nbsp;make: 'Lamborghini',<br>&nbsp;&nbsp;price: '$$$$'<br>}<br><br>let summation = function(car) {<br>&nbsp;&nbsp;console.log(`Looks like you got yourself a ${this.make}. As for price? I'd say it's ${this.price}`)<br>}<br><br>summation.",
      "q2": "(lambo)",
      "choices": [],
      "answer": "",
      "answers": ["call", "apply"],
      "explanation": "<pre>apply</pre> would also work here",
      "moreInfo": "",
      "size": 4
    },
    {
      "id": 6223,
      "type": "FillBlank",
      "given": "Fill in the blank that will allow <pre>summation</pre> to use <pre>tesla</pre> as <pre>this</pre>",
      "question": "",
      "displayAsCode": ["q1","q2","answer"],
      "q1": "let tesla = {<br>&nbsp;&nbsp;make: 'Tesla',<br>&nbsp;&nbsp;price: '$$'<br>}<br><br>let summation = function(minPrice, maxPrice) {<br>&nbsp;&nbsp;if (this.price > minPrice && this.price < maxPrice) {<br>&nbsp;&nbsp;&nbsp;&nbsp;console.log(`Looks like ${this.make} is the right car for you`)<br>&nbsp;&nbsp;} else {<br>&nbsp;&nbsp;&nbsp;&nbsp;console.log(`You'll have to keep looking. The ${this.make} isn't the right car for you.`)<br>&nbsp;&nbsp;}<br>}<br><br>summation.",
      "q2": "(tesla, ['$', '$$$'])",
      "choices": [],
      "answer": "",
      "answers": ["apply"],
      "explanation": "",
      "moreInfo": "",
      "size": 5
    },
    {
      "id": 6224,
      "type": "TrueOrFalse",
      "given": "let tesla = {<br>&nbsp;&nbsp;make: 'Tesla',<br>&nbsp;&nbsp;price: '$$'<br>}<br>let question = function(name) {<br>&nbsp;&nbsp;console.log(`So, ${name}, you're thinking of buying a ${this.make}, eh?`)<br>}<br><br>let fnc1 = question<br>let fnc2 = question.bind(tesla)<br><br>fnc1('Ana')<br>fnc2('Ana')",
      "question": "The same string will be logged to the console twice after executing this code",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": false,
      "answers": [],
      "explanation": "The use of <pre>bind</pre>, when passed an object, causes the passed argument to function as <pre>this</pre>",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 726,
      "type": "FillBlank",
      "given": "let tesla = {<br>&nbsp;&nbsp;make: 'Tesla',<br>&nbsp;&nbsp;price: '$$'<br>}",
      "question": "",
      "displayAsCode": ["given", "q1","q2","answer"],
      "q1": "// turn tesla into a string<br>let json = ",
      "q2": "(tesla)",
      "choices": [],
      "answer": "",
      "answers": ["JSON.stringify"],
      "explanation": "",
      "moreInfo": "",
      "size": 14
    },
    {
      "id": 727,
      "type": "FillBlank",
      "given": "",
      "question": "",
      "displayAsCode": ["q1","q2","answer"],
      "q1": "// Convert JSON into an object<br>let json = '{\"make\":\"Tesla\",\"price\":\"$$\"}'<br><br>let obj = ",
      "q2": "(json)",
      "choices": [],
      "answer": "",
      "answers": ["JSON.parse"],
      "explanation": "",
      "moreInfo": "",
      "size": 10
    },
    {
      "id": 5217,
      "type": "AllMixedUp",
      "given": "let flowers = ['roses', 'petunias', 'daffodils']<br>flowers.splice(-1, 0, 'irises', 'orchids')",
      "question": "Arrange the flowers to be in the same order they will be in <pre>flowers</pre> after this code is run",
      "displayAsCode": ["given"],
      "mixed": ["petunias", "orchids", "roses", "irises", "daffodils"],
      "ordered": ["roses", "petunias", "irises", "orchids", "daffodils"],
      "choices": [],
      "answer": "",
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/array-methods#splice",
      "size": 0
    },
    {
      "id": 5218,
      "type": "TrueOrFalse",
      "given": "let flowers = ['roses', 'petunias', 'daffodils']<br>let blumen = flowers.concat('orchids')",
      "question": "<pre>concat</pre> when applied to arrays, creates a new array with any arguments appended to the existing array",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/array-methods#concat",
      "size": 0
    },
    {
      "id": 5219,
      "type": "MultipleChoice",
      "given": "let flowers = ['roses', 'petunias', 'daffodils']<br>let blumen = flowers.concat(['orchids', 'irises'])",
      "question": "How many items will <pre>blumen</pre> contain after this code is run?",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": ["3","4","5","An exception will be throw"],
      "answer": 2,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/array-methods#concat",
      "size": 0
    },
    {
      "id": 5220,
      "type": "MultipleChoice",
      "given": "let flowers = ['roses', 'petunias', 'daffodils']<br>let blumen = flowers.concat(7, false, {})",
      "question": "How many items will <pre>blumen</pre> contain after this code is run?",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": ["0","3","6","An exception will be throw"],
      "answer": 2,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/array-methods#concat",
      "size": 0
    },
    {
      "id": 4223,
      "type": "ValidOrNot",
      "given": "",
      "question": "let obj = {<br>&nbsp;&nbsp;0: 'Gold',<br>&nbsp;&nbsp;1: 'Silver',<br>&nbsp;&nbsp;2: 'Bronze'<br>}",
      "displayAsCode": ["question"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [],
      "explanation": "",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 5116,
      "type": "ValidOrNot",
      "given": "",
      "question": "let shapes = ['triangle', 'circle', 'square']<br>shapes.forEach(property => console.log(property))",
      "displayAsCode": ["question"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/array-methods#iterate-foreach",
      "size": 0
    },
    {
      "id": 5117,
      "type": "MultipleChoice",
      "given": "let shapes = ['triangle', 'circle', 'square']<br>let index = shapes.indexOf('circle')",
      "question": "What value will <pre>index</pre> have when this code is run?",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": ["0","1","2","error &mdash; <pre>indexOf</pre> accepts an index, not an item value "],
      "answer": 1,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/array-methods#indexof-lastindexof-and-includes",
      "size": 0
    },
    {
      "id": 5118,
      "type": "FillBlank",
      "given": "let shapes = ['triangle', 'circle', 'square', 'rectangle', 'circle']<br>let index = shapes.lastIndexOf('circle')",
      "question": "",
      "displayAsCode": ["given"],
      "q1": "The value of <pre>index</pre> will be ",
      "q2": "",
      "choices": [],
      "answer": "",
      "answers": ["4"],
      "explanation": "",
      "moreInfo": "https://javascript.info/array-methods#indexof-lastindexof-and-includes",
      "size": 1
    },
    {
      "id": 5119,
      "type": "MultipleChoice",
      "given": "let pets = [<br>&nbsp;&nbsp;{name: 'Amadeus', species: 'Cat'},<br>&nbsp;&nbsp;{name: 'Beethoven', species: 'Dog'},<br>&nbsp;&nbsp;{name: 'Polly', species: 'Parrot'},<br>&nbsp;&nbsp;{name: 'George', species: 'Gerbil'},<br>&nbsp;&nbsp;{name: 'Grendel', species: 'Parrot'},<br>]<br><br>let found = pets.find( pet => pet.species === 'Parrot' )",
      "question": "What data type will <pre>found</pre> be after this code is run?",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": ["string", "array", "object", "number"],
      "answer": 2,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/array-methods#find-and-findindex",
      "size": 0
    },
    {
      "id": 5120,
      "type": "MultipleChoice",
      "given": "let pets = [<br>&nbsp;&nbsp;{name: 'Amadeus', species: 'Cat'},<br>&nbsp;&nbsp;{name: 'Beethoven', species: 'Dog'},<br>&nbsp;&nbsp;{name: 'Polly', species: 'Parrot'},<br>&nbsp;&nbsp;{name: 'George', species: 'Gerbil'},<br>&nbsp;&nbsp;{name: 'Grendel', species: 'Parrot'},<br>]<br><br>let found = pets.findIndex( pet => pet.species === 'Parrot' )",
      "question": "What data type will <pre>found</pre> be after this code is run?",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": ["string", "array", "object", "number"],
      "answer": 3,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/array-methods#find-and-findindex",
      "size": 0
    },
    {
      "id": 5121,
      "type": "MultipleChoice",
      "given": "",
      "question": "To find the <em>first</em> matching item in an array, you should use...",
      "displayAsCode": ["choices"],
      "q1": "",
      "q2": "",
      "choices": ["find", "findFirst", "firstIndex", "index[0]"],
      "answer": 0,
      "answers": [],
      "explanation": "",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 5122,
      "type": "MultipleChoice",
      "given": "",
      "question": "To find <em>all</em> matching items in an array, you should use...",
      "displayAsCode": ["choices"],
      "q1": "",
      "q2": "",
      "choices": ["find", "findAll", "where", "filter"],
      "answer": 3,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/array-methods#filter",
      "size": 0
    },
    {
      "id": 5123,
      "type": "TrueOrFalse",
      "given": "let members = [<br>&nbsp;&nbsp;{name: 'Ana', status: 'gold'},<br>&nbsp;&nbsp;{name: 'Ray', status: 'silver'},<br>&nbsp;&nbsp;{name: 'Hal', status: 'bronze'},<br>&nbsp;&nbsp;{name: 'Gen', status: 'bronze'},<br>&nbsp;&nbsp;{name: 'Sam', status: 'silver'},<br>&nbsp;&nbsp;{name: 'Fay', status: 'silver'},<br>&nbsp;&nbsp;{name: 'Gal', status: 'bronze'},<br>]<br><br>let goldMembers = members.filter( member => member.status === 'gold')",
      "question": "<pre>goldMembers</pre> is an array",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/array-methods#filter",
      "size": 0
    },
    {
      "id": 5221,
      "type": "FillBlank",
      "given": "Fill in the blank to return all members that match the criterion",
      "question": "",
      "displayAsCode": ["q1","q2","answer"],
      "q1": "let members = [<br>&nbsp;&nbsp;{name: 'Ana', status: 'gold'},<br>&nbsp;&nbsp;{name: 'Ray', status: 'silver'},<br>&nbsp;&nbsp;{name: 'Hal', status: 'bronze'},<br>&nbsp;&nbsp;{name: 'Gen', status: 'bronze'},<br>&nbsp;&nbsp;{name: 'Sam', status: 'silver'},<br>&nbsp;&nbsp;{name: 'Fay', status: 'silver'},<br>&nbsp;&nbsp;{name: 'Gal', status: 'bronze'},<br>]<br><br>let goldMembers = members.",
      "q2": "( member => member.status === 'gold' )",
      "choices": [],
      "answer": "",
      "answers": ["filter"],
      "explanation": "",
      "moreInfo": "https://javascript.info/array-methods#filter",
      "size": 6
    },
    {
      "id": 6138,
      "type": "ValidOrNot",
      "given": "",
      "question": "function myFnc(x) {x()}<br>myFnc(()=>console.log('Will this work?'))",
      "displayAsCode": ["question"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [],
      "explanation": "",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 6139,
      "type": "TrueOrFalse",
      "given": "function myFnc(x) {x()}<br>myFnc(()=>console.log('Will this work?'))",
      "question": "This code will error out, as you can't pass a function to <em>another</em> function",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": false,
      "answers": [],
      "explanation": "Since functions are first-class subjects in JavaScript, you can use them as you would any other variable",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 6140,
      "type": "TrueOrFalse",
      "given": "",
      "question": "The array <pre>map</pre> function is a functional representation of the <pre>Map</pre> data type",
      "displayAsCode": [],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": false,
      "answers": [],
      "explanation": "The two share the same name &mdash; and that's about all they share",
      "moreInfo": "https://javascript.info/array-methods#map",
      "size": 0
    },
    {
      "id": 5222,
      "type": "FillBlank",
      "given": "Fill in the blank to return the number of scores that are 90 or higher",
      "question": "",
      "displayAsCode": ["q1","q2","answer"],
      "q1": "let scores = [92, 88, 89, 64, 81, 94, 98, 90]<br><br>let numberOfAs = scores.",
      "q2": "( score => score > 89 ).length",
      "choices": [],
      "answer": "",
      "answers": ["filter"],
      "explanation": "",
      "moreInfo": "https://javascript.info/array-methods#filter",
      "size": 6
    },
    {
      "id": 5124,
      "type": "TrueOrFalse",
      "given": "let scores = [92, 88, 89, 64, 81, 94, 98, 90]<br><br>let sum = scores.sum()",
      "question": "The data type of <pre>sum</pre> will be a number after this code is run",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": false,
      "answers": [],
      "explanation": "There is no built-in <pre>sum</pre> function for arrays",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 5223,
      "type": "MultipleChoice",
      "given": "let studentGrades = [<br>&nbsp;&nbsp;{name: 'Ana', grade: 96},<br>&nbsp;&nbsp;{name: 'Bob', grade: 92},<br>&nbsp;&nbsp;{name: 'Cal', grade: 84},<br>&nbsp;&nbsp;{name: 'Dan', grade: 89},<br>&nbsp;&nbsp;{name: 'Ell', grade: 78},<br>&nbsp;&nbsp;{name: 'Fay', grade: 88},<br>&nbsp;&nbsp;{name: 'Gen', grade: 91},<br>]<br><br>function convertNumberToGrade(studentGrade) {<br>&nbsp;&nbsp;let slg = studentGrade<br>&nbsp;&nbsp;slg.letterGrade = 'F'<br>&nbsp;&nbsp;if (studentGrade.grade > 59) slg.letterGrade ='D'<br>&nbsp;&nbsp;if (studentGrade.grade > 69) slg.letterGrade = 'C'<br>&nbsp;&nbsp;if (studentGrade.grade > 79) slg.letterGrade = 'B'<br>&nbsp;&nbsp;if (studentGrade.grade > 89) slg.letterGrade = 'A'<br>&nbsp;&nbsp;return slg<br>}<br><br>let studentLetterGrades = studentGrades.???(convertNumberToGrade)",
      "question": "What should we replace <em>???</em> with in order to create a new array derived from apply the <pre>convertNumberToGrade</pre> function to <pre>studentGrades</pre>?",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": ["filter", "forEach", "where", "map"],
      "answer": 3,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/array-methods#map",
      "size": 0
    },
    {
      "id": 5224,
      "type": "TrueOrFalse",
      "given": "",
      "question": "The array's <pre>sort</pre> method, by default, converts all items to strings before sorting them",
      "displayAsCode": [],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/array-methods#sort-fn",
      "size": 0
    },
    {
      "id": 5225,
      "type": "TrueOrFalse",
      "given": "let numbers = [1, 35, 5, 25, 15]<br>numbers.sort()",
      "question": "When this code is run, the items in <pre>numbers</pre> will be in the order: <em>1, 5, 15, 25, 35</em>",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": false,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/array-methods#sort-fn",
      "size": 0
    },
    {
      "id": 532,
      "type": "TrueOrFalse",
      "given": "function compare(a, b) {<br>&nbsp;&nbsp;if (a > b) return 1<br>&nbsp;&nbsp;if (a == b) return 0<br>&nbsp;&nbsp;if (a < b) return -1<br>}<br><br>let numbers = [1, 35, 5, 25, 15]<br>numbers.sort(compare)",
      "question": "When this code is run, the items in <pre>numbers</pre> will be in the order: <em>1, 5, 15, 25, 35</em>",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/array-methods#sort-fn",
      "size": 0
    },
    {
      "id": 533,
      "type": "FillBlank",
      "given": "Fill in the blank to sort <pre>numbers</pre> using the <pre>compare</pre> function",
      "question": "",
      "displayAsCode": ["q1","q2","answer"],
      "q1": "function compare(a, b) {<br>&nbsp;&nbsp;if (a > b) return 1<br>&nbsp;&nbsp;if (a == b) return 0<br>&nbsp;&nbsp;if (a < b) return -1<br>}<br><br>let numbers = [1, 35, 5, 25, 15]<br>",
      "q2": "",
      "choices": [],
      "answer": "",
      "answers": ["numbers.sort(compare)"],
      "explanation": "",
      "moreInfo": "https://javascript.info/array-methods#sort-fn",
      "size": 22
    },
    {
      "id": 534,
      "type": "TrueOrFalse",
      "given": "function compare(a, b) {<br>&nbsp;&nbsp;if (a > b) return Math.PI<br>&nbsp;&nbsp;if (a == b) return 0<br>&nbsp;&nbsp;if (a < b) return -Math.PI<br>}",
      "question": "If we want a compare function that can be used by the array's <pre>sort</pre> function, this <pre>compare</pre> code will work",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/array-methods#sort-fn",
      "size": 0
    },
    {
      "id": 535,
      "type": "ValidOrNot",
      "given": "",
      "question": "let numbers = [1, 35, 5, 25, 15]<br>numbers.sort((a,b) => {<br>&nbsp;&nbsp;if (a > b) return Math.PI<br>&nbsp;&nbsp;if (a == b) return 0<br>&nbsp;&nbsp;if (a < b) return -Math.PI<br>})",
      "displayAsCode": ["question"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/array-methods#sort-fn",
      "size": 0
    },
    {
      "id": 5125,
      "type": "TrueOrFalse",
      "given": "let numbers = [5, 4, 3, 2, 1]",
      "question": "To reverse the items in <pre>numbers</pre> (<em>1, 2, 3, 4, 5</em>), use <pre>numbers.sort(-1)</pre>",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": false,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/array-methods#reverse",
      "size": 0
    },
    {
      "id": 5226,
      "type": "TrueOrFalse",
      "given": "let friends = 'Ana, Bethany, Carl, Davis, Ellen '<br>let arr = Array(friends)",
      "question": "When this code is run, <pre>arr</pre> will be an array with 5 items in it",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": false,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/array-methods#split-and-join",
      "size": 0
    },
    {
      "id": 5227,
      "type": "FillBlank",
      "given": "Fill in the blank to turn the string, <pre>friends</pre> into an array with 5 items in it",
      "question": "",
      "displayAsCode": ["q1","q2","answer"],
      "q1": "let friends = 'Ana, Bethany, Carl, Davis, Ellen '<br>let arr = ",
      "q2": "",
      "choices": [],
      "answer": "",
      "answers": ["friends.split(',')", "friends.split(', ')", "friends.split(\",\")", "friends.split(\", \")"],
      "explanation": "",
      "moreInfo": "https://javascript.info/array-methods#split-and-join",
      "size": 20
    },
    {
      "id": 5228,
      "type": "FillBlank",
      "given": "Fill in the blank to turn <pre>arr</pre> into a string with spaces separating each word",
      "question": "",
      "displayAsCode": ["q1","q2","answer"],
      "q1": "let arr = [<br>&nbsp;&nbsp;'I',<br>&nbsp;&nbsp;'used',<br>&nbsp;&nbsp;'to',<br>&nbsp;&nbsp;'be',<br>&nbsp;&nbsp;'Snow',<br>&nbsp;&nbsp;'White',<br>&nbsp;&nbsp;'but',<br>&nbsp;&nbsp;'then',<br>&nbsp;&nbsp;'I',<br>&nbsp;&nbsp;'drifted'<br>]<br><br>let str = ",
      "q2": "",
      "choices": [],
      "answer": "",
      "answers": ["arr.join(' ')", "arr.join(\" \")"],
      "explanation": "",
      "moreInfo": "https://javascript.info/array-methods#split-and-join",
      "size": 14
    },
    {
      "id": 536,
      "type": "FillBlank",
      "given": "Fill in the blank such that the code will return the simple average of all grades",
      "question": "",
      "displayAsCode": ["q1","q2","answer"],
      "q1": "let grades = [94, 100, 91, 84, 82, 74, 92, 81, 90]<br>let avg = grades.",
      "q2": "((sum, current) => (sum + current)) / grades.length",
      "choices": [],
      "answer": "",
      "answers": ["reduce"],
      "explanation": "",
      "moreInfo": "https://javascript.info/array-methods#reduce-reduceright",
      "size": 6
    },
    {
      "id": 537,
      "type": "FillBlank",
      "given": "Fill in the blank such that the code will return the total of all payments",
      "question": "",
      "displayAsCode": ["q1","q2","answer"],
      "q1": "let payments = [2420, 864, 1102, 3139, 1423]<br>let total = payments.",
      "q2": "((sum, current) => sum + current)",
      "choices": [],
      "answer": "",
      "answers": ["reduce"],
      "explanation": "",
      "moreInfo": "https://javascript.info/array-methods#reduce-reduceright",
      "size": 6
    },
    {
      "id": 235,
      "type": "TrueOrFalse",
      "given": "let payments = [2420, 864, 1102, 3139, 1423]<br>console.log(typeof payments)",
      "question": "Logs <pre>array</pre> to the console",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": false,
      "answers": [],
      "explanation": "There is no specify array type. (It's an object.) To find if something is an array, use <pre>Array.isArray(value)</pre>",
      "moreInfo": "https://javascript.info/array-methods#array-isarray",
      "size": 0
    },
    {
      "id": 8215,
      "type": "MultipleChoice",
      "given": "let competitors = [<br>&nbsp;&nbsp;{name: 'Ana', score: 84},<br>&nbsp;&nbsp;{name: 'Fay', score: 88},<br>&nbsp;&nbsp;{name: 'Sam', score: 92},<br>]<br><br>let awards = new Map()<br>awards.set(competitors[2], 1000)<br>awards.set(competitors[1], 500)<br>awards.set(competitors[0], 250)<br><br>console.log(`Ana received ${awards.get(competitors[0])}`)",
      "question": "After this code is run, what will be logged to the console?",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": ["Ana received undefined", "Ana received 250", "Ana received ", "error &mdash; the code is complete nonsense!"],
      "answer": 1,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/map-set",
      "size": 0
    },
    {
      "id": 8316,
      "type": "ValidOrNot",
      "given": "",
      "question": "let functions = new Map()<br>functions.set(Math.PI, 'returns approximate value of pi')",
      "displayAsCode": ["question"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/map-set",
      "size": 0
    },
    {
      "id": 8317,
      "type": "FillBlank",
      "given": "Fill in the blank to remove Beethoven's 2d symphony from the Map",
      "question": "",
      "displayAsCode": ["q1","q2","answer"],
      "q1": "let symphony1 = {<br>&nbsp;&nbsp;key: 'C',<br>&nbsp;&nbsp;firstPerformance: 'April 1800'<br>}<br><br>let symphony2 = {<br>&nbsp;&nbsp;key: 'D',<br>&nbsp;&nbsp;firstPerformance: 'April 1803'<br>}<br><br>let symphony3 = {<br>&nbsp;&nbsp;key: 'E♭',<br>&nbsp;&nbsp;firstPerformance: 'April 1805'<br>}<br><br>let beethovenSymphonies = new Map()<br>beethovenSymphonies.set(symphony1, '2Z407')<br>beethovenSymphonies.set(symphony2, '2Z516')<br>beethovenSymphonies.set(symphony3, '2Z623')<br>",
      "q2": "",
      "choices": [],
      "answer": "",
      "answers": ["beethovenSymphonies.delete(symphony2)"],
      "explanation": "",
      "moreInfo": "https://javascript.info/map-set",
      "size": 39
    },
    {
      "id": 8318,
      "type": "FillBlank",
      "given": "I've clearly lost my mind. Remove everything from <pre>heroes</pre> in one single line of code",
      "question": "",
      "displayAsCode": ["q1","q2","answer"],
      "q1": "let heroes = new Map()<br>heroes.set('Atila the Hun', 'Diamond')<br>heroes.set('Mao Tsedung', 'Gold')<br>heroes.set('Pol Pot', 'Silver')<br>",
      "q2": "",
      "choices": [],
      "answer": "",
      "answers": ["heroes.clear()"],
      "explanation": "",
      "moreInfo": "https://javascript.info/map-set",
      "size": 14
    },
    {
      "id": 8319,
      "type": "FillBlank",
      "given": "Fill in the blank to determine how many items are in the Map",
      "question": "",
      "displayAsCode": ["q1","q2","answer"],
      "q1": "let allStars = new Map()<br>allStars.set('Tom Brady', 'football')<br>allStars.set('Tiger Woods', 'golf')<br>allStars.set('LeBron James', 'basketball')<br>allStars.set('Serena Williams', 'tennis')<br>allStars.set('Lindsey Vonn', 'skiing')<br>",
      "q2": "",
      "choices": [],
      "answer": "",
      "answers": ["allStars.size"],
      "explanation": "",
      "moreInfo": "https://javascript.info/map-set",
      "size": 13
    },
    {
      "id": 8320,
      "type": "FillBlank",
      "given": "Fill in the blank to see if the great Mickey Mantle is in the Map",
      "question": "",
      "displayAsCode": ["q1","q2","answer"],
      "q1": "let allStars = new Map()<br>allStars.set('Tom Brady', 'football')<br>allStars.set('Tiger Woods', 'golf')<br>allStars.set('LeBron James', 'basketball')<br>allStars.set('Serena Williams', 'tennis')<br>allStars.set('Lindsey Vonn', 'skiing')<br>",
      "q2": "",
      "choices": [],
      "answer": "",
      "answers": ["allStars.has('Mickey Mantle')", "allStars.has(\"Mickey Mantle\")"],
      "explanation": "",
      "moreInfo": "https://javascript.info/map-set",
      "size": 31
    },
    {
      "id": 228,
      "type": "ValidOrNot",
      "given": "",
      "question": "const myCity = 'Las Vegas'<br>myCity = 'Tampa'",
      "displayAsCode": ["question"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": false,
      "answers": [],
      "explanation": "",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 229,
      "type": "ValidOrNot",
      "given": "",
      "question": "const address = {<br>&nbsp;&nbsp;city: 'Las Vegas'<br>}<br><br>address.city = 'Tampa'",
      "displayAsCode": ["question"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [],
      "explanation": "",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 4224,
      "type": "MultipleChoice",
      "given": "let product = {<br>&nbsp;&nbsp;name: 'Left-handed Widget',<br>&nbsp;&nbsp;origin: 'USA',<br>&nbsp;&nbsp;price: '21.99',<br>&nbsp;&nbsp;inStock: 61,<br>&nbsp;&nbsp;taxable: true<br>}<br><br>let {name, price} = product",
      "question": "The last line of code shown is an example of...",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": ["object assignment", "object aliasing", "object identity", "object destructuring"],
      "answer": 3,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/destructuring-assignment#object-destructuring",
      "size": 0
    },
    {
      "id": 4225,
      "type": "ValidOrNot",
      "given": "",
      "question": "let product = {<br>&nbsp;&nbsp;name: 'Left-handed Widget',<br>&nbsp;&nbsp;origin: 'USA',<br>&nbsp;&nbsp;price: '21.99',<br>&nbsp;&nbsp;inStock: 61,<br>&nbsp;&nbsp;taxable: true<br>}<br><br>let {name: item, price} = product",
      "displayAsCode": ["question"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/destructuring-assignment#object-destructuring",
      "size": 0
    },
    {
      "id": 4226,
      "type": "FillBlank",
      "given": "Fill in the blank to create <pre>item</pre> as an alias to <pre>name</pre>",
      "question": "",
      "displayAsCode": ["q1", "q2", "answer"],
      "q1": "let product = {<br>&nbsp;&nbsp;name: 'Left-handed Widget',<br>&nbsp;&nbsp;origin: 'USA',<br>&nbsp;&nbsp;price: '21.99',<br>&nbsp;&nbsp;inStock: 61,<br>&nbsp;&nbsp;taxable: true<br>}<br>let {name",
      "q2": ", price} = product",
      "choices": [],
      "answer": "",
      "answers": [": item"],
      "explanation": "",
      "moreInfo": "",
      "size": 6
    },
    {
      "id": 4227,
      "type": "ValidOrNot",
      "given": "",
      "question": "let product = {<br>&nbsp;&nbsp;name: 'Left-handed Widget',<br>&nbsp;&nbsp;origin: 'USA',<br>&nbsp;&nbsp;price: '21.99',<br>&nbsp;&nbsp;inStock: 61,<br>&nbsp;&nbsp;taxable: true<br>}<br><br>let {name, price, manufacturer = 'Davis Tools'} = product",
      "displayAsCode": ["question"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/destructuring-assignment#object-destructuring",
      "size": 0
    },
    {
      "id": 4228,
      "type": "FillBlank",
      "given": "Fill in the blank to add a default property, <pre>manufacturer</pre> with a default value of <pre>Davis Tools</pre>",
      "question": "",
      "displayAsCode": ["q1","q2","answer"],
      "q1": "let product = {<br>&nbsp;&nbsp;name: 'Left-handed Widget',<br>&nbsp;&nbsp;origin: 'USA',<br>&nbsp;&nbsp;price: '21.99',<br>&nbsp;&nbsp;inStock: 61,<br>&nbsp;&nbsp;taxable: true<br>}<br><br>let {name, price,",
      "q2": "} = product",
      "choices": [],
      "answer": "",
      "answers": ["manufacturer = 'Davis Tools'", "manufacturer = \"Davis Tools\""],
      "explanation": "",
      "moreInfo": "https://javascript.info/destructuring-assignment#object-destructuring",
      "size": 29
    },
    {
      "id": 4229,
      "type": "ValidOrNot",
      "given": "",
      "question": "let product = {<br>&nbsp;&nbsp;name: 'Left-handed Widget',<br>&nbsp;&nbsp;origin: 'USA',<br>&nbsp;&nbsp;price: '21.99',<br>&nbsp;&nbsp;inStock: 61,<br>&nbsp;&nbsp;taxable: true<br>}<br><br>let calcSalePrice = price => price * .9<br><br>let {name, price, salePrice = calcSalePrice(price)} = product",
      "displayAsCode": ["question"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/destructuring-assignment#object-destructuring",
      "size": 0
    },
    {
      "id": 4230,
      "type": "FillBlank",
      "given": "Fill in the blank to add a default property, <pre>salePrice</pre> with a default value obtained by calling the function, <pre>calcSalePrice</pre>",
      "question": "",
      "displayAsCode": ["q1","q2","answer"],
      "q1": "let product = {<br>&nbsp;&nbsp;name: 'Left-handed Widget',<br>&nbsp;&nbsp;origin: 'USA',<br>&nbsp;&nbsp;price: '21.99',<br>&nbsp;&nbsp;inStock: 61,<br>&nbsp;&nbsp;taxable: true<br>}<br><br>let calcSalePrice = price => price * .9<br><br>let {name, price,",
      "q2": "} = product",
      "choices": [],
      "answer": "",
      "answers": ["salePrice = calcSalePrice(price)"],
      "explanation": "",
      "moreInfo": "https://javascript.info/destructuring-assignment#object-destructuring",
      "size": 33
    },
    {
      "id": 4231,
      "type": "TrueOrFalse",
      "given": "let person = {<br>&nbsp;&nbsp;name: 'Ana',<br>&nbsp;&nbsp;address: {<br>&nbsp;&nbsp;&nbsp;&nbsp;street: '3280 Tropicana Blvd',<br>&nbsp;&nbsp;&nbsp;&nbsp;city: 'Las Vegas',<br>&nbsp;&nbsp;&nbsp;&nbsp;state: 'NV'<br>&nbsp;&nbsp;}<br>}<br><br>let {name, address:{state}} = person<br><br>console.log(state)",
      "question": "<em>NV</em> will be logged to the console",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/destructuring-assignment#object-destructuring",
      "size": 0
    },
    {
      "id": 6141,
      "type": "ValidOrNot",
      "given": "",
      "question": "function sum(a,b) {<br>&nbsp;&nbsp;return a + b<br>}<br><br>console.log(sum(1,2,3))",
      "displayAsCode": ["question"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [],
      "explanation": "",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 6142,
      "type": "MultipleChoice",
      "given": "function sum(a,b) {<br>&nbsp;&nbsp;return a + b<br>}<br><br>log(sum(1,2,3))",
      "question": "What will be logged to the console?",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": ["3","6","123","error &mdash; argument number mismatch with parameter number"],
      "answer": 0,
      "answers": [],
      "explanation": "",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 4231,
      "type": "ValidOrNot",
      "given": "",
      "question": "let product = {<br>&nbsp;&nbsp;name: 'Left-handed Widget',<br>&nbsp;&nbsp;origin: 'USA',<br>&nbsp;&nbsp;price: '21.99',<br>&nbsp;&nbsp;inStock: 61,<br>&nbsp;&nbsp;taxable: true<br>}<br><br>let {name, price, ...rest} = product",
      "displayAsCode": ["question"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/destructuring-assignment#the-rest-pattern",
      "size": 0
    },
    {
      "id": 4233,
      "type": "FillBlank",
      "given": "Fill in the blank such that the non-specified properties are combined into a new object named <pre>rest</pre>",
      "question": "",
      "displayAsCode": ["q1","q2","answer"],
      "q1": "let product = {<br>&nbsp;&nbsp;name: 'Left-handed Widget',<br>&nbsp;&nbsp;origin: 'USA',<br>&nbsp;&nbsp;price: '21.99',<br>&nbsp;&nbsp;inStock: 61,<br>&nbsp;&nbsp;taxable: true<br>}<br><br>let {name, price, ",
      "q2": "} = product",
      "choices": [],
      "answer": "",
      "answers": ["...rest"],
      "explanation": "",
      "moreInfo": "https://javascript.info/destructuring-assignment#the-rest-pattern",
      "size": 8
    },
    {
      "id": 4234,
      "type": "ValidOrNot",
      "given": "",
      "question": "let person = {<br>&nbsp;&nbsp;name: 'Ana',<br>&nbsp;&nbsp;address: {<br>&nbsp;&nbsp;&nbsp;&nbsp;street: '3280 Tropicana Blvd',<br>&nbsp;&nbsp;&nbsp;&nbsp;city: 'Las Vegas',<br>&nbsp;&nbsp;&nbsp;&nbsp;state: 'NV'<br>&nbsp;&nbsp;},<br>&nbsp;&nbsp;age: 29<br>}<br><br>let {state, ...rest} = person.address",
      "displayAsCode": ["question"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/destructuring-assignment#the-rest-pattern",
      "size": 0
    },
    {
      "id": 638,
      "type": "ValidOrNot",
      "given": "",
      "question": "let options = {<br>&nbsp;&nbsp;shipping: 'overnight',<br>&nbsp;&nbsp;signature: 'required'<br>}<br><br>function shipment({shipping = '2d day', insurance = false, signature = 'optional'}) {<br>&nbsp;&nbsp;return `Package to be delivered ${shipping}. A signature is ${signature}. The package is ${insurance ? 'insured' : 'not insured'}`<br>}<br><br>console.log(shipment(options))",
      "displayAsCode": ["question"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/destructuring-assignment#smart-function-parameters",
      "size": 0
    },
    {
      "id": 639,
      "type": "MultipleChoice",
      "given": "let options = {<br>&nbsp;&nbsp;shipping: 'overnight',<br>&nbsp;&nbsp;signature: 'required'<br>}<br><br>function shipment({shipping = '2d day', insurance = false, signature = 'optional'}) {<br>&nbsp;&nbsp;return `Package to be delivered ${shipping}. A signature is ${signature}. The package is ${insurance ? 'insured' : 'not insured'}`<br>}<br><br>console.log(shipment(options))",
      "question": "When run, this code will log...",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": ["a paragraph of text displaying the instructions with all relevant variables correctly filled in", "a paragraph of text displaying the instructions with <pre>undefined</pre> for all relevant variables", "nothing", "an error"],
      "answer": 0,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/destructuring-assignment#smart-function-parameters",
      "size": 0
    },
    {
      "id": 8216,
      "type": "TrueOrFalse",
      "given": "let ana = {<br>&nbsp;&nbsp;name: 'Ana Quay',<br>&nbsp;&nbsp;age: 29<br>}<br><br>let company = {<br>&nbsp;&nbsp;name: 'Davis Tools',<br>&nbsp;&nbsp;ceo: ana<br>}<br><br>try {<br>&nbsp;&nbsp;console.log(company.ceo.address.state)<br>} catch (err) {<br>&nbsp;&nbsp;console.log('an error occurred')<br>}",
      "question": "The console will log an error, as <pre>ana</pre> has no <pre>address</pre>",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": false,
      "answers": [],
      "explanation": "",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 8217,
      "type": "TrueOrFalse",
      "given": "let ana = {<br>&nbsp;&nbsp;name: 'Ana Quay',<br>&nbsp;&nbsp;age: 29<br>}<br><br>let company = {<br>&nbsp;&nbsp;name: 'Davis Tools',<br>&nbsp;&nbsp;ceo: ana<br>}<br><br>console.log(company.ceo.address.state)",
      "question": "The console will log an error, as <pre>ana</pre> has no <pre>address</pre>",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [],
      "explanation": "",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 8218,
      "type": "TrueOrFalse",
      "given": "let ana = {<br>&nbsp;&nbsp;name: 'Ana Quay',<br>&nbsp;&nbsp;age: 29<br>}<br><br>let company = {<br>&nbsp;&nbsp;name: 'Davis Tools',<br>&nbsp;&nbsp;ceo: ana<br>}<br><br>console.log(company.ceo.address?.state)",
      "question": "The console will log an error, as <pre>ana</pre> has no <pre>address</pre>",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": false,
      "answers": [],
      "explanation": "",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 8219,
      "type": "TrueOrFalse",
      "given": "try {<br>&nbsp;&nbsp;if (true) console.log(`It's all true...`)<br>} catch (err) {<br>&nbsp;&nbsp;console.log(err)<br>}",
      "question": "This code will log an error to the console",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": false,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/try-catch",
      "size": 0
    },
    {
      "id": 8220,
      "type": "TrueOrFalse",
      "given": "try {<br>&nbsp;&nbsp;connnst ready = true<br>&nbsp;&nbsp;if (ready) console.log(`It's all true...`)<br>} catch (err) {<br>&nbsp;&nbsp;console.log('Whoops!')<br>}",
      "question": "This code will log <em>Whoops!</em> to the console",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": false,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/try-catch",
      "size": 0
    },
    {
      "id": 8221,
      "type": "TrueOrFalse",
      "given": "",
      "question": "<em>try/catch</em> works with all types of exceptions",
      "displayAsCode": [],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": false,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/try-catch",
      "size": 0
    },
    {
      "id": 8222,
      "type": "TrueOrFalse",
      "given": "try {<br>&nbsp;&nbsp;let obj = JSON.parse({name: 'Ana', age: 29})<br>} catch (err) {<br>&nbsp;&nbsp;console.log('Whoops!')<br>}",
      "question": "This code will produce an object with two properties, <pre>name</pre> and <pre>age</pre>",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": false,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/try-catch#using-try-catch",
      "size": 0
    },
    {
      "id": 8223,
      "type": "MultipleChoice",
      "given": "let ana = {<br>&nbsp;&nbsp;name: 'Ana Quay',<br>&nbsp;&nbsp;age: 29<br>}<br><br>function registerPerson(person) {<br>&nbsp;&nbsp;if (!person.hasOwnProperty('address')) {<br>&nbsp;&nbsp;&nbsp;&nbsp;throw new Error('Person must have an address')<br>&nbsp;&nbsp;} else {<br>&nbsp;&nbsp;// do something<br>&nbsp;&nbsp;}<br>}<br><br>try {&nbsp;&nbsp;registerPerson(ana)<br>&nbsp;&nbsp;catch(err) {<br>&nbsp;&nbsp;console.log(err.message)<br>}",
      "question": "What will happen when this code is run?",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": ["whatever is specified in // do something", "a raw exception is logged to the console", "<em>Person must have an address</em> is logged to the console"],
      "answer": 1,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/try-catch#throw-operator",
      "size": 0
    },
    {
      "id": 8224,
      "type": "TrueOrFalse",
      "given": "",
      "question": "In a <em>try/catch/finally</em> construct, the <pre>finally</em> clause executes whether the code executed as expected or whether an exception was encountered.",
      "displayAsCode": [],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/try-catch#try-catch-finally",
      "size": 0
    },
    {
      "id": 5229,
      "type": "FillBlank",
      "given": "Fill in the blank to provide 2 parameters, <pre>price</pre> and <pre>status</pre> in that order to the <pre>calculateDiscount</pre> function",
      "question": "",
      "displayAsCode": ["q1","q2","answer"],
      "q1": "let calculateDiscount = ",
      "q2": "=> {<br>&nbsp;&nbsp;let discountedPrice = 0<br>&nbsp;&nbsp;// calculations here<br>&nbsp;&nbsp;return discountedPrice<br>}",
      "choices": [],
      "answer": "",
      "answers": ["(price, status)"],
      "explanation": "",
      "moreInfo": "https://javascript.info/arrow-functions-basics",
      "size": 15
    },
    {
      "id": 6225,
      "type": "ValidOrNot",
      "given": "",
      "question": "let calculateDiscount = price, status => {<br>&nbsp;&nbsp;let discountedPrice = 0<br>&nbsp;&nbsp;// calculations here<br>&nbsp;&nbsp;return discountedPrice<br>}",
      "displayAsCode": ["question"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": false,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/arrow-functions-basics",
      "size": 0
    },
    {
      "id": 6226,
      "type": "MultipleChoice",
      "given": "let calculateDiscount = price => {<br>&nbsp;&nbsp;return price > 200 ? price * .9 : price<br>}",
      "question": "This code is an example of...",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": ["an error", "a curried function", "a closure", "an arrow function"],
      "answer": 3,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/arrow-functions-basics",
      "size": 0
    },
    {
      "id": 6227,
      "type": "ValidOrNot",
      "given": "",
      "question": "let calculateDiscount = price => {<br>&nbsp;&nbsp;return price > 200 ? price * .9 : price<br>}",
      "displayAsCode": ["question"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/arrow-functions-basics",
      "size": 0
    },
    {
      "id": 6228,
      "type": "ValidOrNot",
      "given": "",
      "question": "let calculateDiscount = (price) => {<br>&nbsp;&nbsp;return price > 200 ? price * .9 : price<br>}",
      "displayAsCode": ["question"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/arrow-functions-basics",
      "size": 0
    },
    {
      "id": 6229,
      "type": "ValidOrNot",
      "given": "",
      "question": "let fncA = fnc => {<br>&nbsp;&nbsp;fnc()<br>&nbsp;&nbsp;return 'done'<br>}<br><br>fncA( () => console.log('Who am I?') )",
      "displayAsCode": ["question"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/arrow-functions-basics",
      "size": 0
    },
    {
      "id": 6230,
      "type": "MultipleChoice",
      "given": "let fncA = fnc => {<br>&nbsp;&nbsp;fnc()<br>&nbsp;&nbsp;return 'done'<br>}<br><br>fncA( () => console.log('Who am I?') )",
      "question": "What will happen when this code is run?",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": ["<em>Who am I?</em> logged to the console", "<em>done</em> logged to the console", "a runtime exception is thrown"],
      "answer": 0,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/arrow-functions-basics",
      "size": 0
    },
    {
      "id": 6231,
      "type": "MultipleChoice",
      "given": "let fncA = fnc => {<br>&nbsp;&nbsp;fnc()<br>&nbsp;&nbsp;return 'done'<br>}<br><br>let fncB = (fnc) => {<br>&nbsp;&nbsp;fnc()<br>&nbsp;&nbsp;return 'done'<br>}",
      "question": "Which of these functions is valid?",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": ["fncA", "fncB", "both", "neither"],
      "answer": 2,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/arrow-functions-basics",
      "size": 0
    },
    {
      "id": 6232,
      "type": "ValidOrNot",
      "given": "",
      "question": "let fnc = () => return 'Hello'",
      "displayAsCode": ["question"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": false,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/arrow-functions-basics",
      "size": 0
    },
    {
      "id": 6143,
      "type": "TrueOrFalse",
      "given": "",
      "question": "Nested functions must be declared using <pre>nested:</pre>",
      "displayAsCode": [],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": false,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/closure#nested-functions",
      "size": 0
    },
    {
      "id": 6233,
      "type": "ValidOrNot",
      "given": "",
      "question": "let outerFnc = () => {<br>&nbsp;&nbsp;return () => console.log('inner function')<br>&nbsp;&nbsp;console.log('outer function')<br>}<br><br>let innerFnc = outerFnc()<br>innerFnc()",
      "displayAsCode": ["question"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/closure#nested-functions",
      "size": 0
    },
    {
      "id": 6234,
      "type": "MultipleChoice",
      "given": "let outerFnc = () => {<br>&nbsp;&nbsp;return () => console.log('inner function')<br>&nbsp;&nbsp;console.log('outer function')<br>}<br><br>let innerFnc = outerFnc()<br>innerFnc()",
      "question": "What will be logged to the console when this code is run?",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": ["a runtime exception", "inner function", "outer function", "both inner function and outer function"],
      "answer": 1,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/closure#nested-functions",
      "size": 0
    },
    {
      "id": 6310,
      "type": "MultipleChoice",
      "given": "let auction = () => {<br>&nbsp;&nbsp;let acceptablePrice = 5000<br>&nbsp;&nbsp;let startingPrice = 2000<br>&nbsp;&nbsp;let currentPrice = startingPrice<br>&nbsp;&nbsp;return (amount) => {<br>&nbsp;&nbsp;&nbsp;&nbsp;if (currentPrice >= acceptablePrice) {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return 'Too late, loser'<br>&nbsp;&nbsp;&nbsp;&nbsp;} else {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;currentPrice = amount<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (currentPrice >= acceptablePrice) {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return 'You won'<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return 'Bid too low. Try again.'<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;}<br>}",
      "question": "This code is an example of...",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": ["an ES6 <pre>class</pre>", "a curried function", "a closure", "a higher order invariant (HOI)"],
      "answer": 2,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/closure#nested-functions",
      "size": 0
    },
    {
      "id": 6311,
      "type": "TrueOrFalse",
      "given": "let auction = () => {<br>&nbsp;&nbsp;let acceptablePrice = 5000<br>&nbsp;&nbsp;let startingPrice = 2000<br>&nbsp;&nbsp;let currentPrice = startingPrice<br>&nbsp;&nbsp;return (amount) => {<br>&nbsp;&nbsp;&nbsp;&nbsp;if (currentPrice >= acceptablePrice) {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return 'Too late, loser'<br>&nbsp;&nbsp;&nbsp;&nbsp;} else {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;currentPrice = amount<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (currentPrice >= acceptablePrice) {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return 'You won'<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return 'Bid too low. Try again.'<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;}<br>}",
      "question": "This code will fail as the nested inner function has no access to the outer function's variables",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": false,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/closure#nested-functions",
      "size": 0
    },
    {
      "id": 7120,
      "type": "ValidOrNot",
      "given": "",
      "question": "function myFnc() {<br>&nbsp;&nbsp;console.log('Here in myFnc')<br>}<br><br>setTimeout(myFnc, 3000)",
      "displayAsCode": ["question"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/settimeout-setinterval",
      "size": 0
    },
    {
      "id": 7121,
      "type": "MultipleChoice",
      "given": "function myFnc() {<br>&nbsp;&nbsp;console.log('Here in myFnc')<br>}<br><br>setTimeout(myFnc, 3000)",
      "question": "What will happen when this code is run?",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": ["nothing", "After 3 seconds, <em>Here in myFnc</em> is logged", "Every 3 seconds, <em>Here in myFnc</em> is logged", "a runtime exception is thrown"],
      "answer": 1,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/settimeout-setinterval",
      "size": 0
    },
    {
      "id": 7122,
      "type": "FillBlank",
      "given": "Fill in the blank so that <pre>myFnc</pre> runs after 3 seconds",
      "question": "",
      "displayAsCode": ["q1","q2","answer"],
      "q1": "function myFnc() {<br>&nbsp;&nbsp;console.log('Here in myFnc')<br>}<br><br>",
      "q2": "(myFnc, 3000)",
      "choices": [],
      "answer": "",
      "answers": ["setTimeout"],
      "explanation": "",
      "moreInfo": "https://javascript.info/settimeout-setinterval",
      "size": 10
    },
    {
      "id": 7123,
      "type": "ValidOrNot",
      "given": "",
      "question": "function sayHi(name) {<br>&nbsp;&nbsp;console.log('Hello ' + name)<br>}<br><br>setInterval(sayHi, 1500, 'Ana')",
      "displayAsCode": ["question"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/settimeout-setinterval",
      "size": 0
    },
    {
      "id": 7124,
      "type": "MultipleChoice",
      "given": "function sayHi(name) {<br>&nbsp;&nbsp;console.log('Hello ' + name)<br>}<br><br>setInterval(sayHi, 1500, 'Ana')",
      "question": "What will happen when this code is run?",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": ["nothing", "After 3 seconds, <em>Here in myFnc</em> is logged", "Every 3 seconds, <em>Here in myFnc</em> is logged", "a runtime exception is thrown"],
      "answer": 2,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/settimeout-setinterval",
      "size": 0
    },
    {
      "id": 7125,
      "type": "FillBlank",
      "given": "Fill in the blank so that <pre>sayHi</pre> runs every 1.5 seconds",
      "question": "",
      "displayAsCode": ["q1","q2","answer"],
      "q1": "function sayHi(name) {<br>&nbsp;&nbsp;console.log('Hello ' + name)<br>}<br><br>",
      "q2": "(sayHi, 1500, 'Ana')",
      "choices": [],
      "answer": "",
      "answers": ["setInterval"],
      "explanation": "",
      "moreInfo": "https://javascript.info/settimeout-setinterval",
      "size": 11
    },
    {
      "id": 728,
      "type": "ValidOrNot",
      "given": "",
      "question": "function sayHiAll([first, second]) {<br>&nbsp;&nbsp;console.log(`Hello, ${first} and ${second}`)<br>}<br><br>setTimeout(sayHiAll, 1500, ['Ana', 'Jay'])",
      "displayAsCode": ["question"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [],
      "explanation": "",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 729,
      "type": "TrueOrFalse",
      "given": "function sayHiAll([first, second]) {<br>&nbsp;&nbsp;console.log(`Hello, ${first} and ${second}`)<br>}<br><br>setTimeout(sayHiAll, 1500, ['Ana', 'Jay'])",
      "question": "The function, <pre>sayHiAll</pre>, <em>destructures</em> the array sent as an argument",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [],
      "explanation": "",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 7210,
      "type": "FillBlank",
      "given": "Fill in the blank so that the array, <pre>['Ana', 'Jay']</pre> is destructured to <pre>first</pre> and <pre>second</pre>",
      "question": "",
      "displayAsCode": ["q1","q2","answer"],
      "q1": "function sayHiAll(",
      "q2": ") {<br>&nbsp;&nbsp;console.log(`Hello, ${first} and ${second}`)<br>}",
      "choices": [],
      "answer": "",
      "answers": ["[first, second]"],
      "explanation": "",
      "moreInfo": "",
      "size": 15
    },
    {
      "id": 7212,
      "type": "ValidOrNot",
      "given": "",
      "question": "function sayHiAll([first, second]) {<br>&nbsp;&nbsp;console.log(`Hello, ${first} and ${second}`)<br>}<br><br>let interval = setInterval(sayHiAll, 1500, ['Ana', 'Jay'])<br><br>setTimeout(clearTimeout, 6000, interval)",
      "displayAsCode": ["question"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [],
      "explanation": "",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 731,
      "type": "FillBlank",
      "given": "Fill in the blank so that <pre>interval</pre> is cancelled after 6 seconds",
      "question": "",
      "displayAsCode": ["q1","q2","answer"],
      "q1": "function sayHiAll([first, second]) {<br>&nbsp;&nbsp;console.log(`Hello, ${first} and ${second}`)<br>}<br><br>let interval = setInterval(sayHiAll, 1500, ['Ana', 'Jay'])<br><br>setTimeout(",
      "q2": ")",
      "choices": [],
      "answer": "",
      "answers": ["clearTimeout, 6000, interval"],
      "explanation": "",
      "moreInfo": "",
      "size": 29
    },
    {
      "id": 732,
      "type": "ValidOrNot",
      "given": "",
      "question": "function sayHiAll([first, second]) {<br>&nbsp;&nbsp;console.log(`Hello, ${first} and ${second}`)<br>}<br><br>let interval = setInterval(sayHiAll, 1500, ['Ana', 'Jay'])<br><br>setTimeout(clearTimeout, 6000, interval)",
      "displayAsCode": ["question"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [],
      "explanation": "",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 6235,
      "type": "TrueOrFalse",
      "given": "",
      "question": "A Pure function is a function where the return value is only determined by its arguments without any side effects.",
      "displayAsCode": [],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [],
      "explanation": "",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 6144,
      "type": "TrueOrFalse",
      "given": "",
      "question": "Variables declared with <pre>var</pre> inside a function are <em>hoisted</em> to the top of the function before the function body is run",
      "displayAsCode": [],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [],
      "explanation": "",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 8225,
      "type": "MultipleChoice",
      "given": "let status = 'gold'<br>let discount = 0<br><br>switch(status) {<br>&nbsp;&nbsp;case 'gold':<br>&nbsp;&nbsp;&nbsp;&nbsp;discount = .15<br>&nbsp;&nbsp;case 'silver':<br>&nbsp;&nbsp;&nbsp;&nbsp;discount = .10<br>&nbsp;&nbsp;case 'bronze':<br>&nbsp;&nbsp;&nbsp;&nbsp;discount = .05<br>}",
      "question": "What is the value of <pre>discount</pre>",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": ["0", ".05", ".10", ".15"],
      "answer": 1,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/switch",
      "size": 0
    },
    {
      "id": 8226,
      "type": "FillBlank",
      "given": "Fill in the blank so that any <pre>status</pre> not specified will get a 5% discount",
      "question": "",
      "displayAsCode": ["q1","q2","answer"],
      "q1": "let status = 'copper'<br>let discount = 0<br><br>switch(status) {<br>&nbsp;&nbsp;case 'gold':<br>&nbsp;&nbsp;&nbsp;&nbsp;discount = .20<br>&nbsp;&nbsp;&nbsp;&nbsp;break<br>&nbsp;&nbsp;case 'silver': <br>&nbsp;&nbsp;&nbsp;&nbsp;discount = .15<br>&nbsp;&nbsp;&nbsp;&nbsp;break<br>&nbsp;&nbsp;case 'bronze': <br>&nbsp;&nbsp;&nbsp;&nbsp;discount = .10<br>&nbsp;&nbsp;&nbsp;&nbsp;break<br>&nbsp;&nbsp;",
      "q2": "<br>&nbsp;&nbsp;&nbsp;&nbsp;discount = .05<br>}",
      "choices": [],
      "answer": "",
      "answers": ["default:"],
      "explanation": "",
      "moreInfo": "https://javascript.info/switch",
      "size": 8
    },
    {
      "id": 8227,
      "type": "FillBlank",
      "given": "Fill in the blank so that execution does not \"fall though\" to the <pre>default</pre> block",
      "question": "",
      "displayAsCode": ["q1","q2","answer"],
      "q1": "let status = 'gold'<br>let discount = 0<br><br>switch(status) {<br>&nbsp;&nbsp;case 'gold':<br>&nbsp;&nbsp;&nbsp;&nbsp;discount = .20<br>&nbsp;&nbsp;&nbsp;&nbsp;",
      "q2": "<br>&nbsp;&nbsp;default:<br>&nbsp;&nbsp;&nbsp;&nbsp;discount = .10<br>}",
      "choices": [],
      "answer": "",
      "answers": ["break"],
      "explanation": "",
      "moreInfo": "https://javascript.info/switch",
      "size": 5
    },
    {
      "id": 8228,
      "type": "ValidOrNot",
      "given": "",
      "question": "let score = 81<br>let grade = null<br><br>switch(true) {<br>&nbsp;&nbsp;case score > 90:<br>&nbsp;&nbsp;&nbsp;&nbsp;grade = 'A'<br>&nbsp;&nbsp;&nbsp;&nbsp;break<br>&nbsp;&nbsp;case score > 80:<br>&nbsp;&nbsp;&nbsp;&nbsp;grade = 'B'<br>&nbsp;&nbsp;&nbsp;&nbsp;break<br>&nbsp;&nbsp;case score > 70:<br>&nbsp;&nbsp;&nbsp;&nbsp;grade = 'C'<br>&nbsp;&nbsp;&nbsp;&nbsp;break<br>&nbsp;&nbsp;case score > 60:<br>&nbsp;&nbsp;&nbsp;&nbsp;grade = 'D'<br>&nbsp;&nbsp;&nbsp;&nbsp;break<br>&nbsp;&nbsp;default:<br>&nbsp;&nbsp;&nbsp;&nbsp;grade = 'F'<br>}",
      "displayAsCode": ["question"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [],
      "explanation": "",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 8229,
      "type": "ValidOrNot",
      "given": "",
      "question": "let status = 'silver'<br>let discountPercent = 0<br><br>switch(status) {<br>&nbsp;&nbsp;case 'gold':<br>&nbsp;&nbsp;&nbsp;&nbsp;discountPercent += 5<br>&nbsp;&nbsp;case 'silver':<br>&nbsp;&nbsp;&nbsp;&nbsp;discountPercent += 5<br>&nbsp;&nbsp;case 'bronze':<br>&nbsp;&nbsp;&nbsp;&nbsp;discountPercent += 5<br>}",
      "displayAsCode": ["question"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/switch",
      "size": 0
    },
    {
      "id": 8231,
      "type": "MultipleChoice",
      "given": "let status = 'silver'<br>let discountPercent = 0<br><br>switch(status) {<br>&nbsp;&nbsp;case 'gold':<br>&nbsp;&nbsp;&nbsp;&nbsp;discountPercent += 5<br>&nbsp;&nbsp;case 'silver':<br>&nbsp;&nbsp;&nbsp;&nbsp;discountPercent += 5<br>&nbsp;&nbsp;case 'bronze':<br>&nbsp;&nbsp;&nbsp;&nbsp;discountPercent += 5<br>}",
      "question": "What is the value of <pre>discountPercent</pre>",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": ["0","5","10","15"],
      "answer": 2,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/switch",
      "size": 0
    },
    {
      "id": 7126,
      "type": "ValidOrNot",
      "given": "",
      "question": "let price = 120.75<br>let discountedPrice = (price > 100 ? price *.95 : price).toFixed(2)",
      "displayAsCode": ["question"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [],
      "explanation": "",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 7127,
      "type": "FillBlank",
      "given": "Fill in the blank so that the value of <pre>discountedPrice</pre> will be a number with two digits after the decimal point",
      "question": "",
      "displayAsCode": ["q1","q2","answer"],
      "q1": "let price = 120.75<br>let discountedPrice = (price > 100 ? price *.95 : price).",
      "q2": "",
      "choices": [],
      "answer": "",
      "answers": ["toFixed(2)"],
      "explanation": "",
      "moreInfo": "",
      "size": 10
    },
    {
      "id": 8150,
      "type": "MultipleChoice",
      "given": "let subscribe = false<br><br>function toggle() {subscribe = !subscribe}<br><br>toggle()",
      "question": "What is the value of <pre>subscribe</pre>?",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": ["<pre>true</pre>","<pre>false</pre>"],
      "answer": 0,
      "answers": [],
      "explanation": "",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 8151,
      "type": "FillBlank",
      "given": "Fill in the blank so that <pre>toggle</pre> flips the value of <pre>subscribe</pre>",
      "question": "",
      "displayAsCode": ["q1","q2","answer"],
      "q1": "let subscribe = false<br><br>function toggle() {<br>&nbsp;&nbsp;",
      "q2": "<br>}",
      "choices": [],
      "answer": "",
      "answers": ["subscribe != subscribe"],
      "explanation": "",
      "moreInfo": "",
      "size": 22
    },
    {
      "id": 8231,
      "type": "MultipleChoice",
      "given": "",
      "question": "The <pre>??</pre> operator is known as...",
      "displayAsCode": [],
      "q1": "",
      "q2": "",
      "choices": ["spread operator", "destructuring", "logical XOR", "nullish coallescing"],
      "answer": 3,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/nullish-coalescing-operator",
      "size": 0
    },
    {
      "id": 8232,
      "type": "TrueOrFalse",
      "given": "let subscribed = false<br>let results = subscribed ?? 'weekly'",
      "question": "The value of <pre>results</pre> is 'weekly",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": false,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/nullish-coalescing-operator",
      "size": 0
    },
    {
      "id": 8233,
      "type": "TrueOrFalse",
      "given": "let subscribed = null<br>let results = subscribed ?? 'weekly'",
      "question": "The value of <pre>results</pre> is 'weekly",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/nullish-coalescing-operator",
      "size": 0
    },
    {
      "id": 8234,
      "type": "TrueOrFalse",
      "given": "let subscribed<br>let results = subscribed ?? 'weekly'",
      "question": "The value of <pre>results</pre> is 'weekly",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/nullish-coalescing-operator",
      "size": 0
    },
    {
      "id": 8235,
      "type": "TrueOrFalse",
      "given": "let parsimonious = false<br>let effulgent = 'Calm down'<br><br>log(parsimonious ?? effulgent)<br>log(parsimonious || effulgent)",
      "question": "Both <pre>log</pre> statements produce the same results",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": false,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/nullish-coalescing-operator",
      "size": 0
    },
    {
      "id": 8236,
      "type": "TrueOrFalse",
      "given": "let parsimonious = false<br>let effulgent = 'Calm down'<br><br>log(parsimonious ?? effulgent)",
      "question": "This code will log <em>false</em> to the console",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/nullish-coalescing-operator",
      "size": 0
    },
    {
      "id": 8237,
      "type": "TrueOrFalse",
      "given": "let parsimonious = false<br>let effulgent = 'Calm down'<br><br>log(parsimonious || effulgent)",
      "question": "This code will log <em>false</em> to the console",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": false,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/nullish-coalescing-operator",
      "size": 0
    },
    {
      "id": 8152,
      "type": "TrueOrFalse",
      "given": "let still = true<br>if (still) {<br>&nbsp;&nbsp;let random = Math.random()<br>&nbsp;&nbsp;log(random)<br>&nbsp;&nbsp;if (random > 0.5) {<br>&nbsp;&nbsp;&nbsp;&nbsp;still = false<br>&nbsp;&nbsp;}<br>}",
      "question": "This code will loop repeatedly until the value of <pre>random</pre> is less than or equal to 0.5",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": false,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/while-for",
      "size": 0
    },
    {
      "id": 8153,
      "type": "TrueOrFalse",
      "given": "let still = true<br>while (still) {<br>&nbsp;&nbsp;let random = Math.random()<br>&nbsp;&nbsp;log(random)<br>&nbsp;&nbsp;if (random > 0.5) {<br>&nbsp;&nbsp;&nbsp;&nbsp;still = false<br>&nbsp;&nbsp;}<br>}",
      "question": "This code will loop repeatedly until the value of <pre>random</pre> is less than or equal to 0.5",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/while-for",
      "size": 0
    },
    {
      "id": 8154,
      "type": "FillBlank",
      "given": "Fill in the blank so that it creates a loop that will run so long as <pre>still</pre> is and remains <pre>true</pre>",
      "question": "",
      "displayAsCode": ["q1","q2","answer"],
      "q1": "let still = true<br><br>",
      "q2": "(still) {<br>&nbsp;&nbsp;let random = Math.random()<br>&nbsp;&nbsp;log(random)<br>&nbsp;&nbsp;if (random > 0.5) {<br>&nbsp;&nbsp;&nbsp;&nbsp;still = false<br>&nbsp;&nbsp;}<br>}",
      "choices": [],
      "answer": "",
      "answers": ["while"],
      "explanation": "",
      "moreInfo": "https://javascript.info/while-for",
      "size": 5
    },
    {
      "id": 8155,
      "type": "ValidOrNot",
      "given": "",
      "question": "let still = 10<br>while (still) {<br>&nbsp;&nbsp;let random = Math.random()<br>&nbsp;&nbsp;log(random)<br>&nbsp;&nbsp;if (random > 0.5) {<br>&nbsp;&nbsp;&nbsp;&nbsp;still = 0<br>&nbsp;&nbsp;}<br>}",
      "displayAsCode": ["question"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [],
      "explanation": "It is valid, but...using booleans would be smarter than using numbers and relying on JavaScript to cast those to booleans.",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 8156,
      "type": "MultipleChoice",
      "given": "let still = 10<br>while (still) {<br>&nbsp;&nbsp;let random = Math.random()<br>&nbsp;&nbsp;log(random)<br>&nbsp;&nbsp;if (random > 0.5) {<br>&nbsp;&nbsp;&nbsp;&nbsp;still = 0<br>&nbsp;&nbsp;}<br>}",
      "question": "How many times will the loop run?",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": [0, 1, 10, 'indeterminable'],
      "answer": 3,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/while-for",
      "size": 0
    },
    {
      "id": 8157,
      "type": "TrueOrFalse",
      "given": "",
      "question": "The difference between the <em>while</em> and the <em>do while</em> loop is that the <em>do while</em> loop executes at least once, regardless of the condition",
      "displayAsCode": [],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/while-for",
      "size": 0
    },
    {
      "id": 8158,
      "type": "TrueOrFalse",
      "given": "let still = false<br>do {<br>&nbsp;&nbsp;let random = Math.random()<br>&nbsp;&nbsp;log(random)<br>&nbsp;&nbsp;if (random > 0.5) {<br>&nbsp;&nbsp;still = true<br>&nbsp;&nbsp;}<br>} while (still)",
      "question": "This code will not execute as the <pre>while</pre> condition is <pre>false</pre>",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": false,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/while-for",
      "size": 0
    },
    {
      "id": 8159,
      "type": "FillBlank",
      "given": "Someone deleted the <pre>while</pre> clause. Fill in the blank to restore it.",
      "question": "",
      "displayAsCode": ["q1","q2","answer"],
      "q1": "let still = false<br><br>do {<br>&nbsp;&nbsp;let random = Math.random()<br>&nbsp;&nbsp;log(random)<br>&nbsp;&nbsp;if (random > 0.5) {<br>&nbsp;&nbsp;&nbsp;&nbsp;still = true<br>&nbsp;&nbsp;}<br>}&nbsp;",
      "q2": "",
      "choices": [],
      "answer": "",
      "answers": ["while(still)", "while(still == true)", "while(still === true)"],
      "explanation": "",
      "moreInfo": "https://javascript.info/while-for",
      "size": 21 
    },
    {
      "id": 5126,
      "type": "ValidOrNot",
      "given": "",
      "question": "let flowers = ['rose', 'begonia', 'iris', 'orchid']<br>flowers.forEach( flower => console.log(flower))",
      "displayAsCode": ["question"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/array-methods#iterate-foreach",
      "size": 0
    },
    {
      "id": 5127,
      "type": "ValidOrNot",
      "given": "",
      "question": "function printOut (item) {<br>&nbsp;&nbsp;console.log(item)<br>}<br><br>let flowers = ['rose', 'begonia', 'iris', 'orchid']<br><br>flowers.forEach(printOut)",
      "displayAsCode": ["question"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/array-methods#iterate-foreach",
      "size": 0
    },
    {
      "id": 5230,
      "type": "FillBlank",
      "given": "Fill in the blank to loop over the <pre>flowers</pre> array using <pre>forEach</pre> and the <pre>printOut</pre> function",
      "question": "",
      "displayAsCode": ["q1","q2","answer"],
      "q1": "function printOut (item) {<br>&nbsp;&nbsp;console.log(item)<br>}<br><br>let flowers = ['rose', 'begonia', 'iris', 'orchid']<br><br>",
      "q2": "",
      "choices": [],
      "answer": "",
      "answers": ["flowers.forEach(printOut)"],
      "explanation": "",
      "moreInfo": "https://javascript.info/array-methods#iterate-foreach",
      "size": 27
    },
    {
      "id": 5231,
      "type": "ValidOrNot",
      "given": "",
      "question": "let printOut = item => console.log(item)<br><br>let flowers = ['rose', 'begonia', 'iris', 'orchid']<br>flowers.forEach(printOut)",
      "displayAsCode": ["question"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/array-methods#iterate-foreach",
      "size": 0
    },
    {
      "id": 5232,
      "type": "TrueOrFalse",
      "given": "let flowers = [<br>&nbsp;&nbsp;{name: 'rose', color: 'red', price: 15.89},<br>&nbsp;&nbsp;{name: 'begonia', color: 'pink', price: 17.24},<br>&nbsp;&nbsp;{name: 'iris', color: 'blue', price: 12.64},<br>&nbsp;&nbsp;{name: 'orchid', color: 'purple', price: 24.64},<br>]<br><br>flowers.forEach( flower => {<br>&nbsp;&nbsp;console.log(`${flower.name}: ${flower.price}`)<br>})",
      "question": "This code will sort the flowers by price and log each one to the console",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": false,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/array-methods#iterate-foreach",
      "size": 0
    },
    {
      "id": 5233,
      "type": "ValidOrNot",
      "given": "",
      "question": "let flowers = [<br>&nbsp;&nbsp;{name: 'rose', color: 'red', price: 15.89},<br>&nbsp;&nbsp;{name: 'begonia', color: 'pink', price: 17.24},<br>&nbsp;&nbsp;{name: 'iris', color: 'blue', price: 12.64},<br>&nbsp;&nbsp;{name: 'orchid', color: 'purple', price: 24.64},<br>]<br><br>let lowerPrice = flowers.filter( flower => flower.price < 20 )",
      "displayAsCode": ["question"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/array-methods#filter",
      "size": 0
    },
    {
      "id": 5234,
      "type": "ValidOrNot",
      "given": "",
      "question": "let cart = [<br>&nbsp;&nbsp;{name: 'rose', color: 'red', price: 15.89},<br>&nbsp;&nbsp;{name: 'begonia', color: 'pink', price: 17.24},<br>&nbsp;&nbsp;{name: 'iris', color: 'blue', price: 12.64},<br>&nbsp;&nbsp;{name: 'orchid', color: 'purple', price: 24.64},<br>]<br><br>let cartTotal = cart.reduce( (sum, flower) => sum + flower.price, 0)",
      "displayAsCode": ["question"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/array-methods#reduce-reduceright",
      "size": 0
    },
    {
      "id": 5235,
      "type": "TrueOrFalse",
      "given": "let cart = [<br>&nbsp;&nbsp;{name: 'rose', color: 'red', price: 15.89},<br>&nbsp;&nbsp;{name: 'begonia', color: 'pink', price: 17.24},<br>&nbsp;&nbsp;{name: 'iris', color: 'blue', price: 12.64},<br>&nbsp;&nbsp;{name: 'orchid', color: 'purple', price: 24.64},<br>]<br><br>let cartTotal = cart.reduce( (sum, flower) => sum + flower.price, 0)",
      "question": "This code creates a new array, <pre>cartTotal</pre> as a result of the <pre>map</pre> function",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": false,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/array-methods#reduce-reduceright",
      "size": 0
    },
    {
      "id": 5236,
      "type": "ValidOrNot",
      "given": "",
      "question": "let baseRoomRate = 319<br>let options = [<br>&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;option: 'Strip view',<br>&nbsp;&nbsp;&nbsp;&nbsp;addOnPrice: 29<br>&nbsp;&nbsp;},<br>&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;option: 'Spa',<br>&nbsp;&nbsp;&nbsp;&nbsp;addOnPrice: 79<br>&nbsp;&nbsp;}<br>]<br><br>let roomPrice = options.reduce( (total, option ) => total + option.addOnPrice, baseRoomRate)",
      "displayAsCode": ["question"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/array-methods#reduce-reduceright",
      "size": 0
    },
    {
      "id": 5237,
      "type": "FillBlank",
      "given": "Fill in the blank so that the inital value of the accumulator is the base room rate",
      "question": "",
      "displayAsCode": ["q1","q2","answer"],
      "q1": "let baseRoomRate = 319<br>let options = [<br>&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;option: 'Strip view',<br>&nbsp;&nbsp;&nbsp;&nbsp;addOnPrice: 29<br>&nbsp;&nbsp;},<br>&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;option: 'Spa',<br>&nbsp;&nbsp;&nbsp;&nbsp;addOnPrice: 79<br>&nbsp;&nbsp;}<br>]<br><br>let roomPrice = options.reduce( (total, option ) => total + option.addOnPrice,",
      "q2": ")",
      "choices": [],
      "answer": "",
      "answers": ["baseRoomRate"],
      "explanation": "",
      "moreInfo": "https://javascript.info/array-methods#reduce-reduceright",
      "size": 12
    },
    {
      "id": 538,
      "type": "ValidOrNot",
      "given": "",
      "question": "let baseRoomRate = 319<br>let options = [<br>&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;option: 'Strip view',<br>&nbsp;&nbsp;&nbsp;&nbsp;addOnPrice: 29,<br>&nbsp;&nbsp;&nbsp;&nbsp;chosen: true<br>&nbsp;&nbsp;},<br>&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;option: 'Spa',<br>&nbsp;&nbsp;&nbsp;&nbsp;addOnPrice: 79,<br>&nbsp;&nbsp;&nbsp;&nbsp;chosen: false<br>&nbsp;&nbsp;},<br>&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;option: 'Buffet',<br>&nbsp;&nbsp;&nbsp;&nbsp;addOnPrice: 59,<br>&nbsp;&nbsp;&nbsp;&nbsp;chosen: true<br>&nbsp;&nbsp;}<br>]<br><br>let roomPrice = options.reduce(( total, option) => {<br>&nbsp;&nbsp;return option.chosen ? total + option.addOnPrice : total<br>}, baseRoomRate)",
      "displayAsCode": ["question"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/array-methods#reduce-reduceright",
      "size": 0
    },
    {
      "id": 539,
      "type": "FillBlank",
      "given": "Fill in the blank so that <pre>option.addOnPrice</pre> is added to <pre>total</pre> only if <pre>option.chosen</pre> is <pre>true</pre>",
      "question": "",
      "displayAsCode": ["q1","q2","answer"],
      "q1": "let baseRoomRate = 319<br>let options = [<br>&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;option: 'Strip view',<br>&nbsp;&nbsp;&nbsp;&nbsp;addOnPrice: 29,<br>&nbsp;&nbsp;&nbsp;&nbsp;chosen: true<br>&nbsp;&nbsp;},<br>&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;option: 'Spa',<br>&nbsp;&nbsp;&nbsp;&nbsp;addOnPrice: 79,<br>&nbsp;&nbsp;&nbsp;&nbsp;chosen: false<br>&nbsp;&nbsp;},<br>&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;option: 'Buffet',<br>&nbsp;&nbsp;&nbsp;&nbsp;addOnPrice: 59,<br>&nbsp;&nbsp;&nbsp;&nbsp;chosen: true<br>&nbsp;&nbsp;}<br>]<br><br>let roomPrice = options.reduce(( total, option) => {<br>&nbsp;&nbsp;return ",
      "q2": " ? total + option.addOnPrice : total<br>},baseRoomRate)",
      "choices": [],
      "answer": "",
      "answers": ["option.chosen"],
      "explanation": "",
      "moreInfo": "https://javascript.info/array-methods#reduce-reduceright",
      "size": 13
    },
    {
      "id": 5238,
      "type": "TrueOrFalse",
      "given": "let baseRoomRate = 319<br>let options = [<br>&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;option: 'Strip view',<br>&nbsp;&nbsp;&nbsp;&nbsp;addOnPrice: 29,<br>&nbsp;&nbsp;&nbsp;&nbsp;chosen: true<br>&nbsp;&nbsp;},<br>&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;option: 'Spa',<br>&nbsp;&nbsp;&nbsp;&nbsp;addOnPrice: 79,<br>&nbsp;&nbsp;&nbsp;&nbsp;chosen: false<br>&nbsp;&nbsp;},<br>&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;option: 'Buffet',<br>&nbsp;&nbsp;&nbsp;&nbsp;addOnPrice: 59,<br>&nbsp;&nbsp;&nbsp;&nbsp;chosen: true<br>&nbsp;&nbsp;}<br>]<br><br>let roomPrice = options.reduce(( total, option) => {<br>&nbsp;&nbsp;return option.chosen ? total + option.addOnPrice : total<br>}, baseRoomRate)",
      "question": "This code fails because you cannot use the <em>ternary</em> operator inside the <em>reduce</em> function of an array",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": false,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/array-methods#reduce-reduceright",
      "size": 0
    },
    {
      "id": 5239,
      "type": "ValidOrNot",
      "given": "",
      "question": "let GVassays = [<br>&nbsp;&nbsp;{ reading: 0.27 },<br>&nbsp;&nbsp;{ reading: -0.018 },<br>&nbsp;&nbsp;{ reading: 0.24 },<br>&nbsp;&nbsp;{ reading: 0.01 },<br>&nbsp;&nbsp;{ reading: 0.22 },<br>&nbsp;&nbsp;{ reading: -0.26 },<br>]<br><br>let avg = reduce((GVassays, total, assay) => total + assay.reading, 0)/GVassays.length",
      "displayAsCode": ["question"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": false,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/array-methods#reduce-reduceright",
      "size": 0
    },
    {
      "id": 5240,
      "type": "FillBlank",
      "given": "Fill in the blank so that <pre>avg</pre> is the simple average of the readings of <pre>GVassays</pre>",
      "question": "",
      "displayAsCode": ["q1","q2","answer"],
      "q1": "let GVassays = [<br>&nbsp;&nbsp;{ reading: 0.27 },<br>&nbsp;&nbsp;{ reading: -0.018 },<br>&nbsp;&nbsp;{ reading: 0.24 },<br>&nbsp;&nbsp;{ reading: 0.01 },<br>&nbsp;&nbsp;{ reading: 0.22 },<br>&nbsp;&nbsp;{ reading: -0.26 },<br>]<br><br>let avg = reduce((GVassays, total, assay) => total + assay.reading, 0)",
      "q2": "",
      "choices": [],
      "answer": "",
      "answers": ["/GVassays.length"],
      "explanation": "",
      "moreInfo": "https://javascript.info/array-methods#reduce-reduceright",
      "size": 20
    },
    {
      "id": 5241,
      "type": "TrueOrFalse",
      "given": "let MRassays = [<br>&nbsp;&nbsp;0.276,<br>&nbsp;&nbsp;0.149,<br>&nbsp;&nbsp;0.475,<br>&nbsp;&nbsp;0.294,<br>&nbsp;&nbsp;0.092,<br>&nbsp;&nbsp;0.410,<br>&nbsp;&nbsp;0.096,<br>&nbsp;&nbsp;0.413,<br>&nbsp;&nbsp;0.176<br>]<br><br>let highLimit = 0.420<br>let lowLimit = 0.150<br><br>let avg = MRassays.filter(assay => assay >= lowLimit && assay <= highLimit)",
      "question": "<pre>avg</pre> is the simple average of the contents of <pre>MRassays</pre> that fall within <pre>lowLimit</pre> and <pre>highLimit</pre>",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": false,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/array-methods#filter",
      "size": 0
    },
    {
      "id": 5241,
      "type": "TrueOrFalse",
      "given": "let MRassays = [<br>&nbsp;&nbsp;0.276,<br>&nbsp;&nbsp;0.149,<br>&nbsp;&nbsp;0.475,<br>&nbsp;&nbsp;0.294,<br>&nbsp;&nbsp;0.092,<br>&nbsp;&nbsp;0.410,<br>&nbsp;&nbsp;0.096,<br>&nbsp;&nbsp;0.413,<br>&nbsp;&nbsp;0.176<br>]<br><br>let highLimit = 0.420<br>let lowLimit = 0.150<br><br>let filteredAssays = MRassays.filter(assay => assay >= lowLimit && assay <= highLimit)<br><br>let avg = filteredAssays.reduce((total, assay) => total + assay, 0)/filteredAssays.length",
      "question": "<pre>avg</pre> is the simple average of the contents of <pre>MRassays</pre> that fall within <pre>lowLimit</pre> and <pre>highLimit</pre>",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/array-methods#reduce-reduceright",
      "size": 0
    },
    {
      "id": 5242,
      "type": "MultipleChoice",
      "given": "let MRassays = [<br>&nbsp;&nbsp;0.276,<br>&nbsp;&nbsp;0.149,<br>&nbsp;&nbsp;0.475,<br>&nbsp;&nbsp;0.294,<br>&nbsp;&nbsp;0.092,<br>&nbsp;&nbsp;0.410,<br>&nbsp;&nbsp;0.096,<br>&nbsp;&nbsp;0.413,<br>&nbsp;&nbsp;0.176<br>]<br><br>let highLimit = 0.420<br>let lowLimit = 0.150<br><br>let filteredAssays = MRassays.❄(assay => assay >= lowLimit && assay <= highLimit)<br><br>let avg = filteredAssays.✯((total, assay) => total + assay, 0)/filteredAssays.length",
      "question": "The symbols, ❄ and ✯ are stand-ins for...",
      "displayAsCode": ["given", "choices"],
      "q1": "",
      "q2": "",
      "choices": ["map, reduce", "forEach, map", "filter, reduce", "sort, map"],
      "answer": 2,
      "answers": [],
      "explanation": "",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 5243,
      "type": "MultipleChoice",
      "given": "function compare(a, b) {<br>&nbsp;&nbsp;if (a > b) return 1<br>&nbsp;&nbsp;if (a < b) return -1<br>&nbsp;&nbsp;return 0<br>}",
      "question": "Will the <pre>compare</pre> function work to sort numbers properly when passed into an array's <pre>sort</pre> function?",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": ["Yes", "No"],
      "answer": 0,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/array-methods#sort-fn",
      "size": 0
    },
    {
      "id": 5244,
      "type": "TrueOrFalse",
      "given": "let MRassays = [<br>&nbsp;&nbsp;0.276,<br>&nbsp;&nbsp;0.149,<br>&nbsp;&nbsp;0.475,<br>&nbsp;&nbsp;0.294,<br>&nbsp;&nbsp;0.092,<br>&nbsp;&nbsp;0.410,<br>&nbsp;&nbsp;0.096,<br>&nbsp;&nbsp;0.413,<br>&nbsp;&nbsp;0.176<br>]<br><br>function compare(a, b) {<br>&nbsp;&nbsp;if (a > b) return 1<br>&nbsp;&nbsp;if (a < b) return -1<br>&nbsp;&nbsp;return 0<br>}<br><br>let sortedArray = MRassays.sort(compare)",
      "question": "<pre>sortedArray</pre> is a sorted array of the elements within <pre>MRassays</pre>",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/array-methods#sort-fn",
      "size": 0
    },
    {
      "id": 5311,
      "type": "ValidOrNot",
      "given": "",
      "question": "let MRassays = [<br>&nbsp;&nbsp;0.276,<br>&nbsp;&nbsp;0.149,<br>&nbsp;&nbsp;0.475,<br>&nbsp;&nbsp;0.294,<br>&nbsp;&nbsp;0.092,<br>&nbsp;&nbsp;0.410,<br>&nbsp;&nbsp;0.096,<br>&nbsp;&nbsp;0.413,<br>&nbsp;&nbsp;0.176<br>]<br><br>function numericCompare(a, b) {<br>&nbsp;&nbsp;if (a > b) return 1<br>&nbsp;&nbsp;if (b > a) return -1<br>&nbsp;&nbsp;return 0<br>}<br><br>let sortedAssays = MRassays.sort(numericCompare)<br>let trimmedAssays = []<br><br>for (let i=1; i&lt;sortedAssays.length-1; i++) {<br>&nbsp;&nbsp;trimmedAssays.push(sortedAssays[i])<br>}<br><br>let avg = trimmedAssays.reduce((total, assay) => total + assay)/trimmedAssays.length",
      "displayAsCode": ["question"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/array",
      "size": 0
    },
    {
      "id": 5245,
      "type": "TrueOrFalse",
      "given": "let arr = [1, 10, 5]<br>console.log(arr.sort())",
      "question": "<em>1, 5, 10</em> will be logged to the console",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": false,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/array-methods#sort-fn",
      "size": 0
    },
    {
      "id": 5246,
      "type": "TrueOrFalse",
      "given": "function numericCompare(a, b) {<br>&nbsp;&nbsp;if (a > b) return 1<br>&nbsp;&nbsp;if (b > a) return -1<br>&nbsp;&nbsp;return 0<br>}<br><br>let arr = [1, 10, 5]<br>console.log(arr.sort(numericCompare))",
      "question": "There is no need to provide a custom comparison function, as <pre>arr.sort()</pre> produces the identical sorted array",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": false,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/array-methods#sort-fn",
      "size": 0
    },
    {
      "id": 5312,
      "type": "FillBlank",
      "given": "Fill in the blank to sort <pre>players</pre> by their batting average",
      "question": "",
      "displayAsCode": ["q1","q2","answer"],
      "q1": "let players = [<br>&nbsp;&nbsp;{name: 'Adam Frazier', battingAvg: .330},<br>&nbsp;&nbsp;{name: 'Trea Turner', battingAvg: .319},<br>&nbsp;&nbsp;{name: 'Vladimir Guerrero, Jr', battingAvg: .335},<br>&nbsp;&nbsp;{name: 'Michael Brantley', battingAvg: .329},<br>&nbsp;&nbsp;{name: 'Nick Castellanos', battingAvg: .330},<br>]<br><br>function baComparison(playerA, playerB) {<br>&nbsp;&nbsp;if (playerA.battingAvg &lt; playerB.battingAvg) return 1<br>&nbsp;&nbsp;if (playerA.battingAvg &gt; playerB.battingAvg) return -1<br>&nbsp;&nbsp;return 0<br>}<br><br>let sortedPlayers = ",
      "q2": "",
      "choices": [],
      "answer": "",
      "answers": ["players.sort(baComparison)"],
      "explanation": "",
      "moreInfo": "https://javascript.info/array-methods#sort-fn",
      "size": 30
    },
    {
      "id": ,
      "type": "",
      "given": "",
      "question": "",
      "displayAsCode": [],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": "",
      "answers": [],
      "explanation": "",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 5247,
      "type": "TrueOrFalse",
      "given": "let arr = [92, 94, 81, 76, 99, 94, 81, 88]<br>let deduped = new Set(arr)<br>let arr2= new Array(deduped)",
      "question": "This code will 'de-dupe' an array and then create a new array in which each item is unique",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": false,
      "answers": [],
      "explanation": "",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 5248,
      "type": "TrueOrFalse",
      "given": "let arr = [92, 94, 81, 76, 99, 94, 81, 88]<br>let deduped = new Set(arr)<br>arr = Array.from(deduped)",
      "question": "This code will 'de-dupe' an array and then create a new array in which each item is unique",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [],
      "explanation": "",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 6145,
      "type": "TrueOrFalse",
      "given": "let eroica = {<br>%nbsp;&nbsp;composer: 'Beethoven',<br>%nbsp;&nbsp;symphonyNo: 3,<br>%nbsp;&nbsp;brief: function() {<br>%nbsp;&nbsp;%nbsp;&nbsp;return `The Eroica symphony (number undefined) was written by undefined`<br>%nbsp;&nbsp;}<br>}",
      "question": "This code returns <em>The Eroica symphony (number 3) was written by Beethoven</em>",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [],
      "explanation": "",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 6146,
      "type": "TrueOrFalse",
      "given": "let eroica = {<br>&nbsp;&nbsp;composer: 'Beethoven',<br>&nbsp;&nbsp;symphonyNo: 3,<br>&nbsp;&nbsp;brief: function() {<br>&nbsp;&nbsp;&nbsp;&nbsp;console.log( `The Eroica symphony (number ${this.symphonyNo}) was written by ${this.composer}`)<br>&nbsp;&nbsp;}<br>}`<br><br>setTimeout(eroica.brief, 1000)",
      "question": "This code logs <em>The Eroica symphony (number 3) was written by Beethoven</em> after a delay of 1 second",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": false,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/bind#losing-this",
      "size": 0
    },
    {
      "id": 6236,
      "type": "TrueOrFalse",
      "given": "let eroica = {<br>&nbsp;&nbsp;composer: 'Beethoven',<br>&nbsp;&nbsp;symphonyNo: 3,<br>&nbsp;&nbsp;brief: function() {<br>&nbsp;&nbsp;&nbsp;&nbsp;console.log( `The Eroica symphony (number ${this.symphonyNo}) was written by ${this.composer}`)<br>&nbsp;&nbsp;}<br>}<br><br>setTimeout(() => eroica.brief(), 1000)",
      "question": "This code logs <em>The Eroica symphony (number 3) was written by Beethoven</em> after a delay of 1 second",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/bind#solution-1-a-wrapper",
      "size": 0
    },
    {
      "id": 6237,
      "type": "TrueOrFalse",
      "given": "let eroica = {<br>&nbsp;&nbsp;composer: 'Beethoven',<br>&nbsp;&nbsp;symphonyNo: 3,<br>&nbsp;&nbsp;brief: function() {<br>&nbsp;&nbsp;&nbsp;&nbsp;console.log( `The Eroica symphony (number ${this.symphonyNo}) was written by ${this.composer}`)<br>&nbsp;&nbsp;}<br>}<br><br>function choice(fnc) {<br>&nbsp;&nbsp;fnc()<br>}<br><br>choice(eroica.brief)",
      "question": "This code logs <em>The Eroica symphony (number 3) was written by Beethoven</em>",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/bind#solution-1-a-wrapper",
      "size": 0
    },
    {
      "id": 6238,
      "type": "TrueOrFalse",
      "given": "let eroica = {<br>&nbsp;&nbsp;composer: 'Beethoven',<br>&nbsp;&nbsp;symphonyNo: 3,<br>&nbsp;&nbsp;brief: function() {<br>&nbsp;&nbsp;&nbsp;&nbsp;console.log( `The Eroica symphony (number ${this.symphonyNo}) was written by ${this.composer}`)<br>&nbsp;&nbsp;}<br>}<br><br>let choice = eroica.brief.bind(eroica)<br><br>choice()",
      "question": "This code logs <em>The Eroica symphony (number 3) was written by Beethoven</em>",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/bind#solution-2-bind",
      "size": 0
    },
    {
      "id": 6239,
      "type": "FillBlank",
      "given": "Fill in the blank so that <pre>choice</pre> uses <pre>pastoral</pre> as its <pre>this</pre> context.",
      "question": "",
      "displayAsCode": ["q1","q2","answer"],
      "q1": "let pastoral = {<br>&nbsp;&nbsp;composer: 'Beethoven',<br>&nbsp;&nbsp;symphonyNo: 6,<br>&nbsp;&nbsp;brief: function(name) {<br>&nbsp;&nbsp;&nbsp;&nbsp;console.log( `The ${name} (number ${this.symphonyNo}) was written by ${this.composer}`)<br>&nbsp;&nbsp;}<br>}<br><br>let choice = pastoral.brief.",
      "q2": "<br><br>choice('Pastoral symphony')",
      "choices": [],
      "answer": "",
      "answers": ["bind(pastoral)"],
      "explanation": "",
      "moreInfo": "https://javascript.info/bind#solution-2-bind",
      "size": 17
    },
    {
      "id": ,
      "type": "",
      "given": "",
      "question": "",
      "displayAsCode": [],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": "",
      "answers": [],
      "explanation": "",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 6312,
      "type": "MultipleChoice",
      "given": "let beethoven = {<br>&nbsp;&nbsp;name: 'Ludwig van Beethoven',<br>&nbsp;&nbsp;symphonies: [<br>&nbsp;&nbsp;&nbsp;&nbsp;'Symphony No. 1, in C major',<br>&nbsp;&nbsp;&nbsp;&nbsp;'Symphony No. 2, in D major',<br>&nbsp;&nbsp;&nbsp;&nbsp;'Symphony No. 3, in E flat major',<br>&nbsp;&nbsp;&nbsp;&nbsp;'Symphony No. 4, in B flat major',<br>&nbsp;&nbsp;&nbsp;&nbsp;'Symphony No. 5, in C minor',<br>&nbsp;&nbsp;&nbsp;&nbsp;'Symphony No. 6, in F major',<br>&nbsp;&nbsp;&nbsp;&nbsp;'Symphony No. 7, in A major',<br>&nbsp;&nbsp;&nbsp;&nbsp;'Symphony No. 8, in F major',<br>&nbsp;&nbsp;&nbsp;&nbsp;'Symphony No. 9, in D minor',<br>&nbsp;&nbsp;],<br>&nbsp;&nbsp;rundown: function() {<br>&nbsp;&nbsp;&nbsp;&nbsp;this.symphonies.forEach(function(symphony) {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log(this.name + ' wrote ' + symphony)<br>&nbsp;&nbsp;&nbsp;&nbsp;})<br>&nbsp;&nbsp;}<br>}<br><br>beethoven.rundown()",
      "question": "This code has a problem &mdash; within the <pre>rundown</pre> function, <pre>this.name</pre> has no value! Why is this?",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": ["You shouldn't have a function within an object", "<pre>this</pre> does not point to the object but to the function, which has no <pre>name</pre> variable", "the <pre>name</pre> property should have been declared as <pre>this.name</pre>", "It's JavaScript &mdash; who knows why it does crazy stuff?"],
      "answer": 1,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/arrow-functions#arrow-functions-have-no-this",
      "size": 0
    },
    {
      "id": 6313,
      "type": "TrueOrFalse",
      "given": "let beethoven = {<br>&nbsp;&nbsp;name: 'Ludwig van Beethoven',<br>&nbsp;&nbsp;symphonies: [<br>&nbsp;&nbsp;&nbsp;&nbsp;'Symphony No. 1, in C major',<br>&nbsp;&nbsp;&nbsp;&nbsp;'Symphony No. 2, in D major',<br>&nbsp;&nbsp;&nbsp;&nbsp;'Symphony No. 3, in E flat major',<br>&nbsp;&nbsp;&nbsp;&nbsp;'Symphony No. 4, in B flat major',<br>&nbsp;&nbsp;&nbsp;&nbsp;'Symphony No. 5, in C minor',<br>&nbsp;&nbsp;&nbsp;&nbsp;'Symphony No. 6, in F major',<br>&nbsp;&nbsp;&nbsp;&nbsp;'Symphony No. 7, in A major',<br>&nbsp;&nbsp;&nbsp;&nbsp;'Symphony No. 8, in F major',<br>&nbsp;&nbsp;&nbsp;&nbsp;'Symphony No. 9, in D minor',<br>&nbsp;&nbsp;],<br>&nbsp;&nbsp;rundown: function() {<br>&nbsp;&nbsp;&nbsp;&nbsp;this.symphonies.forEach(function(symphony) {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log(this.name + ' wrote ' + symphony)<br>&nbsp;&nbsp;&nbsp;&nbsp;})<br>&nbsp;&nbsp;}<br>}<br><br>beethoven.rundown()",
      "question": "This code has a problem &mdash; within the <pre>rundown</pre> function, <pre>this.name</pre> has no value! One good way to solve this problem is to rewrite the anonymous function sent to <pre>this.symphonies.forEach</pre> as an <em>arrow function</em>.",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/arrow-functions#arrow-functions-have-no-this",
      "size": 0
    },
    {
      "id": 131,
      "type": "MultipleChoice",
      "given": "",
      "question": "A good definition of <em>memoization<em> is...",
      "displayAsCode": [],
      "q1": "",
      "q2": "",
      "choices": ["the process of creating comments that describe <em>what</em> the could does rather than <em>how<em> the intent is implemented", "the creation of an API <em>contract</em> that allows front- and back-end development to proceed separately", "the use of <em>symbols</em> rather than strings for object property names", "a technique that increases a function's performance by caching previously computed results"],
      "answer": 3,
      "answers": [],
      "explanation": "",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 6147,
      "type": "MultipleChoice",
      "given": "function fnc(a,b,c) {<br>&nbsp;&nbsp;console.log(arguments)<br>}<br><br>fnc('Ludwig', 'van', 'Beethoven')",
      "question": "What will be logged to the console?",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": ["Ludwig van Beethoven", "undefined", "error", "{ 0: 'Ludwig', 1: 'van', 2: 'Beethoven' }"],
      "answer": 3,
      "answers": [],
      "explanation": "",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 6148,
      "type": "MultipleChoice",
      "given": "let fnc = (a,b,c) => {<br>&nbsp;&nbsp;console.log(arguments)<br>}<br><br>fnc('Ludwig', 'van', 'Beethoven')",
      "question": "What will be logged to the console?",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": ["Ludwig van Beethoven", "undefined", "error", "{ 0: 'Ludwig', 1: 'van', 2: 'Beethoven' }"],
      "answer": 2,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/arrow-functions#arrows-have-no-arguments",
      "size": 0
    },
    {
      "id": 6149,
      "type": "TrueOrFalse",
      "given": "function fnc(a,b,c) {<br>&nbsp;&nbsp;console.log(arguments[0])<br>}<br><br>fnc('Ludwig', 'van', 'Beethoven')",
      "question": "<em>Ludwig</em> will be logged to the console",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [],
      "explanation": "",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 6150,
      "type": "MultipleChoice",
      "given": "function fnc(a,b,c) {<br>&nbsp;&nbsp;console.log(Array.isArray(arguments))<br>}<br><br>fnc('Ludwig', 'van', 'Beethoven')",
      "question": "What will be logged to the console?",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": ["true", "false"],
      "answer": 1,
      "answers": [],
      "explanation": "",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 6151,
      "type": "FillBlank",
      "given": "Fill in the blank to log an array-like display of values passed to the function",
      "question": "",
      "displayAsCode": ["q1","q2","answer"],
      "q1": "function fnc(a,b,c) { console.log(",
      "q2": ") }",
      "choices": [],
      "answer": "",
      "answers": ["arguments"],
      "explanation": "",
      "moreInfo": "",
      "size": 9
    },
    {
      "id": 4121,
      "type": "ValidOrNot",
      "given": "",
      "question": "let book = {<br>&nbsp;&nbsp;title: 'A Prayer for Owen Meany',<br>&nbsp;&nbsp;author: 'John Irving',<br>&nbsp;&nbsp;rating: '✭✭✭✭✭',<br><br>&nbsp;&nbsp;get rating() {<br>&nbsp;&nbsp;&nbsp;&nbsp;return rating<br>&nbsp;&nbsp;}<br>}",
      "displayAsCode": ["question"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": false,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/property-accessors",
      "size": 0
    },
    {
      "id": 4235,
      "type": "ValidOrNot",
      "given": "",
      "question": "let book = {<br>&nbsp;&nbsp;title: 'A Prayer for Owen Meany',<br>&nbsp;&nbsp;author: 'John Irving',<br>&nbsp;&nbsp;rating: '✭✭✭✭*',<br>&nbsp;&nbsp;get ratingDescription() {<br>&nbsp;&nbsp;&nbsp;&nbsp;switch(this.rating.length) {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case 0,1,2:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return 'Nah'<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case 3:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return 'Meh'<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case 4:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return 'Yea'<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case 5:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return 'Wow'<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;}<br>}",
      "displayAsCode": ["question"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/property-accessors",
      "size": 0
    },
    {
      "id": 4236,
      "type": "TrueOrFalse",
      "given": "let book = {<br>&nbsp;&nbsp;title: 'A Prayer for Owen Meany',<br>&nbsp;&nbsp;author: 'John Irving',<br>&nbsp;&nbsp;rating: '✭✭✭✭*',<br>&nbsp;&nbsp;get rating() {return this.rating.length + ' stars'},<br>}<br><br>log(book.rating)",
      "question": "This logs <em>5 stars</em> to the console",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": false,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/property-accessors",
      "size": 0
    },
    {
      "id": 4237,
      "type": "TrueOrFalse",
      "given": "let book = {<br>&nbsp;&nbsp;_title: 'A Prayer for Owen Meany',<br>&nbsp;&nbsp;_author: 'John Irving',<br>&nbsp;&nbsp;_rating: '✭✭✭✭*',<br>&nbsp;&nbsp;get rating() {return this._rating.length + ' stars'},<br>}<br><br>log(book.rating)",
      "question": "This logs <em>5 stars</em> to the console",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/property-accessors",
      "size": 0
    },
    {
      "id": 4238,
      "type": "ValidOrNot",
      "given": "",
      "question": "let book = {<br>&nbsp;&nbsp;_title: 'A Prayer for Owen Meany',<br>&nbsp;&nbsp;_author: 'John Irving',<br>&nbsp;&nbsp;_rating: '✭✭✭✭*',<br>&nbsp;&nbsp;get brief() {<br>&nbsp;&nbsp;&nbsp;&nbsp;return this._title + ' written by ' + this._author + ' received ' + this._rating.length + ' stars'<br>&nbsp;&nbsp;}<br>}",
      "displayAsCode": ["question"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/property-accessors",
      "size": 0
    },
    {
      "id": 5313,
      "type": "MultipleChoice",
      "given": "let prices = [ 1.92, 3.14, 10.76, 8.23]<br><br>// with initial accumulator value<br>let total = prices.reduce((total, price) => total + price, 0)<br><br>// without initial accumulator value<br>let total2 = prices.reduce((total, price) => total + price)",
      "question": "What happens with <pre>total2</pre> where no initial accumulator value is given?",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": ["<pre>reduce</pre> uses the first item in the array as the initial accumulator value", "<pre>reduce</pre> uses <pre>0</pre> as the initial accumulator value", "a runtime exception occurs"],
      "answer": 0,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/array-methods#reduce-reduceright",
      "size": 0
    },
    {
      "id": 4239,
      "type": "ValidOrNot",
      "given": "",
      "question": "let employee = {<br>&nbsp;&nbsp;firstName: '',<br>&nbsp;&nbsp;lastName: '',<br>&nbsp;&nbsp;_age: null,<br>&nbsp;&nbsp;set age(age) {<br>&nbsp;&nbsp;&nbsp;&nbsp;if (age > 15 && age < 100) {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this._age = age<br>&nbsp;&nbsp;&nbsp;&nbsp;} else {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw new Error('Invalid age given')<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;}<br>}",
      "displayAsCode": ["question"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/property-accessors#getters-and-setters",
      "size": 0
    },
    {
      "id": 4240,
      "type": "FillBlank",
      "given": "Fill in the blank to create a setter for <pre>age</pre>",
      "question": "",
      "displayAsCode": ["q1","q2","answer"],
      "q1": "let employee = {<br>&nbsp;&nbsp;firstName: '',<br>&nbsp;&nbsp;lastName: '',<br>&nbsp;&nbsp;_age: null,<br>&nbsp;&nbsp;",
      "q2": "(age) {<br>&nbsp;&nbsp;&nbsp;&nbsp;if (age > 15 && age < 100) {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this._age = age<br>&nbsp;&nbsp;&nbsp;&nbsp;} else {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw new Error('Invalid age given')<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;}<br>}",
      "choices": [],
      "answer": "",
      "answers": ["set age"],
      "explanation": "",
      "moreInfo": "https://javascript.info/property-accessors#getters-and-setters",
      "size": 7
    },
    {
      "id": 4241,
      "type": "ValidOrNot",
      "given": "",
      "question": "let employee = {<br>&nbsp;&nbsp;firstName: '',<br>&nbsp;&nbsp;lastName: '',<br>&nbsp;&nbsp;get fullName() {<br>&nbsp;&nbsp;&nbsp;&nbsp;return this.firstName + ' ' + this.lastName<br>&nbsp;&nbsp;}<br>}<br><br>log(employee.fullName())",
      "displayAsCode": ["question"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": false,
      "answers": [],
      "explanation": "<pre>fullName</pre> is being called as a function. It's not a function, even though it looks like one.",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 4242,
      "type": "ValidOrNot",
      "given": "",
      "question": "let person = {<br>&nbsp;&nbsp;_name: null,<br>&nbsp;&nbsp;name (name) {<br>&nbsp;&nbsp;&nbsp;&nbsp;if (name) {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this._name = name<br>&nbsp;&nbsp;&nbsp;&nbsp;} else {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return this._name<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;}<br>}<br><br>person.name('Hal')<br>console.log(person.name())",
      "displayAsCode": ["question"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [],
      "explanation": "While this is somewhat clever, it's probably best to create a separate getter and setter for <pre>name</pre>",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 8321,
      "type": "MultipleChoice",
      "given": "",
      "question": "JavaScript has a form of <em>inheritance</em> known as...",
      "displayAsCode": [],
      "q1": "",
      "q2": "",
      "choices": ["class-based", "prototypal", "extendable", "predicate"],
      "answer": 1,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/prototype-inheritance",
      "size": 0
    },
    {
      "id": 8322,
      "type": "TrueOrFalse",
      "given": "",
      "question": "Prototypal inheritance uses <em>dependency injection</em> to inject the prototype's properties and functions into the inheriting object",
      "displayAsCode": [],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": false,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/prototype-inheritance",
      "size": 0
    },
    {
      "id": 4243,
      "type": "MultipleChoice",
      "given": "function Person(firstName, lastName) {<br>&nbsp;&nbsp;this.firstName = firstName,<br>&nbsp;&nbsp;this.lastName = lastName<br>}<br><br>let ana = new Person('Ana', 'Banana')<br>log(typeof ana)",
      "question": "What will be logged to the console?",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": ["Person", "object", "function", "__proto__"],
      "answer": 1,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/constructor-new#constructor-function",
      "size": 0
    },
    {
      "id": 4244,
      "type": "ValidOrNot",
      "given": "",
      "question": "function Person(firstName, lastName) {<br>&nbsp;&nbsp;this.firstName = firstName,<br>&nbsp;&nbsp;this.lastName = lastName<br>}<br><br>let bob = Person()",
      "displayAsCode": ["question"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": false,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/constructor-new#constructor-function",
      "size": 0
    },
    {
      "id": 437,
      "type": "MultipleChoice",
      "given": "let animal = {<br>&nbsp;&nbsp;eats: true,<br>&nbsp;&nbsp;breathes: true,<br>&nbsp;&nbsp;sleeps: true,<br>}<br><br>function Person(firstName, lastName) {<br>&nbsp;&nbsp;this.firstName = firstName,<br>&nbsp;&nbsp;this.lastName = lastName<br>}<br><br>let ana = new Person('Ana', 'Banana')<br><br>ana.__proto__ = animal<br><br>log(ana.sleeps)",
      "question": "What will be logged to the console?",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": ["true", "false", "undefined", "error"],
      "answer": 0,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/prototype-inheritance",
      "size": 0
    },
    {
      "id": 438,
      "type": "FillBlank",
      "given": "Fill in the blank to make <pre>ana</pre>'s prototype <pre>animal</pre>",
      "question": "",
      "displayAsCode": ["q1","q2","answer"],
      "q1": "let animal = {<br>&nbsp;&nbsp;eats: true,<br>&nbsp;&nbsp;breathes: true,<br>&nbsp;&nbsp;sleeps: true,<br>}<br><br>let ana = {<br>&nbsp;&nbsp;name: 'Ana'<br>}<br><br>ana.",
      "q2": " = animal",
      "choices": [],
      "answer": "",
      "answers": ["__proto__"],
      "explanation": "",
      "moreInfo": "https://javascript.info/prototype-inheritance",
      "size": 9
    },
    {
      "id": 439,
      "type": "ValidOrNot",
      "given": "",
      "question": "let animal = {<br>&nbsp;&nbsp;eats: true,<br>&nbsp;&nbsp;breathes: true,<br>&nbsp;&nbsp;sleeps: true,<br>}<br><br>let rex = new animal()",
      "displayAsCode": ["question"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": false,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/constructor-new#constructor-function",
      "size": 0
    },
    {
      "id": 4310,
      "type": "ValidOrNot",
      "given": "",
      "question": "let machine = {<br>&nbsp;&nbsp;playsMusic: false<br>}<br><br>let instrument = {<br>&nbsp;&nbsp;playsMusic: true,<br>&nbsp;&nbsp;automatic: false<br>}<br><br>let piano = {<br>&nbsp;&nbsp;keys: 88<br>}<br><br>let playerPiano = {<br>&nbsp;&nbsp;automatic: true<br>}<br><br>instrument.__proto__ = machine<br>piano.__proto__ = instrument<br>playerPiano.__proto__ = piano",
      "displayAsCode": ["question"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/prototype-inheritance",
      "size": 0
    },
    {
      "id": 4311,
      "type": "MultipleChoice",
      "given": "let machine = {<br>&nbsp;&nbsp;playsMusic: false<br>}<br><br>let instrument = {<br>&nbsp;&nbsp;playsMusic: true,<br>&nbsp;&nbsp;automatic: false<br>}<br><br>let piano = {<br>&nbsp;&nbsp;keys: 88<br>}<br><br>let playerPiano = {<br>&nbsp;&nbsp;automatic: true<br>}<br><br>instrument.__proto__ = machine<br>piano.__proto__ = instrument<br>playerPiano.__proto__ = piano<br><br>log(playerPiano.playsMusic)",
      "question": "What is logged to the console?",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": ["piano", "instrument", "machine", "true"],
      "answer": 3,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/prototype-inheritance",
      "size": 0
    },
    {
      "id": 4312,
      "type": "TrueOrFalse",
      "given": "let machine = {<br>&nbsp;&nbsp;playsMusic: false<br>}<br><br>let instrument = {<br>&nbsp;&nbsp;playsMusic: true,<br>&nbsp;&nbsp;automatic: false<br>}<br><br>let piano = {<br>&nbsp;&nbsp;keys: 88<br>}<br><br>let playerPiano = {<br>&nbsp;&nbsp;automatic: true<br>}<br><br>instrument.__proto__ = machine<br>piano.__proto__ = instrument<br>playerPiano.__proto__ = piano<br><br>log(piano.automatic)",
      "question": "This code logs throws a runtime exception",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": false,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/prototype-inheritance",
      "size": 0
    },
    {
      "id": 4313,
      "type": "ValidOrNot",
      "given": "",
      "question": "let machine = {<br>&nbsp;&nbsp;playsMusic: false<br>}<br><br>let instrument = {<br>&nbsp;&nbsp;playsMusic: true,<br>&nbsp;&nbsp;automatic: false<br>}<br><br>let piano = {<br>&nbsp;&nbsp;keys: 88<br>}<br><br>let playerPiano = {<br>&nbsp;&nbsp;automatic: true<br>}<br><br>Object.setPrototypeOf(instrument, machine)<br>Object.setPrototypeOf(piano, instrument)<br>Object.setPrototypeOf(playerPiano, piano)",
      "displayAsCode": ["question"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/prototype-inheritance",
      "size": 0
    },
    {
      "id": 4314,
      "type": "TrueOrFalse",
      "given": "let car = {<br>&nbsp;&nbsp;wheels: 4,<br>&nbsp;&nbsp;motor: true<br>}<br><br>let racecar = {<br>&nbsp;&nbsp;supercharger: true<br>}<br><br>Object.setPrototypeOf(racecar, car)<br><br>log(Object.getPrototypeOf(racecar))",
      "question": "<em>car</em> will be logged to the console",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": false,
      "answers": [],
      "explanation": "",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 4315,
      "type": "MultipleChoice",
      "given": "let car = {<br>&nbsp;&nbsp;wheels: 4,<br>&nbsp;&nbsp;motor: true<br>}<br><br>let racecar = {<br>&nbsp;&nbsp;supercharger: true<br>}<br><br>Object.setPrototypeOf(racecar, car)<br><br>log(Object.getPrototypeOf(racecar))",
      "question": "What will be logged to the console?",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": ["car", "object", "racecar", "{ wheels: 4, motor: true }"],
      "answer": 3,
      "answers": [],
      "explanation": "",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 4316,
      "type": "TrueOrFalse",
      "given": "let arr = new Array()<br>let thing = {}<br>Object.setPrototypeOf(thing, arr)<br><br>thing.push('Hello')",
      "question": "Using an array as a prototype of an object turns the object into an array",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": false,
      "answers": [],
      "explanation": "Although it does <em>something</em>, this is a <em>very bad idea</em>",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 4317,
      "type": "MultipleChoice",
      "given": "let mother = {<br>&nbsp;&nbsp; firstName: 'Grace',<br>&nbsp;&nbsp; lastName: 'Lane'<br> }<br><br>&nbsp;&nbsp;// no firstName property<br> let daughter = {}<br><br> Object.setPrototypeOf(daughter, mother)<br><br> daughter.firstName = 'Gen'<br><br>log(mother.firstName)",
      "question": "What will be logged to the console?",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": ["Grace", "Gen", "undefined", "runtime exception"],
      "answer": 0,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/prototype-inheritance#writing-doesn-t-use-prototype",
      "size": 0
    },
    {
      "id": 4318,
      "type": "MultipleChoice",
      "given": "let mother = {<br>&nbsp;&nbsp; firstName: 'Grace',<br>&nbsp;&nbsp; lastName: 'Lane'<br> }<br><br>&nbsp;&nbsp;// no firstName property<br> let daughter = {<br>&nbsp;&nbsp; firstName: 'Gen',<br>&nbsp;&nbsp; mother: mother<br> }<br><br> Object.setPrototypeOf(daughter, mother)<br><br> daughter.firstName = 'Gen'<br><br> for (let prop in daughter) console.log(prop)",
      "question": "How many items will be logged?",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": ["1","2","3","4"],
      "answer": 2,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/prototype-inheritance#for-in-loop",
      "size": 0
    },
    {
      "id": 4319,
      "type": "TrueOrFalse",
      "given": "Object.keys(daughter)",
      "question": "Given that <pre>daughter</pre> is a valid object, <pre>Object.keys</pre> returns a hash of key/value pairs in <pre>daughter</pre>",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": false,
      "answers": [],
      "explanation": "",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 4320,
      "type": "MultipleChoice",
      "given": "let mother = {<br>&nbsp;&nbsp; firstName: 'Grace',<br>&nbsp;&nbsp; lastName: 'Lane'<br> }<br><br>&nbsp;&nbsp;// no firstName property<br> let daughter = {<br>&nbsp;&nbsp; firstName: 'Gen',<br>&nbsp;&nbsp; mother: mother<br> }<br><br> Object.setPrototypeOf(daughter, mother)<br><br> daughter.firstName = 'Gen'<br><br> log( Object.keys(daughter) )",
      "question": "How many items will there be in the array returned by <pre>Object.keys</pre>",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": ["1","2","3","4"],
      "answer": 1,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/prototype-inheritance#for-in-loop",
      "size": 0
    },
    {
      "id": 4321,
      "type": "MultipleChoice",
      "given": "let mother = {<br>&nbsp;&nbsp; firstName: 'Grace',<br>&nbsp;&nbsp; lastName: 'Lane'<br> }<br><br>&nbsp;&nbsp;// no firstName property<br> let daughter = {<br>&nbsp;&nbsp; firstName: 'Gen',<br>&nbsp;&nbsp; mother: mother<br> }<br><br> Object.setPrototypeOf(daughter, mother)<br><br> for (let key in daughter) {<br>&nbsp;&nbsp; if (daughter.hasOwnProperty(key)) {<br>&nbsp;&nbsp;&nbsp;&nbsp; console.log(key)<br>&nbsp;&nbsp; }<br> }",
      "question": "How many items will be logged?",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": ["1","2","3","4"],
      "answer": 1,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/prototype-inheritance#for-in-loop",
      "size": 0
    },
    {
      "id": 4322,
      "type": "ValidOrNot",
      "given": "",
      "question": "let mother = {<br>&nbsp;&nbsp; firstName: 'Grace',<br>&nbsp;&nbsp; lastName: 'Lane'<br> }<br><br> let daughter = {<br>&nbsp;&nbsp; firstName: 'Gen',<br>&nbsp;&nbsp; mother: mother,<br> }<br><br> mother.daughter = daughter<br><br> log(mother.daughter.mother.daughter.firstName)",
      "displayAsCode": ["question"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [],
      "explanation": "",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 4323,
      "type": "ValidOrNot",
      "given": "",
      "question": "let machine = {<br>&nbsp;&nbsp;manufactured: true<br>}<br><br>function Car(make, model) {<br>&nbsp;&nbsp;this.make = make<br>&nbsp;&nbsp;this.model = model<br>}<br><br>Car.prototype = machine<br><br>let tesla = new Car('Tesla', 'Model S')<br><br>log(tesla.manufactured)",
      "displayAsCode": ["question"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/function-prototype",
      "size": 0
    },
    {
      "id": 4324,
      "type": "FillBlank",
      "given": "Fill in the blank to make <pre>machine</pre> the prototype of <pre>Car</pre>",
      "question": "",
      "displayAsCode": ["q1","q2","answer"],
      "q1": "let machine = {<br>&nbsp;&nbsp;manufactured: true<br>}<br><br>function Car(make, model) {<br>&nbsp;&nbsp;this.make = make<br>&nbsp;&nbsp;this.model = model<br>}<br><br>Car.",
      "q2": "<br>let tesla = new Car('Tesla', 'Model S')<br><br>log(tesla.manufactured)",
      "choices": [],
      "answer": "",
      "answers": ["prototype = machine"],
      "explanation": "",
      "moreInfo": "https://javascript.info/function-prototype",
      "size": 20
    },
    {
      "id": 4325,
      "type": "TrueOrFalse",
      "given": "class Flower{<br>&nbsp;&nbsp;constructor(type, color) {<br>&nbsp;&nbsp;&nbsp;&nbsp;this.type = type<br>&nbsp;&nbsp;&nbsp;&nbsp;this.color = color<br>&nbsp;&nbsp;}<br>}<br><br>let iris = new Flower('Iris', 'purple')<br>let iris2 = new Flower('Iris', 'purple')<br><br>log(iris == iris2)",
      "question": "This code will log <em>true</em> to the console",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": false,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/class",
      "size": 0
    },
    {
      "id": 4326,
      "type": "TrueOrFalse",
      "given": "class Flower{<br>&nbsp;&nbsp;Flower(type, color) {<br>&nbsp;&nbsp;&nbsp;&nbsp;this.type = type<br>&nbsp;&nbsp;&nbsp;&nbsp;this.color = color<br>&nbsp;&nbsp;}<br>}<br><br>let iris = new Flower('Iris', 'purple')<br>let iris2 = new Flower('Iris', 'purple')<br><br>log(iris.type == 'Iris')",
      "question": "This logs <em>true</em> to the console",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": false,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/class",
      "size": 0
    },
    {
      "id": 4327,
      "type": "MultipleChoice",
      "given": "",
      "question": "The process of creating an object from a class is known as...",
      "displayAsCode": [],
      "q1": "",
      "q2": "",
      "choices": ["Objectification", "Currying", "Instantiation"],
      "answer": 2,
      "answers": [],
      "explanation": "",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 4328,
      "type": "MultipleChoice",
      "given": "class Flower{<br>&nbsp;&nbsp;constructor(type, color) {<br>&nbsp;&nbsp;&nbsp;&nbsp;this.type = type<br>&nbsp;&nbsp;&nbsp;&nbsp;this.color = color<br>&nbsp;&nbsp;}<br>}<br><br>log(typeof Flower)",
      "question": "What is logged to the console?",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": ["class", "function", "Flower", "object"],
      "answer": 1,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/class#what-is-a-class",
      "size": 0
    },
    {
      "id": 4329,
      "type": "FillBlank",
      "given": "Fill in the blank to create a constructor for <pre>Flower</pre>",
      "question": "",
      "displayAsCode": ["q1","q2","answer"],
      "q1": "class Flower{<br>&nbsp;&nbsp;",
      "q2": " {<br>&nbsp;&nbsp;&nbsp;&nbsp;this.type = type<br>&nbsp;&nbsp;&nbsp;&nbsp;this.color = color<br>&nbsp;&nbsp;}<br>}",
      "choices": [],
      "answer": "",
      "answers": ["constructor(type, color)", "constructor(color, type)"],
      "explanation": "",
      "moreInfo": "",
      "size": 26
    },
    {
      "id": 4330,
      "type": "TrueOrFalse",
      "given": "",
      "question": "Getters and setters are not allowed inside of class definitions",
      "displayAsCode": [],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": false,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/class#getters-setters",
      "size": 0
    },
    {
      "id": 4331,
      "type": "FillBlank",
      "given": "class Flower{<br>&nbsp;&nbsp;family = 'plant'<br><br>&nbsp;&nbsp;brief() {<br>&nbsp;&nbsp;&nbsp;&nbsp;console.log('I am a member of the ' + this.family + ' family')<br>&nbsp;&nbsp;}<br>}<br><br>let rose = new Flower()<br>rose.brief()",
      "question": "Fill in the blank",
      "displayAsCode": ["given"],
      "q1": "When run, this code logs ",
      "q2": "",
      "choices": [],
      "answer": "",
      "answers": ["I am a member of the plant family"],
      "explanation": "",
      "moreInfo": "",
      "size": 33
    },
    {
      "id": 4332,
      "type": "FillBlank",
      "given": "class Flower{<br>&nbsp;&nbsp;constructor() {<br>&nbsp;&nbsp;&nbsp;&nbsp;this.family = 'plant'<br>&nbsp;&nbsp;}<br>&nbsp;&nbsp;<br><br>&nbsp;&nbsp;brief() {<br>&nbsp;&nbsp;&nbsp;&nbsp;console.log('I am a member of the ' + this.family + ' family')<br>&nbsp;&nbsp;}<br>}<br><br>let rose = new Flower()<br><br>setTimeout(rose.brief, 1500)",
      "question": "Fill in the blank",
      "displayAsCode": ["given"],
      "q1": "When run, this code logs ",
      "q2": "",
      "choices": [],
      "answer": "",
      "answers": ["I am a member of the undefined family"],
      "explanation": "It's the old problem with <pre>this</pre>. An easy way to fix it: <pre>setTimeout(() => rose.brief(), 1500)</pre>",
      "moreInfo": "",
      "size": 36
    },
    {
      "id": 4333,
      "type": "TrueOrFalse",
      "given": "class Flower{<br>&nbsp;&nbsp;constructor() {<br>&nbsp;&nbsp;&nbsp;&nbsp;this.family = 'plant'<br>&nbsp;&nbsp;}<br>&nbsp;&nbsp;<br><br>&nbsp;&nbsp;brief() {<br>&nbsp;&nbsp;&nbsp;&nbsp;console.log('I am a member of the ' + this.family + ' family')<br>&nbsp;&nbsp;}<br>}<br><br>let rose = new Flower()<br><br>setTimeout(() => rose.brief(), 1500)",
      "question": "This code logs <em>I am a member of the plant family</em> after 1.5 seconds",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [],
      "explanation": "",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 4334,
      "type": "FillBlank",
      "given": "Fill in the blank to make <pre>Vegetable</pre> inherit from <pre>Plant</pre>",
      "question": "",
      "displayAsCode": ["q1","q2","answer"],
      "q1": "class Plant{<br>&nbsp;&nbsp;constructor() {<br>&nbsp;&nbsp;&nbsp;&nbsp;this.organic = true<br>&nbsp;&nbsp;&nbsp;&nbsp;this.alive = true<br>&nbsp;&nbsp;}<br>}<br><br>class Vegetable ",
      "q2": " Plant {<br>&nbsp;&nbsp;constructor(name) {<br>&nbsp;&nbsp;&nbsp;&nbsp;super()<br>&nbsp;&nbsp;&nbsp;&nbsp;this.name = name<br>&nbsp;&nbsp;}<br>}",
      "choices": [],
      "answer": "",
      "answers": ["extends"],
      "explanation": "",
      "moreInfo": "https://javascript.info/class-inheritance",
      "size": 7
    },
    {
      "id": 4335,
      "type": "FillBlank",
      "given": "Something is missing. Fill in the blank to provide it.",
      "question": "",
      "displayAsCode": ["q1","q2","answer"],
      "q1": "class Plant{<br>&nbsp;&nbsp;constructor() {<br>&nbsp;&nbsp;&nbsp;&nbsp;this.organic = true<br>&nbsp;&nbsp;&nbsp;&nbsp;this.alive = true<br>&nbsp;&nbsp;}<br>}<br><br>class Vegetable extends Plant {<br>&nbsp;&nbsp;constructor(name) {<br>&nbsp;&nbsp;&nbsp;&nbsp;",
      "q2": "<br>&nbsp;&nbsp;&nbsp;&nbsp;this.name = name<br>&nbsp;&nbsp;}<br>}",
      "choices": [],
      "answer": "",
      "answers": ["super()", "super(name)"],
      "explanation": "",
      "moreInfo": "https://javascript.info/class-inheritance",
      "size": 8
    },
    {
      "id": 4336,
      "type": "ValidOrNot",
      "given": "",
      "question": "class TextInput {<br>&nbsp;&nbsp;constructor(label, id) {<br>&nbsp;&nbsp;&nbsp;&nbsp;this.label = label<br>&nbsp;&nbsp;&nbsp;&nbsp;this.id = id<br>&nbsp;&nbsp;}<br>&nbsp;&nbsp;render() {<br>&nbsp;&nbsp;&nbsp;&nbsp;return `&lt;label for=&quot;${this.id}&quot;&gt;${this.label}&lt;/label&gt;&lt;input type=&quot;text&quot; id=&quot;${this.id}&quot; /&gt;`<br>&nbsp;&nbsp;}<br>}<br><br>let firstNameInput = new TextInput('First name', 'first_name')",
      "displayAsCode": ["question"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [],
      "explanation": "",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 4337,
      "type": "ValidOrNot",
      "given": "",
      "question": "class TextInput {<br>&nbsp;&nbsp;constructor(label, id) {<br>&nbsp;&nbsp;&nbsp;&nbsp;this.label = label<br>&nbsp;&nbsp;&nbsp;&nbsp;this.id = id<br>&nbsp;&nbsp;}<br>&nbsp;&nbsp;render() {<br>&nbsp;&nbsp;&nbsp;&nbsp;return `&lt;label for=&quot;${this.id}&quot;>${this.label}&lt;/label&gt;&lt;input type=&quot;text&quot; id=&quot;${this.id}&quot; />`<br>&nbsp;&nbsp;}<br>}<br><br>class PasswordInput extends TextInput{<br>&nbsp;&nbsp;constructor(label, id) {<br>&nbsp;&nbsp;&nbsp;&nbsp;super(label, id)<br>&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;render() {<br>&nbsp;&nbsp;&nbsp;&nbsp;return `&lt;label for=&quot;${this.id}&quot;&gt;${this.label}&lt;/label&gt;&lt;input type=&quot;password&quot; id=&quot;${this.id}&quot; /&gt;`<br>&nbsp;&nbsp;}<br>}<br><br>let passwordInput = new PasswordInput('First name', 'first_name')",
      "displayAsCode": ["question"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [],
      "explanation": "",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 4338,
      "type": "TrueOrFalse",
      "given": "class TextInput {<br>&nbsp;&nbsp;constructor(label, id) {<br>&nbsp;&nbsp;&nbsp;&nbsp;this.label = label<br>&nbsp;&nbsp;&nbsp;&nbsp;this.id = id<br>&nbsp;&nbsp;}<br>&nbsp;&nbsp;render() {<br>&nbsp;&nbsp;&nbsp;&nbsp;return `&lt;label for=&quot;${this.id}&quot;>${this.label}&lt;/label&gt;&lt;input type=&quot;text&quot; id=&quot;${this.id}&quot; />`<br>&nbsp;&nbsp;}<br>}<br><br>class PasswordInput extends TextInput{<br>&nbsp;&nbsp;constructor(label, id) {<br>&nbsp;&nbsp;&nbsp;&nbsp;super(label, id)<br>&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;render() {<br>&nbsp;&nbsp;&nbsp;&nbsp;return `&lt;label for=&quot;${this.id}&quot;&gt;${this.label}&lt;/label&gt;&lt;input type=&quot;password&quot; id=&quot;${this.id}&quot; /&gt;`<br>&nbsp;&nbsp;}<br>}<br><br>let passwordInput = new PasswordInput('First name', 'first_name')",
      "question": "The <pre>render</pre> function in <pre>TextInput</pre> takes precedence over the <pre>render</pre> function in <pre>PasswordInput</pre>",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": false,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/class-inheritance#overriding-a-method",
      "size": 0
    },
    {
      "id": 4339,
      "type": "FillBlank",
      "given": "Fill in the blank so that <pre>PasswordInput</pre> sends the correct <pre>type</pre> to its parent (super)",
      "question": "",
      "displayAsCode": ["q1","q2","answer"],
      "q1": "class TextInput {<br>&nbsp;&nbsp;constructor(label, id, type=&quot;text&quot;) {<br>&nbsp;&nbsp;&nbsp;&nbsp;this.label = label<br>&nbsp;&nbsp;&nbsp;&nbsp;this.id = id<br>&nbsp;&nbsp;&nbsp;&nbsp;this.type = type<br>&nbsp;&nbsp;}<br>&nbsp;&nbsp;render() {<br>&nbsp;&nbsp;&nbsp;&nbsp;return `&lt;label for=&quot;${this.id}&quot;>${this.label}&lt;/label>&lt;input type=&quot;${this.type}&quot; id=&quot;${this.id}&quot; />`<br>&nbsp;&nbsp;}<br>}<br><br>class PasswordInput extends TextInput{<br>&nbsp;&nbsp;constructor(label, id) {<br>&nbsp;&nbsp;&nbsp;&nbsp;",
      "q2": "<br>&nbsp;&nbsp;}<br>}<br><br>let passwordInput = new PasswordInput('First name', 'first_name')",
      "choices": [],
      "answer": "",
      "answers": ["super(label, id, 'password')", "super(label, id, \"password\""],
      "explanation": "Do we actually need a subclass of <pre>PasswordInput</pre>? Not for this example, but the concept of calling <pre>super</pre> with any needed arguments holds true.",
      "moreInfo": "",
      "size": 34
    },
    {
      "id": 4340,
      "type": "TrueOrFalse",
      "given": "class Machine {<br>&nbsp;&nbsp;constructor(type, manufacturer) {<br>&nbsp;&nbsp;&nbsp;&nbsp;this.type = type<br>&nbsp;&nbsp;&nbsp;&nbsp;this.manufacturer = manufacturer<br>&nbsp;&nbsp;}<br>&nbsp;&nbsp;render() {<br>&nbsp;&nbsp;&nbsp;&nbsp;return 'I am a ' + this.type + ' made by ' + this.manufacturer<br>&nbsp;&nbsp;}<br>}<br><br>class PrintingPress extends Machine{<br>&nbsp;&nbsp;constructor(manufacturer, yearMade) {<br>&nbsp;&nbsp;&nbsp;&nbsp;super('printing press', manufacturer)<br>&nbsp;&nbsp;&nbsp;&nbsp;this.yearMade = yearMade<br>&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;render() {<br>&nbsp;&nbsp;&nbsp;&nbsp;return super.render() + ' I was made in ' + this.yearMade<br>&nbsp;&nbsp;}<br>}<br><br>let printingPress = new PrintingPress('Heidelberg', 2021)<br><br>log(printingPress.render())",
      "question": "This code will break as <pre>super.render()</pre> is not valid",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": false,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/class-inheritance#overriding-a-method",
      "size": 0
    },
    {
      "id": 4341,
      "type": "TrueOrFalse",
      "given": "class Machine {<br>&nbsp;&nbsp;constructor(type, manufacturer) {<br>&nbsp;&nbsp;&nbsp;&nbsp;this.type = type<br>&nbsp;&nbsp;&nbsp;&nbsp;this.manufacturer = manufacturer<br>&nbsp;&nbsp;}<br>&nbsp;&nbsp;render() {<br>&nbsp;&nbsp;&nbsp;&nbsp;return 'I am a ' + this.type + ' made by ' + this.manufacturer<br>&nbsp;&nbsp;}<br>}<br><br>class PrintingPress extends Machine{<br>&nbsp;&nbsp;// no constructor<br>&nbsp;&nbsp;// no methods<br>}<br><br>let printingPress = new PrintingPress('Printing Press', 'Heidelberg')<br><br>log(printingPress.render())",
      "question": "This logs <em>I am a Printing Press made by Heidelberg</em> to the console",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/class-inheritance#overriding-constructor",
      "size": 0
    },
    {
      "id": 4342,
      "type": "TrueOrFalse",
      "given": "class Machine {<br>&nbsp;&nbsp;constructor(type, manufacturer) {<br>&nbsp;&nbsp;&nbsp;&nbsp;this.type = type<br>&nbsp;&nbsp;&nbsp;&nbsp;this.manufacturer = manufacturer<br>&nbsp;&nbsp;}<br>&nbsp;&nbsp;render() {<br>&nbsp;&nbsp;&nbsp;&nbsp;return 'I am a ' + this.type + ' made by ' + this.manufacturer<br>&nbsp;&nbsp;}<br>}<br><br>class PrintingPress extends Machine{<br>&nbsp;&nbsp;constructor(type, manufacturer, yearMade) {<br>&nbsp;&nbsp;&nbsp;&nbsp;this.yearMade = yearMade<br>&nbsp;&nbsp;&nbsp;&nbsp;super(type, manufacturer)<br>&nbsp;&nbsp;}<br>}<br><br>let printingPress = new PrintingPress('Printing Press', 'Heidelberg')<br><br>log(printingPress.render())",
      "question": "This logs <em>I am a Printing Press made by Heidelberg</em> to the console",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": false,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/class-inheritance#overriding-constructor",
      "size": 0
    },
    {
      "id": 4343,
      "type": "ValidOrNot",
      "given": "",
      "question": "class License {<br>&nbsp;&nbsp;static maxLicenses = 10<br>}<br><br>log(License.maxLicenses)",
      "displayAsCode": ["question"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/static-properties-methods",
      "size": 0
    },
    {
      "id": 4344,
      "type": "FillBlank",
      "given": "Fill in the blank to create a variable, <pre>maxLicenses</pre>, assigned to the class itself",
      "question": "",
      "displayAsCode": ["q1","q2","answer"],
      "q1": "class License {<br>&nbsp;&nbsp;",
      "q2": "<br>}<br><br>log(License.maxLicenses)",
      "choices": [],
      "answer": "",
      "answers": ["static maxLicenses = 10"],
      "explanation": "",
      "moreInfo": "https://javascript.info/static-properties-methods",
      "size": 22
    },
    {
      "id" :4345,
      "type": "MultipleChoice",
      "given": "class License {<br>&nbsp;&nbsp;static maxLicenses = 10<br><br>&nbsp;&nbsp;static useLicense() {<br>&nbsp;&nbsp;&nbsp;&nbsp;License.maxLicenses -= 1<br>&nbsp;&nbsp;}<br>}<br><br>log(License.maxLicenses)<br>License.useLicense()<br>log(License.maxLicenses)",
      "question": "What is the value of <pre>maxLicense</pre> after this code runs?",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": ["10", "9", "0", "undefined"],
      "answer": 1,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/static-properties-methods",
      "size": 0
    },
    {
      "id": 4346,
      "type": "MultipleChoice",
      "given": "class License {<br>&nbsp;&nbsp;static maxLicenses = 10<br><br>&nbsp;&nbsp;static useLicense() {<br>&nbsp;&nbsp;&nbsp;&nbsp;License.maxLicenses -= 1<br>&nbsp;&nbsp;}<br>}<br><br>class SoftwareLicense extends License {<br>&nbsp;&nbsp;constructor(title) {<br>&nbsp;&nbsp;&nbsp;&nbsp;super()<br>&nbsp;&nbsp;&nbsp;&nbsp;this.title = title<br>&nbsp;&nbsp;}<br>}<br><br>// call static method on SoftwareLicense<br>log(SoftwareLicense.maxLicenses)",
      "question": "Can you access a static property on a subclass where the static property is set on the parent?",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": ["Yes","No"],
      "answer": 0,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/static-properties-methods#statics-and-inheritance",
      "size": 0
    },
    {
      "id": 4347,
      "type": "MultipleChoice",
      "given": "",
      "question": "Are there language-implemented private properties/methods in JavaScript?",
      "displayAsCode": [],
      "q1": "",
      "q2": "",
      "choices": ["Yes","No"],
      "answer": 1,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/private-protected-properties-methods",
      "size": 0
    },
    {
      "id": 7128,
      "type": "MultipleChoice",
      "given": "",
      "question": "Can you extend built-in classes like <pre>Map</pre> and <pre>Array</pre>?",
      "displayAsCode": [],
      "q1": "",
      "q2": "",
      "choices": ["Yes", "No"],
      "answer": 0,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/extend-natives",
      "size": 0
    },
    {
      "id": 7129,
      "type": "MultipleChoice",
      "given": "class ArrayWithNumericSort extends Array {<br>&nbsp;&nbsp;numericSort() {<br>&nbsp;&nbsp;&nbsp;&nbsp;let numericSort = (a,b) => {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (a > b) return 1<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (a < b) return -1<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return 0<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;return this.sort(numericSort)<br>&nbsp;&nbsp;}<br>}<br><br>let grades = new ArrayWithNumericSort()<br>grades.push(84)<br>grades.push(62)<br>grades.push(97)<br>grades.push(61)<br>grades.push(88)<br>grades.push(75)<br><br>log(grades.numericSort())",
      "question": "What will this code produce?",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": ["a numerically-sorted array", "the original array", "a runtime exception"],
      "answer": 0,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/extend-natives",
      "size": 0
    },
    {
      "id": 7130,
      "type": "ValidOrNot",
      "given": "",
      "question": "String.prototype.log = function() {<br>&nbsp;&nbsp;console.log(this.toString())<br>}<br><br>&quot;Hello&quot;.log()",
      "displayAsCode": ["question"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [],
      "explanation": "This technique is sometimes known an <em>monkey patching</em>. It's a controversial technique &mdash; particularly when others may be using code that you've monkey-patched without their being aware of the patch.",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 7131,
      "type": "FillBlank",
      "given": "Fill in the blank to <em>monkey-patch</em> the <pre>String</pre> class to have a <pre>log</pre> function",
      "question": "",
      "displayAsCode": ["q1","q2","answer"],
      "q1": "String.",
      "q2": " = function() {<br>&nbsp;&nbsp;console.log(this.toString())<br>}",
      "choices": [],
      "answer": "",
      "answers": ["prototype.log"],
      "explanation": "",
      "moreInfo": "",
      "size": 13
    },
    {
      "id": 7132,
      "type": "MultipleChoice",
      "given": "String.prototype.log = function() {<br>&nbsp;&nbsp;console.log(this.toString())<br>}",
      "question": "This technique of adding a function to a built-in JavaScript class is often known as...",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": ["currying", "prototyping", "reassignment", "monkey-patching"],
      "answer": 3,
      "answers": [],
      "explanation": "",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 6152,
      "type": "MultipleChoice",
      "given": "const getRectArea = function(width, height) {<br>&nbsp;&nbsp;return width * height<br>}",
      "question": "This construction is known as...",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": ["function expression", "function declaration", "function identification", "function currying"],
      "answer": 0,
      "answers": [],
      "explanation": "",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 6153,
      "type": "MultipleChoice",
      "given": "function calcRectArea(width, height) {<br>&nbsp;&nbsp;return width * height<br>}",
      "question": "This construction is known as...",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": ["function expression", "function declaration", "function identification", "function currying"],
      "answer": 1,
      "answers": [],
      "explanation": "",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 6240,
      "type": "FillBlank",
      "given": "Fill in the blank to check whether all specified parameters have been provided",
      "question": "",
      "displayAsCode": ["q1","q2","answer"],
      "q1": "function calculateRectVolume(height, width, depth) {<br>&nbsp;&nbsp;if (",
      "q2": ") {<br>&nbsp;&nbsp;&nbsp;&nbsp;throw new Error('Must have height, width, and depth')<br>&nbsp;&nbsp;}<br>&nbsp;&nbsp;return height * width * depth<br>}",
      "choices": [],
      "answer": "",
      "answers": ["arguments.length !== 3", "arguments.length != 3"],
      "explanation": "",
      "moreInfo": "",
      "size":22 
    },
    {
      "id": 8238,
      "type": "ValidOrNot",
      "given": "",
      "question": "let points = 25<br>let statuses = ['bronze', 'silver', 'gold']<br><br>let status = points < 10 ? statuses[0] : points < 20 ? statuses[1] : statuses[2]",
      "displayAsCode": ["question"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [],
      "explanation": "Yes &mdash; but wouldn't a <pre>switch</pre> be more readily understandable?",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 8239,
      "type": "MultipleChoice",
      "given": "let points = 25<br>let statuses = ['bronze', 'silver', 'gold']<br><br>let status = points < 10 ? statuses[0] : points < 20 ? statuses[1] : statuses[2]",
      "question": "What is the value of <pre>status</pre>",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": ["undefined", "bronze", "silver", "gold"],
      "answer": 3,
      "answers": [],
      "explanation": "There's a good argument to be made that a <pre>switch</pre> would be more readily understandable",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 8160,
      "type": "TrueOrFalse",
      "given": "let points = 25<br><br>let goldStatus = points > 10 ? true : false<br><br>log(goldStatus)",
      "question": "This code is an illustration of a <em>closure</em>",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": false,
      "answers": [],
      "explanation": "<em>Ternary operator</em> would be more accurate",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 8161,
      "type": "MultipleChoice",
      "given": "let points = 25<br><br>let goldStatus = points  10 ✮ true ❂ false<br><br>log(goldStatus)",
      "question": "To create a ternary operator, ✮ and ❂ should be replaced with",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": [": and ?", "? and :", "... and rest", "arguments[0] and arguments[1]"],
      "answer": 1,
      "answers": [],
      "explanation": "",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 7212,
      "type": "ValidOrNot",
      "given": "",
      "question": "let myName = 'Hal Helms'<br>localStorage.setItem(myName)",
      "displayAsCode": ["question"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": false,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/localstorage",
      "size": 0
    },
    {
      "id": 7213,
      "type": "ValidOrNot",
      "given": "",
      "question": "let myName = 'Hal Helms'<br>localStorage.setItem('myName', myName)<br><br>log(localStorage.getItem('myName')))",
      "displayAsCode": ["question"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/localstorage",
      "size": 0
    },
    {
      "id": 7214,
      "type": "FillBlank",
      "given": "Fill in the blank so that <pre>myName</pre> is saved to local storage with the name of <pre>myName</pre>",
      "question": "",
      "displayAsCode": ["q1","q2","answer"],
      "q1": "let myName = 'Hal Helms'<br>",
      "q2": "",
      "choices": [],
      "answer": "",
      "answers": ["localStorage.setItem('myName', myName)"],
      "explanation": "",
      "moreInfo": "https://javascript.info/localstorage",
      "size": 42
    },
    {
      "id": 7215,
      "type": "FillBlank",
      "given": "Fill in the blank to retrieve the local storage item, <pre>myName</pre>",
      "question": "",
      "displayAsCode": ["q1","q2","answer"],
      "q1": "let myName = 'Hal Helms'<br>localStorage.setItem('myName', myName)<br><br>log(",
      "q2": ")",
      "choices": [],
      "answer": "",
      "answers": ["localStorage.getItem('myName')"],
      "explanation": "",
      "moreInfo": "",
      "size": 30
    },
    {
      "id": 7216,
      "type": "FillBlank",
      "given": "Fill in the blank to clear out all items in local storage",
      "question": "",
      "displayAsCode": ["q1","q2","answer"],
      "q1": "let myName = 'Hal Helms'<br>localStorage.setItem('myName', myName)<br>",
      "q2": "",
      "choices": [],
      "answer": "",
      "answers": ["localStorage.clear()"],
      "explanation": "",
      "moreInfo": "https://javascript.info/localstorage",
      "size": 25
    },
    {
      "id": 7217,
      "type": "FillBlank",
      "given": "Fill in the blank to remove <pre>myName</pre> from local storage",
      "question": "",
      "displayAsCode": ["q1","q2","answer"],
      "q1": "let myName = 'Hal Helms'<br>localStorage.setItem('myName', myName)<br>",
      "q2": "",
      "choices": [],
      "answer": "",
      "answers": ["localStorage.removeItem('myName')"],
      "explanation": "",
      "moreInfo": "https://javascript.info/localstorage",
      "size": 34
    },
    {
      "id": 7218,
      "type": "ValidOrNot",
      "given": "",
      "question": "let myName = 'Hal Helms'<br>localStorage.myName = myName<br><br>log(localStorage.myName)",
      "displayAsCode": ["question"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/localstorage",
      "size": 0
    },
    {
      "id": 7219,
      "type": "ValidOrNot",
      "given": "",
      "question": "let myName = 'Hal Helms'<br>localStorage['myName'] = myName<br><br>log(localStorage['myName'])",
      "displayAsCode": ["question"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/localstorage",
      "size": 0
    },
    {
      "id": 7220,
      "type": "TrueOrFalse",
      "given": "let person = {<br>&nbsp;&nbsp;firstName: 'Hal',<br>&nbsp;&nbsp;lastName: 'Helms'<br>}<br><br>let json = JSON.stringify(person)<br>localStorage.setItem('me', json)<br><br>log(JSON.parse(localStorage.getItem('me')))",
      "question": "This logs the <pre>person</pre> object to the console",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [],
      "explanation": "",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 7221,
      "type": "TrueOrFalse",
      "given": "let person = {<br>&nbsp;&nbsp;firstName: 'Hal',<br>&nbsp;&nbsp;lastName: 'Helms'<br>}<br><br>let json = JSON.stringify(person)<br>sessionStorage.setItem('me', json)<br><br>log(JSON.parse(sessionStorage.getItem('me')))",
      "question": "<em>sessionStorage</em> is saved to the user's local disk and remains there for a default 24-hour period (unless otherwise specified)",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": false,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/localstorage",
      "size": 0
    },
    {
      "id": 733,
      "type": "MultipleChoice",
      "given": "",
      "question": "What is <pre>indexedDB</pre>?",
      "displayAsCode": [],
      "q1": "",
      "q2": "",
      "choices": ["an object-oriented database available by default on all modern operating systems", "a third-party add-in available from Microsoft for all browsers", "an overlay to <pre>localStorage</pre> that allows items to be stored in an ordered collection", "a database built into browsers useful for storing larger/more complex data than <pre>localStorage</pre>"],
      "answer": 3,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/indexeddb",
      "size": 0
    },
    {
      "id": 734,
      "type": "MultipleChoice",
      "given": "let fnc = () => {<br>&nbsp;&nbsp;console.log(this)<br>}",
      "question": "What does <pre>this</pre> point to?",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": ["<pre>fnc</pre>", "the DOM", "the window object", "undefined"],
      "answer": 2,
      "answers": [],
      "explanation": "",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 735,
      "type": "TrueOrFalse",
      "given": "function hallo() {<br>&nbsp;&nbsp;console.log('Hallo')<br>}<br><br>log(window.hallo == hallo)",
      "question": "This code logs <em>false</em> to the console",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": false,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/browser-environment",
      "size": 0
    },
    {
      "id": 736,
      "type": "TrueOrFalse",
      "given": "",
      "question": "The DOM (Document Object Model) and BOM (Browser Object Model) are two names describing the same construct",
      "displayAsCode": [],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": false,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/browser-environment#dom-document-object-model",
      "size": 0
    },
    {
      "id": 911,
      "type": "MultipleChoice",
      "given": "document.body.style.backgroundColor = 'navy'<br>document.body.style.color = 'white'",
      "question": "What will happen when this code runs?",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": ["web page background becomes navy color, the text is white", "nothing &mdash; you need CSS for this", "runtime exception thrown"],
      "answer": 0,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/dom-nodes",
      "size": 0
    },
    {
      "id": 912,
      "type": "TrueOrFalse",
      "given": "",
      "question": "The Document Object Model (DOM) represents a web page as a tree strucutre of nodes",
      "displayAsCode": [],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/dom-nodes",
      "size": 0
    },
    {
      "id": 913,
      "type": "ValidOrNot",
      "given": "",
      "question": "document.getElementById('title').style.fontSize = '2rem'",
      "displayAsCode": ["question"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/searching-elements-dom#document-getelementbyid-or-just-id",
      "size": 0
    },
    {
      "id": 913,
      "type": "FillBlank",
      "given": "Fill in the blank to access the HTML element with an <pre>id</pre> of <pre>title</pre>",
      "question": "",
      "displayAsCode": ["q1","q2","answer"],
      "q1": "",
      "q2": ".style.fontSize = '2rem'",
      "choices": [],
      "answer": "",
      "answers": ["document.getElementById('title')","document.getElementById(\"title\")"],
      "explanation": "",
      "moreInfo": "https://javascript.info/searching-elements-dom#document-getelementbyid-or-just-id",
      "size": 34
    },
    {
      "id": 914,
      "type": "TrueOrFalse",
      "given": "",
      "question": "There is no prescribed limit on the number of <pre>id</pre> and <pre>class</pre> properties that can appear on a single HTML page",
      "displayAsCode": [],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": false,
      "answers": [],
      "explanation": "True for classes, but not for ids",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 915,
      "type": "ValidOrNot",
      "given": "",
      "question": "document.getAllElementsById('title').style.fontSize = '2rem'",
      "displayAsCode": ["question"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": false,
      "answers": [],
      "explanation": "",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 916,
      "type": "ValidOrNot",
      "given": "",
      "question": "body.getElementById('title').style.color = 'navy'",
      "displayAsCode": ["question"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": false,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/searching-elements-dom#document-getelementbyid-or-just-id",
      "size": 0
    },
    {
      "id": 917,
      "type": "ValidOrNot",
      "given": "",
      "question": "document.querySelectorAll('#title').style.color = 'navy'",
      "displayAsCode": ["question"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": false,
      "answers": [],
      "explanation": "",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 918,
      "type": "MultipleChoice",
      "given": "document.querySelector(✍)",
      "question": "✍ should be replaced by...",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": ["the <pre>id</pre> of an HTML element", "the <pre>nodeId</pre> of an HTML property", "any valid CSS selector"],
      "answer": 2,
      "answers": [],
      "explanation": "",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 919,
      "type": "ValidOrNot",
      "given": "",
      "question": "document.querySelectorAll('ul > li:last-child')",
      "displayAsCode": ["question"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/searching-elements-dom#querySelectorAll",
      "size": 0
    },
    {
      "id": 921,
      "type": "TrueOrFalse",
      "given": "&lt;h2 id=&quot;title&quot;>Learn you some code for great good&lt;/h2><br>&lt;p class=&quot;simple&quot;>This&lt;/p><br>&lt;p class=&quot;simple&quot;>is&lt;/p><br>&lt;p class=&quot;simple&quot;>simple&lt;/p><br>&nbsp;&nbsp;<br><br>//<br><br>let elements = document.querySelectorAll('p')<br><br>for (element of elements) {<br>&nbsp;&nbsp;console.log(element.innerHTML)<br>}",
      "question": "This code loops over all paragraph elements, logging their contents to the console",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [],
      "explanation": "",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 931,
      "type": "MultipleChoice",
      "given": "&lt;h2 id=&quot;title&quot;>Learn you some code for great good&lt;/h2><br>&lt;p class=&quot;simple&quot;>This&lt;/p><br>&lt;p class=&quot;simple&quot;>is&lt;/p><br>&lt;p class=&quot;simple&quot;>simple&lt;/p><br><br>//<br><br>let elements = document.getElementsByClassName('simple')<br><br>log(elements.length)<br><br>document.getElementById('title').classList.add('simple')<br><br>log(elements.length)",
      "question": "The code, <pre>log(elements.length)</pre> is executed twice. What does it yield?",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": ["0,0", "3,3", "3,4", "a runtime exception"],
      "answer": 2,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/searching-elements-dom#live-collections",
      "size": 0
    },
    {
      "id": 9110,
      "type": "TrueOrFalse",
      "given": "",
      "question": "<pre>document.querySelector</pre> differs from <pre>document.querySelectorAll</pre> in that the first returns the <em>first</em> element it finds matching the selector while the other returns <em>all</em> in a collection.",
      "displayAsCode": [],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/searching-elements-dom#querySelectorAll",
      "size": 0
    },
    {
      "id": 922,
      "type": "ValidOrNot",
      "given": "",
      "question": "let main = document.querySelector('main')<br>let foos = main.querySelectorAll('.foo')",
      "displayAsCode": ["question"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/searching-elements-dom#summary",
      "size": 0
    },
    {
      "id": 923,
      "type": "MultipleChoice",
      "given": "&lt;main><br>&nbsp;&nbsp;&lt;div class=&quot;foo&quot;>&lt;/div><br>&nbsp;&nbsp;&lt;div class=&quot;foo&quot;>&lt;/div><br>&nbsp;&nbsp;&lt;div class=&quot;bar&quot;>&lt;/div><br>&nbsp;&nbsp;&lt;div class=&quot;foo&quot;>&lt;/div><br>&lt;/main><br><br>//<br><br>let main = document.querySelector('main')<br><br>let foos = main.querySelectorAll('.foo')",
      "question": "What is the value of <pre>foos.length</pre>?",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": ["3","1","0","undefined"],
      "answer": 0,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/searching-elements-dom#summary",
      "size": 0
    },
    {
      "id": 924,
      "type": "ValidOrNot",
      "given": "",
      "question": "// HTML<br>&lt;h2 id=&quot;title&quot;>Learn you some code for great good&lt;/h2><br><br>// CSS<br>.smaller {<br>&nbsp;&nbsp;font-size: 0.7rem;<br>}<br><br>// JS<br>document.querySelector('h2').classList.add('smaller')",
      "displayAsCode": ["question"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [],
      "explanation": "",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 925,
      "type": "TrueOrFalse",
      "given": "// HTML<br>&lt;h2 id=&quot;title&quot;>Learn you some code for great good&lt;/h2><br><br>// CSS<br>.smaller {<br>&nbsp;&nbsp;font-size: 0.7rem;<br>}<br><br>// JS<br>document.querySelector('h2').classList.add('smaller')",
      "question": "This code sets the <pre>font-size</pre> of the <pre>&lt;h2></pre> tag to 0.7rem",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [],
      "explanation": "",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 932,
      "type": "MultipleChoice",
      "given": "// HTML<br>&lt;main><br>&nbsp;&nbsp;&lt;!-- Foos and Bars --><br>&nbsp;&nbsp;&lt;div class=&quot;foo&quot;>I'm a foo&lt;/div><br>&nbsp;&nbsp;&lt;div class=&quot;foo&quot;>So am I</div><br>&nbsp;&nbsp;&lt;div class=&quot;bar&quot;>Not me</div><br>&nbsp;&nbsp;&lt;div class=&quot;foo&quot;>Loser</div><br>&lt;/main><br><br>//<br><br>// JS<br>function domWalk(node, fnc) {<br>&nbsp;&nbsp;fnc(node);<br>&nbsp;&nbsp;node = node.firstChild<br>&nbsp;&nbsp;while (node) {<br>&nbsp;&nbsp;&nbsp;&nbsp;domWalk(node, fnc)<br>&nbsp;&nbsp;&nbsp;&nbsp;node = node.nextSibling<br>&nbsp;&nbsp;}<br>}<br><br>let main = document.querySelector('main')<br><br>domWalk(main, node => {<br>&nbsp;&nbsp;if (node.nodeType == 3) {<br>&nbsp;&nbsp;&nbsp;&nbsp;console.log(node.data.trim())<br>&nbsp;&nbsp;} <br>})",
      "question": "This code is an example of...",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": ["tight coupling", "recursion", "currying", "infinite loop"],
      "answer": 1,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://www.javascriptcookbook.com/article/traversing-dom-subtrees-with-a-recursive-walk-the-dom-function/",
      "size": 0
    },
    {
      "id": 933,
      "type": "TrueOrFalse",
      "given": "// HTML<br>&lt;main><br>&nbsp;&nbsp;&lt;!-- Foos and Bars --><br>&nbsp;&nbsp;&lt;div class=&quot;foo&quot;>I'm a foo</div><br>&nbsp;&nbsp;&lt;div class=&quot;foo&quot;>So am I</div><br>&nbsp;&nbsp;&lt;div class=&quot;bar&quot;>Not me</div><br>&nbsp;&nbsp;&lt;div class=&quot;foo&quot;>Loser</div><br>&lt;/main><br><br>//<br><br>// JS<br>function domWalk(node, fnc) {<br>&nbsp;&nbsp;fnc(node);<br>&nbsp;&nbsp;node = node.firstChild<br>&nbsp;&nbsp;while (node) {<br>&nbsp;&nbsp;&nbsp;&nbsp;domWalk(node, fnc)<br>&nbsp;&nbsp;&nbsp;&nbsp;node = node.nextSibling<br>&nbsp;&nbsp;}<br>}<br><br>let usedNodeTypes = {<br>&nbsp;&nbsp;'1': 0,<br>&nbsp;&nbsp;'2': 0,<br>&nbsp;&nbsp;'3': 0,<br>&nbsp;&nbsp;'8': 0,<br>}<br><br>let main = document.querySelector('main')<br><br>domWalk(main, node => {<br>&nbsp;&nbsp;usedNodeTypes[node.nodeType] += 1 <br>})",
      "question": "This code produces an object with the <pre>nodeType</pre>s and the number of occurrences for each one",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [],
      "explanation": "",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 5250,
      "type": "ValidorNot",
      "given": "",
      "question": "let grades = '76,84,91,81,84,78,76,68,94,91'<br><br>let gradeArr = grades.split(',')<br>let gradeSet = new Set(gradeArr)",
      "displayAsCode": ["question"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [],
      "explanation": "",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 5314,
      "type": "MultipleChoice",
      "given": "let grades = '76,84,91,81,84,78,76,68,94,91'<br><br>let gradeArr = grades.split(',')<br>let gradeSet = new Set(gradeArr)",
      "question": "What does this code do?",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": ["creates an error", "creates a Set with all original array elements represented", "creates an empty Set", "creates a de-duped Set of array values"],
      "answer": 3,
      "answers": [],
      "explanation": "",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 5251,
      "type": "MultipleChoice",
      "given": "let arr = [<br>&nbsp;&nbsp;'Twas',<br>&nbsp;&nbsp;'brilling',<br>&nbsp;&nbsp;'and',<br>&nbsp;&nbsp;'the',<br>&nbsp;&nbsp;'slithy',<br>&nbsp;&nbsp;'toves',<br>&nbsp;&nbsp;'did',<br>&nbsp;&nbsp;'gyre',<br>&nbsp;&nbsp;'and',<br>&nbsp;&nbsp;'gimble',<br>&nbsp;&nbsp;'in',<br>&nbsp;&nbsp;'the',<br>&nbsp;&nbsp;'wabe'<br>]<br><br>let jabberwocky = arr.join(' ')",
      "question": "What is wrong with this code?",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": ["there is no <pre>join</pre> function in arrays","the code to join elements in an array is <pre>Array.join(arr, ' ')", "nothing"],
      "answer": 2,
      "answers": [],
      "explanation": "",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 5252,
      "type": "FillBlank",
      "given": "Fill in blank to turn <pre>arr</pre> into a string with spaces between each word",
      "question": "",
      "displayAsCode": ["q1","q2","answer"],
      "q1": "let arr = [<br>&nbsp;&nbsp;'Twas',<br>&nbsp;&nbsp;'brilling',<br>&nbsp;&nbsp;'and',<br>&nbsp;&nbsp;'the',<br>&nbsp;&nbsp;'slithy',<br>&nbsp;&nbsp;'toves',<br>&nbsp;&nbsp;'did',<br>&nbsp;&nbsp;'gyre',<br>&nbsp;&nbsp;'and',<br>&nbsp;&nbsp;'gimble',<br>&nbsp;&nbsp;'in',<br>&nbsp;&nbsp;'the',<br>&nbsp;&nbsp;'wabe'<br>]<br><br>let jabberwocky = ",
      "q2": "",
      "choices": [],
      "answer": "",
      "answers": ["arr.join(' ')", "arr.join(\" \")"],
      "explanation": "",
      "moreInfo": "",
      "size": 14
    },
    {
      "id": 926,
      "type": "FillBlank",
      "given": "Fill in the blank to select the element with an <pre>id</pre> of <em>subscribe</em>",
      "question": "",
      "displayAsCode": ["q1","q2","answer"],
      "q1": "document.querySelector(",
      "q2": ").setAttribute('checked', 'true')",
      "choices": [],
      "answer": "",
      "answers": ["'#subscribe'", "\"#subscribe\""],
      "explanation": "",
      "moreInfo": "",
      "size": 12
    },
    {
      "id": 927,
      "type": "FillBlank",
      "given": "Fill in the blank to provide an attribute, <em>checked</em>,  set to <em>true</em>",
      "question": "",
      "displayAsCode": ["q1","q2","answer"],
      "q1": "document.querySelector('#subscribe').",
      "q2": "",
      "choices": [],
      "answer": "",
      "answers": ["setAttribute('checked', 'true')", "setAttribute(\"checked\", \"true\")"],
      "explanation": "",
      "moreInfo": "",
      "size": 32
    },
    {
      "id": 928,
      "type": "MultipleChoice",
      "given": "let isChecked = document.querySelector('h2').getAttribute('class')",
      "question": "What is wrong with this code?",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": ["function chaining is not allowed in DOM access", "the <pre>h2</pre> selector is invalid", "must use <pre>querySelectorAll</pre> since <pre>class</pre> may have multiple values", "nothing"],
      "answer": 3,
      "answers": [],
      "explanation": "",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 929,
      "type": "MultipleChoice",
      "given": "// HTML<br>&lt;h2 data-type=&quot;quote&quot;>Learn you some code for great good&lt;/h2><br><br>// JS<br>let type = document.querySelector('h2').dataset.type",
      "question": "What value does <pre>type</pre> have?",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": ["quote", "undefined", "empty string", "error &mdash; <pre>type</pre> is a reserved word"],
      "answer": 0,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/dom-attributes-and-properties#non-standard-attributes-dataset",
      "size": 0
    },
    {
      "id": 9210,
      "type": "MultipleChoice",
      "given": "// HTML<br>&lt;h2 data-string-type=&quot;quote&quot;>Learn you some code for great good&lt;/h2><br><br>// JS<br>let type = document.querySelector('h2').dataset.stringType",
      "question": "What value does <pre>type</pre> have?",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": ["quote", "undefined", "empty string", "error &mdash; you cannot have hyphenated <pre>data-</pre> attributes"],
      "answer": 0,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/dom-attributes-and-properties#non-standard-attributes-dataset",
      "size": 0
    },
    {
      "id": 934,
      "type": "TrueOrFalse",
      "given": "// HTML<br>&lt;ul><br>&nbsp;&nbsp;&lt;li data-plant-type=&quot;fruit&quot;>Tomato&lt;/li><br>&nbsp;&nbsp;&lt;li data-plant-type=&quot;vegetable&quot;>Potato&lt;/li><br>&nbsp;&nbsp;&lt;li data-plant-type=&quot;flower&quot;>Orchid&lt;/li><br>&nbsp;&nbsp;&lt;li data-plant-type=&quot;fruit&quot;>Strawberry&lt;/li><br>&nbsp;&nbsp;&lt;li data-plant-type=&quot;vegetable&quot;>Asparagas&lt;/li><br>&lt;/ul><br><br>// JS<br>let items = document.querySelectorAll('li')<br><br>for (let item of items) {<br>&nbsp;&nbsp;if (item.dataset.plantType == 'fruit') {<br>&nbsp;&nbsp;&nbsp;&nbsp;item.classList.add('fruit')<br>&nbsp;&nbsp;}<br>}<br><br>// CSS<br>.fruit {<br>&nbsp;&nbsp;color: red;<br>}",
      "question": "This adds a <pre>class</pre> of <em>fruit</em> to all found items that have a <pre>data-plant-type</pre> value of <em>fruit</em>",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [],
      "explanation": "",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 935,
      "type": "TrueOrFalse",
      "given": "// HTML<br>&lt;ul><br>&nbsp;&nbsp;&lt;li data-plant-type=&quot;fruit&quot;>Tomato&lt;/li><br>&nbsp;&nbsp;&lt;li data-plant-type=&quot;vegetable&quot;>Potato&lt;/li><br>&nbsp;&nbsp;&lt;li data-plant-type=&quot;flower&quot;>Orchid&lt;/li><br>&nbsp;&nbsp;&lt;li data-plant-type=&quot;fruit&quot;>Strawberry&lt;/li><br>&nbsp;&nbsp;&lt;li data-plant-type=&quot;vegetable&quot;>Asparagas&lt;/li><br>&lt;/ul><br><br>// JS<br>let items = document.querySelectorAll('li')<br><br>for (let item of items) {<br>&nbsp;&nbsp;if (item.dataset.plantType == 'fruit') {<br>&nbsp;&nbsp;&nbsp;&nbsp;item.classList.add('fruit')<br>&nbsp;&nbsp;}<br>}<br><br>// CSS<br>.fruit {<br>&nbsp;&nbsp;color: red;<br>}",
      "question": "This fails to add <em>fruit</em> to the elements since no <pre>class</pre> attribute is specified in the HTML",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": false,
      "answers": [],
      "explanation": "",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 8240,
      "type": "MultipleChoice",
      "given": "window.author = {<br>&nbsp;&nbsp;name: 'Hal Helms',<br>&nbsp;&nbsp;email: 'hal.helms@gmail.com'<br>}<br><br>log(author)",
      "question": "What is wrong with this code?",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": ["you can assign only primitive values to global variables", "the <pre>log</pre> function is trying to access an unscoped variable", "both of the above", "nothing"],
      "answer": 3,
      "answers": [],
      "explanation": "",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 8241,
      "type": "MultipleChoice",
      "given": "function fnc() {<br>&nbsp;&nbsp;console.log(author)<br>}<br><br>var author = 'Hal Helms'<br><br>fnc()",
      "question": "What is logged to the console?",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": ["Hal Helms", "undefined", "empty string", "error"],
      "answer": 0,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/var#var-variables-can-be-declared-below-their-use",
      "size": 0
    },
    {
      "id": 8242,
      "type": "MultipleChoice",
      "given": "function fnc() {<br>&nbsp;&nbsp;console.log(author)<br>&nbsp;&nbsp;var author = 'Hal Helms'<br>}<br><br>fnc()",
      "question": "What is logged to the console?",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": ["Hal Helms", "undefined", "empty string", "error"],
      "answer": 1,
      "answers": [],
      "explanation": "This one is a little tricky.",
      "moreInfo": "https://javascript.info/var#var-variables-can-be-declared-below-their-use",
      "size": 0
    },
    {
      "id": 5315,
      "type": "FillBlank",
      "given": "Fill in the blank so that <pre>players</pre> are sorted based on the <pre>sortPlayers</pre> function",
      "question": "",
      "displayAsCode": ["q1","q2","answer"],
      "q1": "let players = [<br>&nbsp;&nbsp;{name: 'Alice', rank: 5},<br>&nbsp;&nbsp;{name: 'Angel', rank: 1},<br>&nbsp;&nbsp;{name: 'Adrian', rank: 3},<br>&nbsp;&nbsp;{name: 'Astor', rank: 4},<br>&nbsp;&nbsp;{name: 'Allen', rank: 7},<br>&nbsp;&nbsp;{name: 'Albricht', rank: 6},<br>&nbsp;&nbsp;{name: 'Adam', rank: 2},<br>]<br><br>function sortPlayers(p1, p2) {<br>&nbsp;&nbsp;if (p1.rank > p2.rank) return 1<br>&nbsp;&nbsp;if (p1.rank < p2.rank) return -1<br>&nbsp;&nbsp;return 0<br>}<br><br>let rankedPlayers = ",
      "q2": "",
      "choices": [],
      "answer": "",
      "answers": ["players.sort(sortPlayers)"],
      "explanation": "",
      "moreInfo": "",
      "size": 26
    },
    {
      "id": 5316,
      "type": "MultipleChoice",
      "given": "let players = [<br>&nbsp;&nbsp;{name: 'Alice', rank: 5},<br>&nbsp;&nbsp;{name: 'Angel', rank: 1},<br>&nbsp;&nbsp;{name: 'Adrian', rank: 3},<br>&nbsp;&nbsp;{name: 'Astor', rank: 4},<br>&nbsp;&nbsp;{name: 'Allen', rank: 7},<br>&nbsp;&nbsp;{name: 'Albricht', rank: 6},<br>&nbsp;&nbsp;{name: 'Adam', rank: 2},<br>]<br><br>function sortPlayers(p1, p2) {<br>&nbsp;&nbsp;if (p1.rank > p2.rank) return 1<br>&nbsp;&nbsp;if (p1.rank < p2.rank) return -1<br>&nbsp;&nbsp;return 0<br>}<br><br>let rankedPlayers = players.sort(sortPlayers).map( player => player.name)",
      "question": "What is wrong with this code?",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": ["arrays of objects cannot be sorted with the <pre>sort</pre> function", "<pre>rankedPlayers</pre> is invalid","the <pre>sortPlayers</pre> function does not sort by rank", "nothing"],
      "answer": 3,
      "answers": [],
      "explanation": "",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 5317,
      "type": "MultipleChoice",
      "given": "let players = [<br>&nbsp;&nbsp;{name: 'Alice', rank: 5},<br>&nbsp;&nbsp;{name: 'Angel', rank: 1},<br>&nbsp;&nbsp;{name: 'Adrian', rank: 3},<br>&nbsp;&nbsp;{name: 'Astor', rank: 4},<br>&nbsp;&nbsp;{name: 'Allen', rank: 7},<br>&nbsp;&nbsp;{name: 'Albricht', rank: 6},<br>&nbsp;&nbsp;{name: 'Adam', rank: 2},<br>]<br><br>// sort by name<br>let sortedPlayers = players.sort()<br><br>log(sortedPlayers)",
      "question": "What is wrong with this code?",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": ["you must use a <pre>map</pre> function when sorting objects", "there is a trailing comma in the <pre>players</pre> array", "<pre>sort</pre> does not sort on object properties by default", "nothing"],
      "answer": 2,
      "answers": [],
      "explanation": "",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 6314,
      "type": "TrueOrFalse",
      "given": "let factorial = num => {<br>&nbsp;&nbsp;if (num == 0) {<br>&nbsp;&nbsp;&nbsp;&nbsp;return 1<br>&nbsp;&nbsp;} else {<br>&nbsp;&nbsp;&nbsp;&nbsp;return num * factorial(num - 1) <br>&nbsp;&nbsp;}<br>}<br><br>log(factorial(6)",
      "question": "This code returns the <em>factorial</em> of 6 &mdash; 720",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [],
      "explanation": "https://javascript.info/recursion",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 6315,
      "type": "TrueOrFalse",
      "given": "",
      "question": "Any recursion can be rewritten as a loop",
      "displayAsCode": [],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [],
      "explanation": "While the answer is <em>true</em>, recursion often makes the code simpler and easier to understand",
      "moreInfo": "https://javascript.info/recursion",
      "size": 0
    },
    {
      "id": 6316,
      "type": "MultipleChoice",
      "given": "let superLog = (date, name, value) => {<br>&nbsp;&nbsp;console.log(`${date.getHours()}:${date.getMinutes()}:${date.getSeconds()} : The value of ${name} is ${value}`)<br>}<br><br>function mystery(f) {<br>&nbsp;&nbsp;return function(a) {<br>&nbsp;&nbsp;&nbsp;&nbsp;return function(b) {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return function(c) {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return f(a,b,c)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;}<br>}<br><br>let author = 'Hal Helms'<br>superLog(new Date(), 'author', author)<br><br>let mysteryLog = mystery(superLog)<br>let logNow = mysteryLog(new Date())<br>logNow('author')(author)",
      "question": "This code illustrates the concept known as...",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": ["base streamlining", "currying", "episodic closures", "function chaining"],
      "answer": 1,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/currying-partials",
      "size": 0
    },
    {
      "id": 737,
      "type": "MultipleChoice",
      "given": "let now = new Date()<br>let christmas = new Date('12/25/2021')<br><br>let diff = christmas.getTime() - now.getTime()<br><br>const MILLISECONDS_PER_DAY = 1000 * 60 * 60 * 24<br><br>let daysToChristmas = parseInt(diff/MILLISECONDS_PER_DAY)",
      "question": "What is wrong with this code?",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": ["<pre>now</pre> is a reserved word", "calling <pre>new Date()</pre> without an argument is invalid", "you cannot subtract dates", "nothing"],
      "answer": 3,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://www.javatpoint.com/calculate-days-between-two-dates-in-javascript",
      "size": 0
    },
    {
      "id": 6317,
      "type": "ValidOrNot",
      "given": "",
      "question": "async function getRandomJoke() {<br>&nbsp;&nbsp;let response = await fetch('https://official-joke-api.appspot.com/jokes/ten')<br><br>&nbsp;&nbsp;let jokes = await response.json()<br>&nbsp;&nbsp;console.log(jokes[0].setup)<br>&nbsp;&nbsp;console.log(jokes[0].punchline)<br>}<br><br>getRandomJoke()",
      "displayAsCode": ["question"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [],
      "explanation": "Feel free to run this. I can vouch for the code, not for the jokes.",
      "moreInfo": "https://javascript.info/async-await",
      "size": 0
    },
    {
      "id": 6318,
      "type": "FillBlank",
      "given": "Fill in the blank to make <pre>getFakeUser</pre> an asynchronous function",
      "question": "",
      "displayAsCode": ["q1","q2","answer"],
      "q1": "",
      "q2": " function getFakeUser() {<br>&nbsp;&nbsp;let response = await fetch('https://randomuser.me/api/')<br><br>&nbsp;&nbsp;let user = await response.json()<br>&nbsp;&nbsp;<br>&nbsp;&nbsp;console.log(user.results[0].name.first + ' ' + user.results[0].name.last)<br>}<br><br>getFakeUser()",
      "choices": [],
      "answer": "",
      "answers": ["async"],
      "explanation": "Feel free to copy and run this code",
      "moreInfo": "https://javascript.info/async-await",
      "size": 5
    },
    {
      "id": 936,
      "type": "TrueOrFalse",
      "given": "// HTML<br>&lt;ul><br>&nbsp;&nbsp;&lt;li data-plant-type=&quot;fruit&quot;>Tomato&lt;/li><br>&nbsp;&nbsp;&lt;li data-plant-type=&quot;vegetable&quot;>Potato&lt;/li><br>&nbsp;&nbsp;&lt;li data-plant-type=&quot;flower&quot;>Orchid&lt;/li><br>&nbsp;&nbsp;&lt;li data-plant-type=&quot;fruit&quot;>Strawberry&lt;/li><br>&nbsp;&nbsp;&lt;li data-plant-type=&quot;vegetable&quot;>Asparagas&lt;/li><br>&lt;/ul><br><br>// JS<br>let ul = document.querySelector('ul')<br><br>let newLi = document.createElement('li')<br>newLi.classList.add('fruit')<br>newLi.setAttribute('data-plant-type','fruit')<br>newLi.innerHTML = 'Peach'<br><br>ul.append(newLi)",
      "question": "This will create a new <pre>li</pre> element",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/modifying-document#creating-an-element",
      "size": 0
    },
    {
      "id": 937,
      "type": "MultipleChoice",
      "given": "// HTML<br>&lt;ul><br>&nbsp;&nbsp;&lt;li data-plant-type=&quot;fruit&quot;>Tomato&lt;/li><br>&nbsp;&nbsp;&lt;li data-plant-type=&quot;vegetable&quot;>Potato&lt;/li><br>&nbsp;&nbsp;&lt;li data-plant-type=&quot;flower&quot;>Orchid&lt;/li><br>&nbsp;&nbsp;&lt;li data-plant-type=&quot;fruit&quot;>Strawberry&lt;/li><br>&nbsp;&nbsp;&lt;li data-plant-type=&quot;vegetable&quot;>Asparagas&lt;/li><br>&lt;/ul><br><br>// JS<br>let ul = document.querySelector('ul')<br><br>let title = document.createElement('h2')<br>title.innerHTML = 'Plants'<br>ul.???(title)",
      "question": "To insert this before the unordered list, you should replace <em>???</em> with...",
      "displayAsCode": ["given", "choices"],
      "q1": "",
      "q2": "",
      "choices": ["prepend", "insert", "top", "before"],
      "answer": 3,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/modifying-document#insertion-methods",
      "size": 0
    },
    {
      "id": 938,
      "type": "ValidOrNot",
      "given": "",
      "question": "// HTML<br>&lt;ul><br>&nbsp;&nbsp;&lt;li data-plant-type=&quot;fruit&quot;>Tomato&lt;/li><br>&nbsp;&nbsp;&lt;li data-plant-type=&quot;vegetable&quot;>Potato&lt;/li><br>&nbsp;&nbsp;&lt;li data-plant-type=&quot;flower&quot;>Orchid&lt;/li><br>&nbsp;&nbsp;&lt;li data-plant-type=&quot;fruit&quot;>Strawberry&lt;/li><br>&nbsp;&nbsp;&lt;li data-plant-type=&quot;vegetable&quot;>Asparagas&lt;/li><br>&lt;/ul><br><br>// JS<br>let ul = document.querySelector('ul')<br><br>ul.insertAdjacentHTML('beforebegin', '&lt;h2>Plants&lt;/h2>')",
      "displayAsCode": ["question"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/modifying-document#insertion-methods",
      "size": 0
    },
    {
      "id": 939,
      "type": "MultipleChoice",
      "given": "// HTML<br>&lt;ul><br>&nbsp;&nbsp;&lt;li data-plant-type=&quot;fruit&quot;>Tomato&lt;/li><br>&nbsp;&nbsp;&lt;li data-plant-type=&quot;vegetable&quot;>Potato&lt;/li><br>&nbsp;&nbsp;&lt;li data-plant-type=&quot;flower&quot;>Orchid&lt;/li><br>&nbsp;&nbsp;&lt;li data-plant-type=&quot;fruit&quot;>Strawberry&lt;/li><br>&nbsp;&nbsp;&lt;li data-plant-type=&quot;vegetable&quot;>Asparagas&lt;/li><br>&lt;/ul><br><br>// JS<br>let lis = document.querySelectorAll('li')<br>for (let li of lis) {<br>&nbsp;&nbsp;if (li.dataset.plantType == 'vegetable') {<br>&nbsp;&nbsp;&nbsp;&nbsp;li.remove()<br>&nbsp;&nbsp;}<br>}",
      "question": "What does this code do?",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": ["removes <pre>li</pre> elements with a <pre>data-plant-type</pre> of <em>vegetable</em> from the DOM", "removes duplicates", "nothing", "throws an error"],
      "answer": 0,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/modifying-document#insertion-methods",
      "size": 0
    },
    {
      "id": 9310,
      "type": "TrueOrFalse",
      "given": "let lis = document.querySelectorAll('div>li')<br>for( let li of lis ) {<br>&nbsp;&nbsp;li.style.marginLeft = '40px'<br>}",
      "question": "This code finds all <pre>li</pre> elements on a web page and sets their left margin to 40 pixels",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": false,
      "answers": [],
      "explanation": "The problem lies in the CSS selector",
      "moreInfo": "https://javascript.info/styles-and-classes",
      "size": 0
    },
    {
      "id": 9311,
      "type": "MultipleChoice",
      "given": "// HTML<br>&lt;ul><br>&nbsp;&nbsp;&lt;li data-plant-type=&quot;fruit&quot;>Tomato&lt;/li><br>&nbsp;&nbsp;&lt;li data-plant-type=&quot;vegetable&quot;>Potato&lt;/li><br>&nbsp;&nbsp;&lt;li data-plant-type=&quot;flower&quot;>Orchid&lt;/li><br>&nbsp;&nbsp;&lt;li data-plant-type=&quot;fruit&quot;>Strawberry&lt;/li><br>&nbsp;&nbsp;&lt;li data-plant-type=&quot;vegetable&quot;>Asparagas&lt;/li><br>&lt;/ul><br><br>// JS<br>let lis = document.querySelectorAll('ul>li')<br><br>for( let li of lis ) {<br>&nbsp;&nbsp;li.style.marginLeft = '40px'<br>&nbsp;&nbsp;li.classList.add('undecorated')<br>}<br><br>// CSS<br>.undecorated {<br>&nbsp;&nbsp;list-style: none;<br>}",
      "question": "Is it preferable to set attributes on the <pre>style</pre> property directly or to add a class to handle display aspects?",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": ["set directly", "use classes", "no preference"],
      "answer": 1,
      "answers": [],
      "explanation": "It seems like every code question is answered with \"It depends...\" but here, using classes is far superior",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 9211,
      "type": "MultipleChoice",
      "given": "",
      "question": "What is the difference between <pre>className</pre> and <pre>classList</pre> when working with DOM elements?",
      "displayAsCode": [],
      "q1": "",
      "q2": "",
      "choices": ["Both the same &mdash; originally <pre>className</pre> was a reserved word, so <pre>classList</pre> was used. That limitation no longer exists.", "<pre>className</pre> can be set while <pre>classList</pre> can be added to or removed from", "<pre>className</pre> in this context doesn't exist &mdash; there's only <pre>classList</pre>"],
      "answer": "1",
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/styles-and-classes#classname-and-classlist",
      "size": 0
    },
    {
      "id": 9111,
      "type": "TrueOrFalse",
      "given": "",
      "question": "Browser events are spawned if <pre>spawn-events</pre> in <b>js.config</b> is set to <pre>true</pre>",
      "displayAsCode": [],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": false,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/introduction-browser-events",
      "size": 0
    },
    {
      "id": 5318,
      "type": "FillBlank",
      "given": "Fill in the code to return the last item in the first nested array",
      "question": "",
      "displayAsCode": ["q1","q2","answer"],
      "q1": "let arr2d = [[5,9,27,36],[64,19,11,22]]<br>log(",
      "q2": ") // should be 36",
      "choices": [],
      "answer": "",
      "answers": ["arr2d[0][3]"],
      "explanation": "",
      "moreInfo": "",
      "size": 13
    },
    {
      "id": 8323,
      "type": "ValidOrNot",
      "given": "",
      "question": "let largestOf2d = [<br>&nbsp;&nbsp;Number.NEGATIVE_INFINITY,<br>&nbsp;&nbsp;Number.NEGATIVE_INFINITY,<br>&nbsp;&nbsp;Number.NEGATIVE_INFINITY,<br>&nbsp;&nbsp;Number.NEGATIVE_INFINITY,<br>]",
      "displayAsCode": ["question"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [],
      "explanation": "",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 5319,
      "type": "TrueOrFalse",
      "given": "let unshuffledDeck = []<br><br>let suits = ['Clubs', 'Diamonds', 'Hearts', 'Spades']<br><br>let pips = [2,3,4,5,6,7,8,9,10,'Jack','Queen', 'King', 'Ace']<br><br>suits.forEach( suit => {<br>&nbsp;&nbsp;pips.forEach( pip => {<br>&nbsp;&nbsp;&nbsp;&nbsp;unshuffledDeck.push(pip + ' of ' + suit)<br>&nbsp;&nbsp;})<br>})",
      "question": "At the end of running this code, <pre>unshuffledDeck</pre> will remain an empty array",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": false,
      "answers": [],
      "explanation": "",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 5320,
      "type": "MultipleChoice",
      "given": "let largestOf2d = [<br>&nbsp;&nbsp;Number.NEGATIVE_INFINITY,<br>&nbsp;&nbsp;Number.NEGATIVE_INFINITY,<br>&nbsp;&nbsp;Number.NEGATIVE_INFINITY,<br>&nbsp;&nbsp;Number.NEGATIVE_INFINITY,<br>]<br><br>let arr2d = [[5,9,27,36],[64,19,11,22],[-24, -13, -67, 0],[102,94,99,106]]<br><br>arr2d.forEach( (innerArray, i) => {<br>&nbsp;&nbsp;innerArray.forEach(num => {<br>&nbsp;&nbsp;&nbsp;&nbsp;if (num > largestOf2d[i]) largestOf2d[i] = num<br>&nbsp;&nbsp;})<br>})",
      "question": "After this code runs, <pre>largestOf2d</pre> will look like...",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": ["[Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY,]", "[0, 0, 0, 0]", "[36, 64, 0, 106]", "an error prevents the code from running"],
      "answer": 2,
      "answers": [],
      "explanation": "",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 9212,
      "type": "MultipleChoice",
      "given": "// HTML<br>&lt;ul><br>&nbsp;&nbsp;&lt;li>Tomato&lt;/li><br>&nbsp;&nbsp;&lt;li>Potato&lt;/li><br>&nbsp;&nbsp;&lt;li>Orchid&lt;/li><br>&nbsp;&nbsp;&lt;li>Strawberry&lt;/li><br>&nbsp;&nbsp;&lt;li>Asparagas&lt;/li><br>&lt;/ul><br><br>// JS<br>document.querySelector('ul').addEventListener('click', (event)=> console.log('You clicked ' + event.target.innerHTML))",
      "question": "This code is an example of...",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": ["a very confused developer", "event delegation", "event forwarding", "event instantiation"],
      "answer": 1,
      "answers": [],
      "explanation": "",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 9213,
      "type": "MultipleChoice",
      "given": "// HTML<br>&lt;ul><br>&nbsp;&nbsp;&lt;li>Tomato&lt;/li><br>&nbsp;&nbsp;&lt;li>Potato&lt;/li><br>&nbsp;&nbsp;&lt;li>Orchid&lt;/li><br>&nbsp;&nbsp;&lt;li>Strawberry&lt;/li><br>&nbsp;&nbsp;&lt;li>Asparagas&lt;/li><br>&lt;/ul><br><br>// JS<br>document.querySelector('ul').addEventListener('click', (event)=> console.log('You clicked ' + event.target.innerHTML))",
      "question": "What will be logged to the console if <pre>Orchid</pre> is clicked?",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": ["[HTMLelement]", "nothing as the event listener is not on the individual <pre>li</pre>s", "&lt;ul>", "You clicked Orchid"],
      "answer": 3,
      "answers": [],
      "explanation": "The secret is <em>event delegation</em>",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 9214,
      "type": "MultipleChoice",
      "given": "",
      "question": "The event, <em>contextmenu</em> is spawned when a user's mouse is...",
      "displayAsCode": [],
      "q1": "",
      "q2": "",
      "choices": ["alt-clicked", "ctrl-clicked", "shift-clicked", "right-clicked"],
      "answer": 3,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/introduction-browser-events",
      "size": 0
    },
    {
      "id": 9215,
      "type": "MultipleChoice",
      "given": "&lt;button onclick=\"alert(this.innerHTML)\">Click me&lt;/button>",
      "question": "What does <pre>this</pre> belong to?",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": ["window", "alert function", "the button element", "it is undefined"],
      "answer": 2,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/introduction-browser-events",
      "size": 0
    },
    {
      "id": 9216,
      "type": "MultipleChoice",
      "given": "document.querySelector('ul').addEventListener('click', (event)=> console.log('You clicked ' + event.target.innerHTML), {once: true})",
      "question": "What does passing <pre>{once: true}</pre> do the event listener?",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": ["nothing &mdash; the object is ignored", "cause the event listener to fire only once"],
      "answer": "1",
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/introduction-browser-events#addeventlistener",
      "size": 0
    },
    {
      "id": 9312,
      "type": "TrueOrFalse",
      "given": "// HTML<br>&lt;ul><br>&nbsp;&nbsp;&lt;li>Tomato&lt;/li><br>&nbsp;&nbsp;&lt;li>Potato&lt;/li><br>&nbsp;&nbsp;&lt;li>Orchid&lt;/li><br>&nbsp;&nbsp;&lt;li>Strawberry&lt;/li><br>&nbsp;&nbsp;&lt;li>Asparagas&lt;/li><br>&lt;/ul><br><br>// JS<br>document.querySelector('ul>li:last-child').addEventListener('click', (event)=> console.log('You clicked ' + event.target.innerHTML))<br>",
      "question": "This code sets an event listener on the last <pre>li</pre> element that, itself, is a direct descendent of <pre>ul</pre> elements",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/introduction-browser-events#addeventlistener",
      "size": 0
    },
    {
      "id": 9313,
      "type": "TrueOrFalse",
      "given": "// HTML<br>&lt;ul><br>&nbsp;&nbsp;&lt;li>Tomato&lt;/li><br>&nbsp;&nbsp;&lt;li>Potato&lt;/li><br>&nbsp;&nbsp;&lt;li>Orchid&lt;/li><br>&nbsp;&nbsp;&lt;li>Strawberry&lt;/li><br>&nbsp;&nbsp;&lt;li>Asparagas&lt;/li><br>&lt;/ul><br><br>// JS<br>let el = document.querySelector('ul>li:last-child')<br><br>let fnc1 = event => console.log('You clicked&nbsp;&nbsp;' + event.target.innerHTML)<br><br>let fnc2 = event => event.target.style.color = 'red'<br><br>el.addEventListener('click', fnc1)<br>el.addEventListener('click', fnc2)",
      "question": "This code won't run correctly, as you cannot have multiple event listeners for the same element/event",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": false,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/introduction-browser-events#addeventlistener",
      "size": 0
    },
    {
      "id": 9217,
      "type": "TrueOrFalse",
      "given": "",
      "question": "When an event is spawned, an event is passed to the event handler",
      "displayAsCode": [],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/introduction-browser-events#event-object",
      "size": 0
    },
    {
      "id": 9218,
      "type": "MultipleChoice",
      "given": "// HTML<br>&lt;ul><br>&nbsp;&nbsp;&lt;li>Tomato&lt;/li><br>&nbsp;&nbsp;&lt;li>Potato&lt;/li><br>&nbsp;&nbsp;&lt;li>Orchid&lt;/li><br>&nbsp;&nbsp;&lt;li>Strawberry&lt;/li><br>&nbsp;&nbsp;&lt;li>Asparagas&lt;/li><br>&lt;/ul><br><br>// JS<br>let el = document.querySelector('ul>li:last-child')<br><br>let fnc = event => console.log(event.type)<br><br>el.addEventListener('click', fnc)",
      "question": "What will be logged to the console when a click event is spawned?",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": ["click", "event", "browser", "undefined"],
      "answer": 0,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/introduction-browser-events#event-object",
      "size": 0
    },
    {
      "id": 9314,
      "type": "MultipleChoice",
      "given": "// HTML<br>&lt;ul id=&quot;plants&quot;><br>&nbsp;&nbsp;&lt;li id=&quot;tomato&quot;>Tomato&lt;/li><br>&nbsp;&nbsp;&lt;li id=&quot;potato&quot;>Potato&lt;/li><br>&nbsp;&nbsp;&lt;li id=&quot;orchid&quot;>Orchid&lt;/li><br>&nbsp;&nbsp;&lt;li id=&quot;strawberry&quot;>Strawberry&lt;/li><br>&nbsp;&nbsp;&lt;li id=&quot;asparagas&quot;>Asparagas&lt;/li><br>&lt;/ul><br><br>// JS<br>let el = document.querySelector('ul')<br><br>let fnc = event => console.log(event.target.id, event.currentTarget.id)<br><br>el.addEventListener('click', fnc)",
      "question": "What will be logged to the console if <em>Orchid</em> is clicked??",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": ["plants plants", "plants orchid", "orchid plants", "orchid orchid"],
      "answer": "2",
      "answers": [],
      "explanation": "",
      "moreInfo": "https://kbarker.dev/blog/the-difference-between-event-target-and-event-current-target",
      "size": 0
    },
    {
      "id": 9315,
      "type": "MultipleChoice",
      "given": "",
      "question": "<pre>event.target</pre> is...",
      "displayAsCode": [],
      "q1": "",
      "q2": "",
      "choices": ["the element on which the event listener was added", "the actual element that dispatched the event"],
      "answer": 1,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://kbarker.dev/blog/the-difference-between-event-target-and-event-current-target",
      "size": 0
    },
    {
      "id": 9316,
      "type": "MultipleChoice",
      "given": "",
      "question": "<pre>event.currentTarget</pre> is...",
      "displayAsCode": [],
      "q1": "",
      "q2": "",
      "choices": ["the element on which the event listener was added", "the actual element that dispatched the event"],
      "answer": 0,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://kbarker.dev/blog/the-difference-between-event-target-and-event-current-target",
      "size": 0
    },
    {
      "id": 9317,
      "type": "ValidOrNot",
      "given": "",
      "question": "// HTML<br>&lt;ul id=&quot;plants&quot;><br>&nbsp;&nbsp;&lt;li id=&quot;tomato&quot;>Tomato&lt;/li><br>&nbsp;&nbsp;&lt;li id=&quot;potato&quot;>Potato&lt;/li><br>&nbsp;&nbsp;&lt;li id=&quot;orchid&quot;>Orchid&lt;/li><br>&nbsp;&nbsp;&lt;li id=&quot;strawberry&quot;>Strawberry&lt;/li><br>&nbsp;&nbsp;&lt;li id=&quot;asparagas&quot;>Asparagas&lt;/li><br>&lt;/ul><br><br>// JS<br>let el = document.querySelector('ul')<br><br>let handler = {<br>&nbsp;&nbsp;handleEvent(event) {<br>&nbsp;&nbsp;&nbsp;&nbsp;console.log('event.target', event.target.id)<br>&nbsp;&nbsp;&nbsp;&nbsp;console.log('event.currentTarget', event.currentTarget.id)<br>&nbsp;&nbsp;&nbsp;&nbsp;console.log('You clicked on ', event.target.innerHTML)<br>&nbsp;&nbsp;}<br>}<br><br>el.addEventListener('click', handler)",
      "displayAsCode": ["question"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/introduction-browser-events#object-handlers-handleevent",
      "size": 0
    },
    {
      "id": 9219,
      "type": "TrueOrFalse",
      "given": "// HTML<br>&lt;ul id=&quot;plants&quot;><br>&nbsp;&nbsp;&lt;li id=&quot;tomato&quot;>Tomato&lt;/li><br>&nbsp;&nbsp;&lt;li id=&quot;potato&quot;>Potato&lt;/li><br>&nbsp;&nbsp;&lt;li id=&quot;orchid&quot;>Orchid&lt;/li><br>&nbsp;&nbsp;&lt;li id=&quot;strawberry&quot;>Strawberry&lt;/li><br>&nbsp;&nbsp;&lt;li id=&quot;asparagas&quot;>Asparagas&lt;/li><br>&lt;/ul><br><br>// JS<br>let handler = {<br>&nbsp;&nbsp;handleEvent(event) {<br>&nbsp;&nbsp;&nbsp;&nbsp;console.log(event.key)<br>&nbsp;&nbsp;}<br>}<br><br>document.addEventListener('keydown', handler)",
      "question": "This code will log the name of the key pressed",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [],
      "explanation": "",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 9220,
      "type": "TrueOrFalse",
      "given": "",
      "question": " From the event for <pre>keydown</pre>, you can tell the name of the key pressed, but not whether ctrl or alt were also pressed ",
      "displayAsCode": [],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": false,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://data-flair.training/blogs/javascript-event-types/",
      "size": 0
    },
    {
      "id": 6154,
      "type": "TrueOrFalse",
      "given": "function add(num1, num2) {<br>&nbsp;&nbsp;return num1 + num2<br>}<br><br>add(5,6)",
      "question": "The term, parameter, refers to the numbers 5 and 6",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": false,
      "answers": [],
      "explanation": "These are, strictly speaking, <em>arguments</em> while <pre>num1</pre> and <pre>num2</pre> are <em>parameters</em>",
      "moreInfo": "https://kbarker.dev/blog/the-difference-between-parameters-and-arguments-in-javascript-functions/",
      "size": 0
    },
    {
      "id": 322,
      "type": "ValidOrNot",
      "given": "",
      "question": "let expression1 = 10 > 20<br>let expression2 = console.log('hello')<br><br>if (expression1 || expression2) {<br>&nbsp;&nbsp;// did you expect this?<br>}",
      "displayAsCode": ["question"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://kbarker.dev/blog/short-circuit-evaluation-in-javascript/",
      "size": 0
    },
    {
      "id": 8324,
      "type": "MultipleChoice",
      "given": "",
      "question": "<pre>??</pre> is called...",
      "displayAsCode": [],
      "q1": "",
      "q2": "",
      "choices": ["conditional evaluation", "ternary operator", "nullish coalescing operator", "bit-shifting"],
      "answer": 2,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://kbarker.dev/blog/the-nullish-coalescing-operator-in-javascript/",
      "size": 0
    },
    {
      "id": 5128,
      "type": "MultipleChoice",
      "given": "let arr = new Array(5)",
      "question": "What does this code do?",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": ["creates an array with 5 empty items", "creates an empty array", "creates an array with the number 5 as the first item", "causes an error"],
      "answer": 0,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://kbarker.dev/blog/array-literals-vs-array-constructor/",
      "size": 0
    },
    {
      "id": 5129,
      "type": "MultipleChoice",
      "given": "let arr = new Array(5)<br>log(arr.length)",
      "question": "What is logged to the console?",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": ["5", "0"],
      "answer": 0,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://kbarker.dev/blog/array-literals-vs-array-constructor/",
      "size": 0
    },
    {
      "id": 8162,
      "type": "TrueOrFalse",
      "given": "function fnc(language) {<br>&nbsp;&nbsp;return<br>&nbsp;&nbsp;&nbsp;&nbsp;'So you want ' + language<br>}<br><br>log(fnc('English'))",
      "question": "This logs <em>So you want English</em> to the console",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": false,
      "answers": [],
      "explanation": "<pre>return</pre> on a line with nothing after it does an immediate return (exit) from the function. If you need to do something like this wrap what you want returned in parentheses.",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 9318,
      "type": "ValidOrNot",
      "given": "",
      "question": "// HTML<br>&lt;h2>I'm not long for this world...&lt;/h2><br><br>// JS<br>document.querySelector('h2').outerHTML = '&lt;h4>I'm back &mdash; only smaller&lt;/h4>'",
      "displayAsCode": ["question"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [],
      "explanation": "<pre>outerHTML</pre> replaces the entire element &mdash; who knew?",
      "moreInfo": "https://kbarker.dev/blog/the-outerhtml-property-in-vanilla-js/",
      "size": 0
    },
    {
      "id": 5253,
      "type": "MultipleChoice",
      "given": "let cats = ['Amadeus', 'Cody', 'Waffle']<br><br>for (cat of cats) {<br>&nbsp;&nbsp;if (cat == 'Cody') break<br>&nbsp;&nbsp;log(cat)<br>}",
      "question": "What is logged to the console?",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": ["Amadeus Cody Waffle", "Amadeus Cody", "Amadeus", "Amadeus Waffle", "Cody Waffle", "Cody", "Waffle"],
      "answer": "2",
      "answers": [],
      "explanation": "",
      "moreInfo": "https://kbarker.dev/blog/the-difference-between-break-and-continue-in-javascript/",
      "size": 0
    },
    {
      "id": 5254,
      "type": "MultipleChoice",
      "given": "let cats = ['Amadeus', 'Cody', 'Waffle']<br><br>for (cat of cats) {<br>&nbsp;&nbsp;if (cat == 'Cody') continue<br>&nbsp;&nbsp;log(cat)<br>}",
      "question": "What is logged to the console?",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": ["Amadeus Cody Waffle", "Amadeus Cody", "Amadeus", "Amadeus Waffle", "Cody Waffle", "Cody", "Waffle"],
      "answer": "3",
      "answers": [],
      "explanation": "",
      "moreInfo": "https://kbarker.dev/blog/the-difference-between-break-and-continue-in-javascript/",
      "size": 0
    },
    {
      "id": 9319,
      "type": "MultipleChoice",
      "given": "// HTML<br>&lt;h2>I'm so lonely. &lt;/h2><br><br>// JS<br>document.querySelector('h2').textContent += 'Hello, friend!'",
      "question": "Why is <pre>textContent</pre> preferred over <pre>innerHTML</pre>?",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": ["It's not. This is a trick question, right?", "It's more performant", "It allows for string interpolation", "It injects only text content, not markup, making it safe from XSS attacks"],
      "answer": "3",
      "answers": [],
      "explanation": "",
      "moreInfo": "https://gomakethings.com/preventing-cross-site-scripting-attacks-when-using-innerhtml-in-vanilla-javascript/",
      "size": 0
    },
    {
      "id": 9221,
      "type": "TrueOrFalse",
      "given": "",
      "question": "<pre>console.table</pre> does a nicer job of formatting things like objects than does <pre>console.log</pre>",
      "displayAsCode": [],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://kbarker.dev/blog/the-console-table-method-in-javascript/",
      "size": 0
    },
    {
      "id": 9321,
      "type": "MultipleChoice",
      "given": "",
      "question": "The three phases an event goes through are...",
      "displayAsCode": [],
      "q1": "",
      "q2": "",
      "choices": ["Capture-Target-Bubble", "Notification-Execution-Cleanup", "Interpretation-Compilation-Execution", "Initiation-Interpretation-Exegesis"],
      "answer": 0,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://kbarker.dev/blog/event-flow-in-javascript",
      "size": 0
    },
    {
      "id": 9322,
      "type": "MultipleChoice",
      "given": "// HTML<br>&lt;div id=&quot;demo&quot;><br>&nbsp;&nbsp;&lt;button>Drink Me&lt;/button><br>&lt;/div><br><br>// JS&<br>document.querySelector('#demo').addEventListener('click', event => console.log('You clicked the div.'))<br><br>document.querySelector('button').addEventListener('click', event => console.log('You clicked the button.'))",
      "question": "When the button is clicked, what is logged to the console?",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": ["You clicked the button.", "You clicked the div.", "You clicked the button. You clicked the div.", "nothing &mdash; the two event handlers cancel each other out"],
      "answer": 2,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/bubbling-and-capturing",
      "size": 0
    },
    {
      "id": 9323,
      "type": "MultipleChoice",
      "given": "// HTML<br>&lt;div id=&quot;demo&quot;><br>&nbsp;&nbsp;&lt;button>Drink Me&lt;/button><br>&lt;/div><br><br>// JS<br>document.querySelector('#demo').addEventListener('click', event => console.log('You clicked the div.'))<br><br>document.querySelector('button').addEventListener('click', event => {<br>&nbsp;&nbsp;event.stopPropagation()<br>&nbsp;&nbsp;console.log('You clicked the button.')<br>})",
      "question": "What is logged to the console when the button is clicked?",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": ["You clicked the button.", "You clicked the div.", "You clicked the button. You clicked the div.", "nothing &mdash; the two event handlers cancel each other out"],
      "answer": 0,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/bubbling-and-capturing",
      "size": 0
    },
    {
      "id": 9324,
      "type": "FillBlank",
      "given": "Fill in the blank to keep the form from submitting",
      "question": "",
      "displayAsCode": ["q1","q2","answer"],
      "q1": "// HTML<br>&lt;form><br>&nbsp;&nbsp;&lt;label for=&quot;name&quot;>Name&lt;/label> &lt;input id=&quot;name&quot; /><br>&lt;/form><br><br>// JS<br>document.querySelector('form').addEventListener('submit', event => {<br>&nbsp;&nbsp;",
      "q2": "<br>&nbsp;&nbsp;console.log('No, we will use JavaScript to submit this form, thank you')<br>})",
      "choices": [],
      "answer": "",
      "answers": ["event.preventDefault()"],
      "explanation": "",
      "moreInfo": "https://kbarker.dev/blog/the-event-prevent-default-method-in-javascript/",
      "size": 24
    },
    {
      "id": 4245,
      "type": "MultipleChoice",
      "given": "class Person{<br>&nbsp;&nbsp;constructor(firstName, lastName) {<br>&nbsp;&nbsp;&nbsp;&nbsp;this.firstName = firstName<br>&nbsp;&nbsp;&nbsp;&nbsp;this.lastName = lastName<br>&nbsp;&nbsp;}<br>}<br><br>class Programmer extends Person {<br>&nbsp;&nbsp;constructor(firstName, lastName, since) {<br>&nbsp;&nbsp;&nbsp;&nbsp;super(firstName, lastName)<br>&nbsp;&nbsp;&nbsp;&nbsp;this.since = since<br>&nbsp;&nbsp;} <br>}<br><br>let me = new Programmer('Hal', 'Helms', 2000)<br><br>log(me instanceof Person)",
      "question": "What is logged to the console?",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": ["true", "false", "error"],
      "answer": 0,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/instanceof",
      "size": 0
    },
    {
      "id": 8243,
      "type": "ValidOrNot",
      "given": "",
      "question": "log([null,null,null] instanceof Array)",
      "displayAsCode": ["question"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/instanceof",
      "size": 0
    },
    {
      "id": 8244,
      "type": "TrueOrFalse",
      "given": "log([null,null,null] instanceof Array)",
      "question": "<pre>false</pre> is logged to the console",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": false,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/instanceof",
      "size": 0
    },
    {
      "id": 4348,
      "type": "FillBlank",
      "given": "Fill in the blank to make this code run correctly",
      "question": "",
      "displayAsCode": ["q1","q2","answer"],
      "q1": "class Colors {<br>&nbsp;&nbsp;",
      "q2": " BLUE = '0,0,255'<br>}<br><br>log(Colors.BLUE)",
      "choices": [],
      "answer": "",
      "answers": ["static"],
      "explanation": "",
      "moreInfo": "https://javascript.info/static-properties-methods",
      "size": 6
    },
    {
      "id": 4349,
      "type": "FillBlank",
      "given": "Fill in the blank to make this code run correctly",
      "question": "",
      "displayAsCode": ["q1","q2","answer"],
      "q1": "class Licenses {<br>&nbsp;&nbsp;",
      "q2": " getLicense() {<br>&nbsp;&nbsp;&nbsp;&nbsp;return 'You now have one license'<br>&nbsp;&nbsp;}<br>}<br><br>log(Licenses.getLicense())",
      "choices": [],
      "answer": "",
      "answers": ["static"],
      "explanation": "",
      "moreInfo": "https://javascript.info/static-properties-methods",
      "size": 6
    },
    {
      "id": 6241,
      "type": "ValidOrNot",
      "given": "",
      "question": "let add = (a,b) => a+b",
      "displayAsCode": ["question"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://kbarker.dev/blog/implicit-return-statements-in-javascript/",
      "size": 0
    },
    {
      "id": 6242,
      "type": "MultipleChoice",
      "given": "let student = {<br>&nbsp;&nbsp;name: 'Ana Quay',<br>&nbsp;&nbsp;age: 29<br>}<br><br>let addStudent = student => (<br>&nbsp;&nbsp;student.age < 15 ? 'Sorry, too young' : 'Welcome new student'<br>)<br><br>log(addStudent(student))",
      "question": "What is logged to the console?",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": ["Sorry, too young", "Welcome new student", "error &mdash; no <pre>return</pre>"],
      "answer": "1",
      "answers": [],
      "explanation": "",
      "moreInfo": "https://kbarker.dev/blog/implicit-return-statements-in-javascript/",
      "size": 0
    },
    {
      "id": 5321,
      "type": "FillBlank",
      "given": "Fill in the blank to create an array of all composers in the different musical genres",
      "question": "",
      "displayAsCode": ["q1","q2","answer"],
      "q1": "const music = [<br>&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;genre: 'classical',<br>&nbsp;&nbsp;&nbsp;&nbsp;composers: [<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'J.S. Bach',<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'Franz Joseph Haydn'<br>&nbsp;&nbsp;&nbsp;&nbsp;]<br>&nbsp;&nbsp;},<br>&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;genre: 'romantic',<br>&nbsp;&nbsp;&nbsp;&nbsp;composers: [<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'Ludwig van Beethoven',<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'Hector Berlioz'<br>&nbsp;&nbsp;&nbsp;&nbsp;]<br>&nbsp;&nbsp;},<br>&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;genre: 'modern',<br>&nbsp;&nbsp;&nbsp;&nbsp;composers: [<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'Benjamin Britten',<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'Charles Ives'<br>&nbsp;&nbsp;&nbsp;&nbsp;]<br>&nbsp;&nbsp;},<br>];<br><br>const composers = music.",
      "q2": "( genre => genre.composers)",
      "choices": [],
      "answer": "",
      "answers": ["flatMap"],
      "explanation": "",
      "moreInfo": "https://kbarker.dev/blog/the-flatmap-method-in-vanilla-js/",
      "size": 7
    },
    {
      "id": 5322,
      "type": "MultipleChoice",
      "given": "let classical = ['J.S. Bach', 'Franz Joseph Haydn']<br><br>let romantic = ['Ludwig van Beethoven', 'Hector Berlioz']<br><br>let composers = [classical, romantic]",
      "question": "What is the value of <pre>composers</pre>?",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": ["[ [ 'J.S. Bach', 'Franz Joseph Haydn' ], [ 'Ludwig van Beethoven', 'Hector Berlioz' ] ]", "[ J.S. Bach', 'Franz Joseph Haydn', 'Ludwig van Beethoven', 'Hector Berlioz'"],
      "answer": "0",
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/destructuring-assignment",
      "size": 0
    },
    {
      "id": 5323,
      "type": "MultipleChoice",
      "given": "let classical = ['J.S. Bach', 'Franz Joseph Haydn']<br><br>let romantic = ['Ludwig van Beethoven', 'Hector Berlioz']<br><br>let composers = [...classical, ...romantic]",
      "question": "What is the value of <pre>composers</pre>?",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": ["[ [ 'J.S. Bach', 'Franz Joseph Haydn' ], [ 'Ludwig van Beethoven', 'Hector Berlioz' ] ]", "[ J.S. Bach', 'Franz Joseph Haydn', 'Ludwig van Beethoven', 'Hector Berlioz'"],
      "answer": "1",
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/destructuring-assignment",
      "size": 0
    },
    {
      "id": 9325,
      "type": "TrueOrFalse",
      "given": "let on = event => console.log(event.clientX, event.clientY)<br><br>document.addEventListener('mousedown', on)<br><br>function off() {document.removeEventListener('mousedown', on)}<br><br>setTimeout(off, 2500)",
      "question": "An event listener for <em>mousedown</em> calls the <pre>on</pre> handler and the, 2.5 seconds later, that event listener is removed",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/bubbling-and-capturing#capturing",
      "size": 0
    },
    {
      "id": 9326,
      "type": "MultipleChoice",
      "given": "// HTML<br>&lt;main><br>&nbsp;&nbsp;&lt;div id=&quot;top&quot;><br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;button>Drink me&lt;/button><br>&nbsp;&nbsp;&lt;/div><br>&lt;/main><br><br>// JS<br>document.querySelector('main').addEventListener('click', event => console.log('You clicked the main tag'))<br><br>document.querySelector('#top').addEventListener('click', event => console.log('You clicked the top div'))<br><br>document.querySelector('button').addEventListener('click', event => console.log('You clicked the button'))",
      "question": "How many lines are written to the console if the button is clicked?",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": ["0","1","2","3"],
      "answer": 3,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/bubbling-and-capturing#capturing",
      "size": 0
    },
    {
      "id": 9327,
      "type": "MultipleChoice",
      "given": "// HTML<br>&lt;main><br>&nbsp;&nbsp;&lt;div id=&quot;top&quot;><br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;button>Drink me&lt;/button><br>&nbsp;&nbsp;&lt;/div><br>&lt;/main><br><br>// JS<br>document.querySelector('main').addEventListener('click', event => console.log('You clicked the main tag'))<br><br>document.querySelector('#top').addEventListener('click', event => console.log('You clicked the top div'))<br><br>document.querySelector('button').addEventListener('click', event => {<br>&nbsp;&nbsp;event.preventDefault()<br>&nbsp;&nbsp;console.log('You clicked the button')<br>})",
      "question": "How many lines are written to the console if the button is clicked?",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": ["0","1","2","3"],
      "answer": 3,
      "answers": [],
      "explanation": "Not <pre>preventDefault()</pre> but <pre>stopPropagation()</pre>",
      "moreInfo": "https://javascript.info/bubbling-and-capturing#stopping-bubbling",
      "size": 0
    },
    {
      "id":9328,
      "type": "TrueOrFalse",
      "given": "",
      "question": "To stop a form from submitting (as it normally would), you should use <pre>event.stopPropagation()</pre> in an event listener",
      "displayAsCode": [],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": false,
      "answers": [],
      "explanation": "Use <pre>event.preventDefault()</pre> instead",
      "moreInfo": "https://javascript.info/default-browser-action#preventing-browser-actions",
      "size": 0
    },
    {
      "id": 9329,
      "type": "TrueOrFalse",
      "given": "let newEvent = new Event('keydown', {bubbles: false})<br><br>document.addEventListener('keydown', event => console.log('Someone pressed a key?'))<br><br>document.querySelector('button').addEventListener('click', event => {<br>&nbsp;&nbsp;event.stopImmediatePropagation()<br>&nbsp;&nbsp;document.dispatchEvent(newEvent)<br>&nbsp;&nbsp;console.log('You clicked the button')<br>})",
      "question": "When the button is clicked, the console will have both 'You clicked the button' and 'Someone pressed a key?'",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://www.javascripttutorial.net/javascript-dom/javascript-dispatchevent/",
      "size": 0
    },
    {
      "id": 9222,
      "type": "ValidOrNot",
      "given": "",
      "question": "// HTML<br>&lt;main><br>&nbsp;&nbsp;&lt;div id=&quot;scroll-me&quot;>Ah, I'll just sit here and relax. Hopefully, no one will come along and start messing with me. I'm tired of spawning a bunch of events.&lt;/div><br>&lt;/main><br><br>// JS<br>document.querySelector('#scroll-me').addEventListener('scroll', event => document.write('If you are going to scroll, I am going to stop that nonsense.'))",
      "displayAsCode": ["question"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/onscroll",
      "size": 0
    },
    {
      "id": 9330,
      "type": "MultipleChoice",
      "given": "",
      "question": "Which of these answers will throw an error?",
      "displayAsCode": ["choices"],
      "q1": "",
      "q2": "",
      "choices": ["document.forms.myForm.addEventListener('click', event => console.log('You like me! You really like me!!'))", "document.forms[0].addEventListener('click', event => console.log('You like me! You really like me!!'))","document.form.addEventListener('click', event => console.log('You like me! You really like me!!'))","document.querySelector('form').addEventListener('click', event => console.log('You like me! You really like me!!'))"],
      "answer": 2,
      "answers": [],
      "explanation": "",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 9223,
      "type": "TrueOrFalse",
      "given": "let el = document.querySelector('#middleInitial')<br>let num = 0<br>el.addEventListener('change', event => {<br>&nbsp;&nbsp;num += 1<br>&nbsp;&nbsp;if (num > 1) {<br>&nbsp;&nbsp;&nbsp;&nbsp;el.value = ''&nbsp;&nbsp;<br>&nbsp;&nbsp;}<br>})",
      "question": "This code prevents the user from typing <em>Hal</em> in the form field.",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": false,
      "answers": [],
      "explanation": "Since the change event fires only after the text box loses its focus, the user <em>can</em> type in more than one character &mdash; but when the element loses focus, the change event fires, setting the value to an empty string.",
      "moreInfo": "https://javascript.info/events-change-input",
      "size": 0
    },
    {
      "id": 9224,
      "type": "TrueOrFalse",
      "given": "",
      "question": "The change event applied to a text field occurs when the field loses its focus",
      "displayAsCode": [],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": false,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/events-change-input",
      "size": 0
    },
    {
      "id": 9331,
      "type": "MultipleChoice",
      "given": "// HTML<br>&lt;form action=&quot;&quot; name=&quot;myForm&quot;><br>&nbsp;&nbsp;&lt;h3>And now for a form...&lt;/h3><br>&nbsp;&nbsp;&lt;input type=&quot;text&quot; id=&quot;hmmm&quot;> &lt;label for=&quot;hmmm&quot;> Paste away, fools!&lt;/label><br>&lt;/form><br><br>// JS<br>hmmm.placeholder = 'Paste away'",
      "question": "What will this code do?",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": ["Nothing &mdash; it will be ignored", "cause an error", "Set <em>Paste away</em> as the placeholder"],
      "answer": 2,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/events-change-input#events-cut-copy-paste",
      "size": 0
    },
    {
      "id": 9332,
      "type": "ValidOrNot",
      "given": "",
      "question": "// HTML<br>&lt;form action=&quot;&quot; name=&quot;myForm&quot;><br>&nbsp;&nbsp;&lt;h3>And now for a form...&lt;/h3><br>&nbsp;&nbsp;&lt;input type=&quot;text&quot; id=&quot;hmmm&quot;> &lt;label for=&quot;hmmm&quot;> Paste away, fools!&lt;/label><br>&lt;/form><br><br>// JS<br>hmmm.oncut = hmmm.oncopy = hmmm.onpaste = event => {<br>&nbsp;&nbsp;alert(event.type + ' ' + event.clipboardData.getData('text/plain'))<br>&nbsp;&nbsp;return false<br>}",
      "displayAsCode": ["question"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [],
      "explanation": "Well, this one surprised me",
      "moreInfo": "https://javascript.info/events-change-input#events-cut-copy-paste",
      "size": 0
    },
    {
      "id": 9333,
      "type": "TrueOrFalse",
      "given": "",
      "question": "To ensure that scripts do not block the browser's execution of the page, use <pre>&lt;script defer src=\"...\">&lt;/script>",
      "displayAsCode": [],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/script-async-defer#defer",
      "size": 0
    },
    {
      "id": 9334,
      "type": "FillBlank",
      "given": "Given an HTML <pre>ul</pre> element with an id of <pre>fish</pre>, fill in the blank to monitor changes to the <pre>ul</pre> children (<pre>li</pre>s)",
      "question": "",
      "displayAsCode": ["q1","q2","answer"],
      "q1": "let observer = new ",
      "q2": "(mutationRecords => console.log('A new fish type was added'))<br><br>observer.observe(fish, {<br>&nbsp;&nbsp;childList: true<br>})<br><br>let li = document.createElement('li')<br>li.textContent = 'Tuna'<br>fish.appendChild(li)",
      "choices": [],
      "answer": "",
      "answers": ["MutationObserver"],
      "explanation": "",
      "moreInfo": "https://javascript.info/mutation-observer",
      "size": 16
    },
    {
      "id": 4350,
      "type": "ValidOrNot",
      "given": "",
      "question": "class TypedArray {<br>&nbsp;&nbsp;constructor(type) {<br>&nbsp;&nbsp;&nbsp;&nbsp;this.type = type<br>&nbsp;&nbsp;&nbsp;&nbsp;this.arr = []<br>&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;push(item) {<br>&nbsp;&nbsp;&nbsp;&nbsp;if (typeof item == this.type) {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.arr.push(item)<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;get value() {<br>&nbsp;&nbsp;&nbsp;&nbsp;return this.arr<br>&nbsp;&nbsp;}<br>}<br><br>let stringArr = new TypedArray('string')<br>stringArr.push('Hello')<br>stringArr.push('World')<br><br>console.log(stringArr.value)",
      "displayAsCode": ["question"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": true,
      "answers": [],
      "explanation": "",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 4351,
      "type": "TrueOrFalse",
      "given": "class TypedArray {<br>&nbsp;&nbsp;constructor(type) {<br>&nbsp;&nbsp;&nbsp;&nbsp;this.type = type<br>&nbsp;&nbsp;&nbsp;&nbsp;this.arr = []<br>&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;push(item) {<br>&nbsp;&nbsp;&nbsp;&nbsp;if (typeof item == this.type) {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.arr.push(item)<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;get value() {<br>&nbsp;&nbsp;&nbsp;&nbsp;return this.arr<br>&nbsp;&nbsp;}<br>}<br><br>let stringArr = new TypedArray('string')<br>stringArr.push('Hello')<br>stringArr.push('World')<br><br>console.log(stringArr.value)",
      "question": "This is an example of class inheritance",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": false,
      "answers": [],
      "explanation": "",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 8325,
      "type": "MultipleChoice",
      "given": "",
      "question": "<pre>fetch</pre> returns what?",
      "displayAsCode": [],
      "q1": "",
      "q2": "",
      "choices": ["a URL", "a promise", "JSON data", "depends on the URL"],
      "answer": 1,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/fetch",
      "size": 0
    },
    {
      "id": 9335,
      "type": "TrueOrFalse",
      "given": "fetch('https://api.agify.io/?name=patrick')<br>&nbsp;&nbsp;.then( response => response.json())<br>&nbsp;&nbsp;.then( data => document.write(data.age))",
      "question": "This is an example of using <em>async/await</em> with promises",
      "displayAsCode": ["given"],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": false,
      "answers": [],
      "explanation": "This is a real URL you can try. Provide a name and see how old the site thinks a person with that name probably is",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": 9336,
      "type": "TrueOrFalse",
      "given": "",
      "question": "If <pre>fetch</pre> is called without a method, an error will occur",
      "displayAsCode": [],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": false,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/fetch",
      "size": 0
    },
    {
      "id": 9337,
      "type": "TrueOrFalse",
      "given": "",
      "question": "<pre>fetch</pre> works only with a GET method",
      "displayAsCode": [],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": false,
      "answers": [],
      "explanation": "",
      "moreInfo": "https://javascript.info/fetch-api",
      "size": 0
    },
    {
      "id": 9225,
      "type": "FillBlank",
      "given": "Fill in the blank to set a cookie",
      "question": "",
      "displayAsCode": ["q1","q2","answer"],
      "q1": "",
      "q2": " = 'author=Hal'",
      "choices": [],
      "answer": "",
      "answers": ["document.cookie"],
      "explanation": "",
      "moreInfo": "https://javascript.info/cookie",
      "size": 15
    },
    {
      "id": ,
      "type": "",
      "given": "",
      "question": "",
      "displayAsCode": [],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": "",
      "answers": [],
      "explanation": "",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": ,
      "type": "",
      "given": "",
      "question": "",
      "displayAsCode": [],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": "",
      "answers": [],
      "explanation": "",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": ,
      "type": "",
      "given": "",
      "question": "",
      "displayAsCode": [],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": "",
      "answers": [],
      "explanation": "",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": ,
      "type": "",
      "given": "",
      "question": "",
      "displayAsCode": [],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": "",
      "answers": [],
      "explanation": "",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": ,
      "type": "",
      "given": "",
      "question": "",
      "displayAsCode": [],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": "",
      "answers": [],
      "explanation": "",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": ,
      "type": "",
      "given": "",
      "question": "",
      "displayAsCode": [],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": "",
      "answers": [],
      "explanation": "",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": ,
      "type": "",
      "given": "",
      "question": "",
      "displayAsCode": [],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": "",
      "answers": [],
      "explanation": "",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": ,
      "type": "",
      "given": "",
      "question": "",
      "displayAsCode": [],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": "",
      "answers": [],
      "explanation": "",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": ,
      "type": "",
      "given": "",
      "question": "",
      "displayAsCode": [],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": "",
      "answers": [],
      "explanation": "",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": ,
      "type": "",
      "given": "",
      "question": "",
      "displayAsCode": [],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": "",
      "answers": [],
      "explanation": "",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": ,
      "type": "",
      "given": "",
      "question": "",
      "displayAsCode": [],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": "",
      "answers": [],
      "explanation": "",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": ,
      "type": "",
      "given": "",
      "question": "",
      "displayAsCode": [],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": "",
      "answers": [],
      "explanation": "",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": ,
      "type": "",
      "given": "",
      "question": "",
      "displayAsCode": [],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": "",
      "answers": [],
      "explanation": "",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": ,
      "type": "",
      "given": "",
      "question": "",
      "displayAsCode": [],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": "",
      "answers": [],
      "explanation": "",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": ,
      "type": "",
      "given": "",
      "question": "",
      "displayAsCode": [],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": "",
      "answers": [],
      "explanation": "",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": ,
      "type": "",
      "given": "",
      "question": "",
      "displayAsCode": [],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": "",
      "answers": [],
      "explanation": "",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": ,
      "type": "",
      "given": "",
      "question": "",
      "displayAsCode": [],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": "",
      "answers": [],
      "explanation": "",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": ,
      "type": "",
      "given": "",
      "question": "",
      "displayAsCode": [],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": "",
      "answers": [],
      "explanation": "",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": ,
      "type": "",
      "given": "",
      "question": "",
      "displayAsCode": [],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": "",
      "answers": [],
      "explanation": "",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": ,
      "type": "",
      "given": "",
      "question": "",
      "displayAsCode": [],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": "",
      "answers": [],
      "explanation": "",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": ,
      "type": "",
      "given": "",
      "question": "",
      "displayAsCode": [],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": "",
      "answers": [],
      "explanation": "",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": ,
      "type": "",
      "given": "",
      "question": "",
      "displayAsCode": [],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": "",
      "answers": [],
      "explanation": "",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": ,
      "type": "",
      "given": "",
      "question": "",
      "displayAsCode": [],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": "",
      "answers": [],
      "explanation": "",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": ,
      "type": "",
      "given": "",
      "question": "",
      "displayAsCode": [],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": "",
      "answers": [],
      "explanation": "",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": ,
      "type": "",
      "given": "",
      "question": "",
      "displayAsCode": [],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": "",
      "answers": [],
      "explanation": "",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": ,
      "type": "",
      "given": "",
      "question": "",
      "displayAsCode": [],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": "",
      "answers": [],
      "explanation": "",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": ,
      "type": "",
      "given": "",
      "question": "",
      "displayAsCode": [],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": "",
      "answers": [],
      "explanation": "",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": ,
      "type": "",
      "given": "",
      "question": "",
      "displayAsCode": [],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": "",
      "answers": [],
      "explanation": "",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": ,
      "type": "",
      "given": "",
      "question": "",
      "displayAsCode": [],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": "",
      "answers": [],
      "explanation": "",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": ,
      "type": "",
      "given": "",
      "question": "",
      "displayAsCode": [],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": "",
      "answers": [],
      "explanation": "",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": ,
      "type": "",
      "given": "",
      "question": "",
      "displayAsCode": [],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": "",
      "answers": [],
      "explanation": "",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": ,
      "type": "",
      "given": "",
      "question": "",
      "displayAsCode": [],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": "",
      "answers": [],
      "explanation": "",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": ,
      "type": "",
      "given": "",
      "question": "",
      "displayAsCode": [],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": "",
      "answers": [],
      "explanation": "",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": ,
      "type": "",
      "given": "",
      "question": "",
      "displayAsCode": [],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": "",
      "answers": [],
      "explanation": "",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": ,
      "type": "",
      "given": "",
      "question": "",
      "displayAsCode": [],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": "",
      "answers": [],
      "explanation": "",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": ,
      "type": "",
      "given": "",
      "question": "",
      "displayAsCode": [],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": "",
      "answers": [],
      "explanation": "",
      "moreInfo": "",
      "size": 0
    },
    {
      "id": ,
      "type": "",
      "given": "",
      "question": "",
      "displayAsCode": [],
      "q1": "",
      "q2": "",
      "choices": [],
      "answer": "",
      "answers": [],
      "explanation": "",
      "moreInfo": "",
      "size": 0
    },
  ]
}